
Project-sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046f4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08004884  08004884  00014884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004918  08004918  00020094  2**0
                  CONTENTS
  4 .ARM          00000000  08004918  08004918  00020094  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004918  08004918  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004918  08004918  00014918  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800491c  0800491c  0001491c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08004920  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020094  2**0
                  CONTENTS
 10 .bss          000005a8  20000094  20000094  00020094  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000063c  2000063c  00020094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001233b  00000000  00000000  00020107  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002753  00000000  00000000  00032442  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001118  00000000  00000000  00034b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000d4f  00000000  00000000  00035cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001ec3c  00000000  00000000  000369ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000156f1  00000000  00000000  0005563b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000b9b4a  00000000  00000000  0006ad2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004df8  00000000  00000000  00124878  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  00129670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800486c 	.word	0x0800486c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	0800486c 	.word	0x0800486c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <enable_clocks>:
static void MX_USB_PCD_Init(void);
void initialise_ptu_i2c(I2C_HandleTypeDef *i2c);


// enable the clocks for desired peripherals (GPIOA, C and E)
void enable_clocks() {
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 8000274:	4b05      	ldr	r3, [pc, #20]	; (800028c <enable_clocks+0x1c>)
 8000276:	695b      	ldr	r3, [r3, #20]
 8000278:	4a04      	ldr	r2, [pc, #16]	; (800028c <enable_clocks+0x1c>)
 800027a:	f443 1328 	orr.w	r3, r3, #2752512	; 0x2a0000
 800027e:	6153      	str	r3, [r2, #20]
}
 8000280:	bf00      	nop
 8000282:	46bd      	mov	sp, r7
 8000284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000288:	4770      	bx	lr
 800028a:	bf00      	nop
 800028c:	40021000 	.word	0x40021000

08000290 <initialise_board>:


// initialise the discovery board I/O (just outputs: inputs are selected by default)
void initialise_board() {
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
	// get a pointer to the second half word of the MODER register (for outputs pe8-15)
	uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 8000296:	4b06      	ldr	r3, [pc, #24]	; (80002b0 <initialise_board+0x20>)
 8000298:	607b      	str	r3, [r7, #4]
	*led_output_registers = 0x5555;
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	f245 5255 	movw	r2, #21845	; 0x5555
 80002a0:	801a      	strh	r2, [r3, #0]
}
 80002a2:	bf00      	nop
 80002a4:	370c      	adds	r7, #12
 80002a6:	46bd      	mov	sp, r7
 80002a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	48001002 	.word	0x48001002

080002b4 <get_distance>:

// Function to get distance from LiDAR in millimeters
uint16_t get_distance(void) {
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b086      	sub	sp, #24
 80002b8:	af04      	add	r7, sp, #16
    HAL_StatusTypeDef return_value = 0x00;
 80002ba:	2300      	movs	r3, #0
 80002bc:	717b      	strb	r3, [r7, #5]
    uint8_t lidar_value = 0x03;
 80002be:	2303      	movs	r3, #3
 80002c0:	713b      	strb	r3, [r7, #4]
    uint8_t lidar_MSBa = 0x00;
 80002c2:	2300      	movs	r3, #0
 80002c4:	70fb      	strb	r3, [r7, #3]
    uint8_t lidar_LSBa = 0x00;
 80002c6:	2300      	movs	r3, #0
 80002c8:	70bb      	strb	r3, [r7, #2]
    volatile uint16_t lidar_distance = 0xff;
 80002ca:	23ff      	movs	r3, #255	; 0xff
 80002cc:	803b      	strh	r3, [r7, #0]
    uint16_t timeout = 0;
 80002ce:	2300      	movs	r3, #0
 80002d0:	80fb      	strh	r3, [r7, #6]

    // Command the LiDAR to perform a measurement
    return_value = HAL_I2C_Mem_Write(&hi2c1, LIDAR_WR, 0x00, 1, &lidar_value, 1, 100);
 80002d2:	2364      	movs	r3, #100	; 0x64
 80002d4:	9302      	str	r3, [sp, #8]
 80002d6:	2301      	movs	r3, #1
 80002d8:	9301      	str	r3, [sp, #4]
 80002da:	1d3b      	adds	r3, r7, #4
 80002dc:	9300      	str	r3, [sp, #0]
 80002de:	2301      	movs	r3, #1
 80002e0:	2200      	movs	r2, #0
 80002e2:	21c4      	movs	r1, #196	; 0xc4
 80002e4:	4826      	ldr	r0, [pc, #152]	; (8000380 <get_distance+0xcc>)
 80002e6:	f001 f83b 	bl	8001360 <HAL_I2C_Mem_Write>
 80002ea:	4603      	mov	r3, r0
 80002ec:	717b      	strb	r3, [r7, #5]

    // Wait for the LiDAR measurement to complete
    lidar_value = 0xff;
 80002ee:	23ff      	movs	r3, #255	; 0xff
 80002f0:	713b      	strb	r3, [r7, #4]
    while ((lidar_value & 0x01) != 0x00) {
 80002f2:	e038      	b.n	8000366 <get_distance+0xb2>
        // Read the status register to check if measurement is done
        return_value = HAL_I2C_Mem_Read(&hi2c1, LIDAR_RD, 0x01, 1, &lidar_value, 1, 100);
 80002f4:	2364      	movs	r3, #100	; 0x64
 80002f6:	9302      	str	r3, [sp, #8]
 80002f8:	2301      	movs	r3, #1
 80002fa:	9301      	str	r3, [sp, #4]
 80002fc:	1d3b      	adds	r3, r7, #4
 80002fe:	9300      	str	r3, [sp, #0]
 8000300:	2301      	movs	r3, #1
 8000302:	2201      	movs	r2, #1
 8000304:	21c5      	movs	r1, #197	; 0xc5
 8000306:	481e      	ldr	r0, [pc, #120]	; (8000380 <get_distance+0xcc>)
 8000308:	f001 f93e 	bl	8001588 <HAL_I2C_Mem_Read>
 800030c:	4603      	mov	r3, r0
 800030e:	717b      	strb	r3, [r7, #5]

        // Read the measured distance from the LiDAR registers
        return_value = HAL_I2C_Mem_Read(&hi2c1, LIDAR_RD, 0x0f, 1, &lidar_MSBa, 1, 100);
 8000310:	2364      	movs	r3, #100	; 0x64
 8000312:	9302      	str	r3, [sp, #8]
 8000314:	2301      	movs	r3, #1
 8000316:	9301      	str	r3, [sp, #4]
 8000318:	1cfb      	adds	r3, r7, #3
 800031a:	9300      	str	r3, [sp, #0]
 800031c:	2301      	movs	r3, #1
 800031e:	220f      	movs	r2, #15
 8000320:	21c5      	movs	r1, #197	; 0xc5
 8000322:	4817      	ldr	r0, [pc, #92]	; (8000380 <get_distance+0xcc>)
 8000324:	f001 f930 	bl	8001588 <HAL_I2C_Mem_Read>
 8000328:	4603      	mov	r3, r0
 800032a:	717b      	strb	r3, [r7, #5]
        return_value = HAL_I2C_Mem_Read(&hi2c1, LIDAR_RD, 0x10, 1, &lidar_LSBa, 1, 100);
 800032c:	2364      	movs	r3, #100	; 0x64
 800032e:	9302      	str	r3, [sp, #8]
 8000330:	2301      	movs	r3, #1
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	1cbb      	adds	r3, r7, #2
 8000336:	9300      	str	r3, [sp, #0]
 8000338:	2301      	movs	r3, #1
 800033a:	2210      	movs	r2, #16
 800033c:	21c5      	movs	r1, #197	; 0xc5
 800033e:	4810      	ldr	r0, [pc, #64]	; (8000380 <get_distance+0xcc>)
 8000340:	f001 f922 	bl	8001588 <HAL_I2C_Mem_Read>
 8000344:	4603      	mov	r3, r0
 8000346:	717b      	strb	r3, [r7, #5]
        // Combine the MSB and LSB to form the distance in mm
        lidar_distance = ((lidar_MSBa << 8) | lidar_LSBa);
 8000348:	78fb      	ldrb	r3, [r7, #3]
 800034a:	021b      	lsls	r3, r3, #8
 800034c:	b21a      	sxth	r2, r3
 800034e:	78bb      	ldrb	r3, [r7, #2]
 8000350:	b21b      	sxth	r3, r3
 8000352:	4313      	orrs	r3, r2
 8000354:	b21b      	sxth	r3, r3
 8000356:	b29b      	uxth	r3, r3
 8000358:	803b      	strh	r3, [r7, #0]
        timeout += 1;
 800035a:	88fb      	ldrh	r3, [r7, #6]
 800035c:	3301      	adds	r3, #1
 800035e:	80fb      	strh	r3, [r7, #6]
        if (timeout > 0xff) {
 8000360:	88fb      	ldrh	r3, [r7, #6]
 8000362:	2bff      	cmp	r3, #255	; 0xff
 8000364:	d805      	bhi.n	8000372 <get_distance+0xbe>
    while ((lidar_value & 0x01) != 0x00) {
 8000366:	793b      	ldrb	r3, [r7, #4]
 8000368:	f003 0301 	and.w	r3, r3, #1
 800036c:	2b00      	cmp	r3, #0
 800036e:	d1c1      	bne.n	80002f4 <get_distance+0x40>
 8000370:	e000      	b.n	8000374 <get_distance+0xc0>
            break;
 8000372:	bf00      	nop
        }
    }

    return lidar_distance;
 8000374:	883b      	ldrh	r3, [r7, #0]
 8000376:	b29b      	uxth	r3, r3
}
 8000378:	4618      	mov	r0, r3
 800037a:	3708      	adds	r7, #8
 800037c:	46bd      	mov	sp, r7
 800037e:	bd80      	pop	{r7, pc}
 8000380:	200000b0 	.word	0x200000b0

08000384 <main>:

int main(void)
{
 8000384:	b5b0      	push	{r4, r5, r7, lr}
 8000386:	b096      	sub	sp, #88	; 0x58
 8000388:	af04      	add	r7, sp, #16

	uint8_t string_to_send[64] = "This is a string !\r\n";
 800038a:	4b2d      	ldr	r3, [pc, #180]	; (8000440 <main+0xbc>)
 800038c:	1d3c      	adds	r4, r7, #4
 800038e:	461d      	mov	r5, r3
 8000390:	6828      	ldr	r0, [r5, #0]
 8000392:	6869      	ldr	r1, [r5, #4]
 8000394:	68aa      	ldr	r2, [r5, #8]
 8000396:	68eb      	ldr	r3, [r5, #12]
 8000398:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800039a:	6928      	ldr	r0, [r5, #16]
 800039c:	6020      	str	r0, [r4, #0]
 800039e:	7d2b      	ldrb	r3, [r5, #20]
 80003a0:	7123      	strb	r3, [r4, #4]
 80003a2:	f107 0319 	add.w	r3, r7, #25
 80003a6:	222b      	movs	r2, #43	; 0x2b
 80003a8:	2100      	movs	r1, #0
 80003aa:	4618      	mov	r0, r3
 80003ac:	f003 fdda 	bl	8003f64 <memset>

	enable_clocks();
 80003b0:	f7ff ff5e 	bl	8000270 <enable_clocks>
	initialise_board();
 80003b4:	f7ff ff6c 	bl	8000290 <initialise_board>


	SerialInitialise(BAUD_115200, &USART1_PORT, 0x00);
 80003b8:	2200      	movs	r2, #0
 80003ba:	4922      	ldr	r1, [pc, #136]	; (8000444 <main+0xc0>)
 80003bc:	2004      	movs	r0, #4
 80003be:	f000 f9ed 	bl	800079c <SerialInitialise>

	HAL_StatusTypeDef return_value = 0x00;
 80003c2:	2300      	movs	r3, #0
 80003c4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47


  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80003c8:	f000 fc38 	bl	8000c3c <HAL_Init>

  /* Configure the system clock */
	SystemClock_Config();
 80003cc:	f000 f842 	bl	8000454 <SystemClock_Config>


	/* Initialize all configured peripherals */
	MX_GPIO_Init(); // Initialize GPIO pins.
 80003d0:	f000 f944 	bl	800065c <MX_GPIO_Init>
	MX_I2C1_Init(); // Initialize I2C1.
 80003d4:	f000 f8a2 	bl	800051c <MX_I2C1_Init>
	MX_SPI1_Init(); // Initialize SPI1.
 80003d8:	f000 f8e0 	bl	800059c <MX_SPI1_Init>
	MX_USB_PCD_Init(); // Initialize USB.
 80003dc:	f000 f91c 	bl	8000618 <MX_USB_PCD_Init>



	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1); // Start input capture on TIM1 Channel 1.
 80003e0:	2100      	movs	r1, #0
 80003e2:	4819      	ldr	r0, [pc, #100]	; (8000448 <main+0xc4>)
 80003e4:	f003 fa8c 	bl	8003900 <HAL_TIM_IC_Start_IT>


	initialise_ptu_i2c(&hi2c1); // Initialize PTU communication over I2C.
 80003e8:	4818      	ldr	r0, [pc, #96]	; (800044c <main+0xc8>)
 80003ea:	f000 f9b5 	bl	8000758 <initialise_ptu_i2c>


	// reset lidar board
	uint8_t reset_value = 0x00;
 80003ee:	2300      	movs	r3, #0
 80003f0:	70fb      	strb	r3, [r7, #3]
	return_value = HAL_I2C_Mem_Write(&hi2c1, LIDAR_WR, 0x00, 1, &reset_value, 1, 10);
 80003f2:	230a      	movs	r3, #10
 80003f4:	9302      	str	r3, [sp, #8]
 80003f6:	2301      	movs	r3, #1
 80003f8:	9301      	str	r3, [sp, #4]
 80003fa:	1cfb      	adds	r3, r7, #3
 80003fc:	9300      	str	r3, [sp, #0]
 80003fe:	2301      	movs	r3, #1
 8000400:	2200      	movs	r2, #0
 8000402:	21c4      	movs	r1, #196	; 0xc4
 8000404:	4811      	ldr	r0, [pc, #68]	; (800044c <main+0xc8>)
 8000406:	f000 ffab 	bl	8001360 <HAL_I2C_Mem_Write>
 800040a:	4603      	mov	r3, r0
 800040c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	// delay for initialisation of the lidar
	HAL_Delay(100);
 8000410:	2064      	movs	r0, #100	; 0x64
 8000412:	f000 fc79 	bl	8000d08 <HAL_Delay>

    while (1)
    {
        // Get the distance from the LiDAR
        uint16_t distance = get_distance();
 8000416:	f7ff ff4d 	bl	80002b4 <get_distance>
 800041a:	4603      	mov	r3, r0
 800041c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

        // Format and send the distance measurement via UART
        sprintf(string_to_send, "distance is %hu cm\r\n", distance);
 8000420:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8000424:	1d3b      	adds	r3, r7, #4
 8000426:	490a      	ldr	r1, [pc, #40]	; (8000450 <main+0xcc>)
 8000428:	4618      	mov	r0, r3
 800042a:	f003 fd7b 	bl	8003f24 <siprintf>
        HAL_Delay(100); // Add delay between measurements
 800042e:	2064      	movs	r0, #100	; 0x64
 8000430:	f000 fc6a 	bl	8000d08 <HAL_Delay>

        SerialOutputString(string_to_send, &USART1_PORT);
 8000434:	1d3b      	adds	r3, r7, #4
 8000436:	4903      	ldr	r1, [pc, #12]	; (8000444 <main+0xc0>)
 8000438:	4618      	mov	r0, r3
 800043a:	f000 fa3c 	bl	80008b6 <SerialOutputString>
    {
 800043e:	e7ea      	b.n	8000416 <main+0x92>
 8000440:	0800489c 	.word	0x0800489c
 8000444:	20000000 	.word	0x20000000
 8000448:	20000168 	.word	0x20000168
 800044c:	200000b0 	.word	0x200000b0
 8000450:	08004884 	.word	0x08004884

08000454 <SystemClock_Config>:




void SystemClock_Config(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b09e      	sub	sp, #120	; 0x78
 8000458:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800045a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800045e:	2228      	movs	r2, #40	; 0x28
 8000460:	2100      	movs	r1, #0
 8000462:	4618      	mov	r0, r3
 8000464:	f003 fd7e 	bl	8003f64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000468:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800046c:	2200      	movs	r2, #0
 800046e:	601a      	str	r2, [r3, #0]
 8000470:	605a      	str	r2, [r3, #4]
 8000472:	609a      	str	r2, [r3, #8]
 8000474:	60da      	str	r2, [r3, #12]
 8000476:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000478:	463b      	mov	r3, r7
 800047a:	223c      	movs	r2, #60	; 0x3c
 800047c:	2100      	movs	r1, #0
 800047e:	4618      	mov	r0, r3
 8000480:	f003 fd70 	bl	8003f64 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000484:	2303      	movs	r3, #3
 8000486:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000488:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800048c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800048e:	2300      	movs	r3, #0
 8000490:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000492:	2301      	movs	r3, #1
 8000494:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000496:	2310      	movs	r3, #16
 8000498:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800049a:	2302      	movs	r3, #2
 800049c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800049e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004a2:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80004a4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80004a8:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004aa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80004ae:	4618      	mov	r0, r3
 80004b0:	f001 fda6 	bl	8002000 <HAL_RCC_OscConfig>
 80004b4:	4603      	mov	r3, r0
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80004ba:	f000 f96a 	bl	8000792 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004be:	230f      	movs	r3, #15
 80004c0:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004c2:	2302      	movs	r3, #2
 80004c4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004c6:	2300      	movs	r3, #0
 80004c8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004d0:	2300      	movs	r3, #0
 80004d2:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004d4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80004d8:	2101      	movs	r1, #1
 80004da:	4618      	mov	r0, r3
 80004dc:	f002 fdce 	bl	800307c <HAL_RCC_ClockConfig>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d001      	beq.n	80004ea <SystemClock_Config+0x96>
  {
    Error_Handler();
 80004e6:	f000 f954 	bl	8000792 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1
 80004ea:	4b0b      	ldr	r3, [pc, #44]	; (8000518 <SystemClock_Config+0xc4>)
 80004ec:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80004ee:	2300      	movs	r3, #0
 80004f0:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80004f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80004f6:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80004f8:	2300      	movs	r3, #0
 80004fa:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004fc:	463b      	mov	r3, r7
 80004fe:	4618      	mov	r0, r3
 8000500:	f002 ffa2 	bl	8003448 <HAL_RCCEx_PeriphCLKConfig>
 8000504:	4603      	mov	r3, r0
 8000506:	2b00      	cmp	r3, #0
 8000508:	d001      	beq.n	800050e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800050a:	f000 f942 	bl	8000792 <Error_Handler>
  }
}
 800050e:	bf00      	nop
 8000510:	3778      	adds	r7, #120	; 0x78
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	00021020 	.word	0x00021020

0800051c <MX_I2C1_Init>:

static void MX_I2C1_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  hi2c1.Instance = I2C1;
 8000520:	4b1b      	ldr	r3, [pc, #108]	; (8000590 <MX_I2C1_Init+0x74>)
 8000522:	4a1c      	ldr	r2, [pc, #112]	; (8000594 <MX_I2C1_Init+0x78>)
 8000524:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000526:	4b1a      	ldr	r3, [pc, #104]	; (8000590 <MX_I2C1_Init+0x74>)
 8000528:	4a1b      	ldr	r2, [pc, #108]	; (8000598 <MX_I2C1_Init+0x7c>)
 800052a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800052c:	4b18      	ldr	r3, [pc, #96]	; (8000590 <MX_I2C1_Init+0x74>)
 800052e:	2200      	movs	r2, #0
 8000530:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000532:	4b17      	ldr	r3, [pc, #92]	; (8000590 <MX_I2C1_Init+0x74>)
 8000534:	2201      	movs	r2, #1
 8000536:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000538:	4b15      	ldr	r3, [pc, #84]	; (8000590 <MX_I2C1_Init+0x74>)
 800053a:	2200      	movs	r2, #0
 800053c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800053e:	4b14      	ldr	r3, [pc, #80]	; (8000590 <MX_I2C1_Init+0x74>)
 8000540:	2200      	movs	r2, #0
 8000542:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000544:	4b12      	ldr	r3, [pc, #72]	; (8000590 <MX_I2C1_Init+0x74>)
 8000546:	2200      	movs	r2, #0
 8000548:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800054a:	4b11      	ldr	r3, [pc, #68]	; (8000590 <MX_I2C1_Init+0x74>)
 800054c:	2200      	movs	r2, #0
 800054e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000550:	4b0f      	ldr	r3, [pc, #60]	; (8000590 <MX_I2C1_Init+0x74>)
 8000552:	2200      	movs	r2, #0
 8000554:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000556:	480e      	ldr	r0, [pc, #56]	; (8000590 <MX_I2C1_Init+0x74>)
 8000558:	f000 fe72 	bl	8001240 <HAL_I2C_Init>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000562:	f000 f916 	bl	8000792 <Error_Handler>
  }

  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000566:	2100      	movs	r1, #0
 8000568:	4809      	ldr	r0, [pc, #36]	; (8000590 <MX_I2C1_Init+0x74>)
 800056a:	f001 fbdf 	bl	8001d2c <HAL_I2CEx_ConfigAnalogFilter>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000574:	f000 f90d 	bl	8000792 <Error_Handler>
  }

  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000578:	2100      	movs	r1, #0
 800057a:	4805      	ldr	r0, [pc, #20]	; (8000590 <MX_I2C1_Init+0x74>)
 800057c:	f001 fc21 	bl	8001dc2 <HAL_I2CEx_ConfigDigitalFilter>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000586:	f000 f904 	bl	8000792 <Error_Handler>
  }

}
 800058a:	bf00      	nop
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	200000b0 	.word	0x200000b0
 8000594:	40005400 	.word	0x40005400
 8000598:	2000090e 	.word	0x2000090e

0800059c <MX_SPI1_Init>:

static void MX_SPI1_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  hspi1.Instance = SPI1;
 80005a0:	4b1b      	ldr	r3, [pc, #108]	; (8000610 <MX_SPI1_Init+0x74>)
 80005a2:	4a1c      	ldr	r2, [pc, #112]	; (8000614 <MX_SPI1_Init+0x78>)
 80005a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80005a6:	4b1a      	ldr	r3, [pc, #104]	; (8000610 <MX_SPI1_Init+0x74>)
 80005a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80005ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80005ae:	4b18      	ldr	r3, [pc, #96]	; (8000610 <MX_SPI1_Init+0x74>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80005b4:	4b16      	ldr	r3, [pc, #88]	; (8000610 <MX_SPI1_Init+0x74>)
 80005b6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80005ba:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005bc:	4b14      	ldr	r3, [pc, #80]	; (8000610 <MX_SPI1_Init+0x74>)
 80005be:	2200      	movs	r2, #0
 80005c0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005c2:	4b13      	ldr	r3, [pc, #76]	; (8000610 <MX_SPI1_Init+0x74>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80005c8:	4b11      	ldr	r3, [pc, #68]	; (8000610 <MX_SPI1_Init+0x74>)
 80005ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005ce:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80005d0:	4b0f      	ldr	r3, [pc, #60]	; (8000610 <MX_SPI1_Init+0x74>)
 80005d2:	2208      	movs	r2, #8
 80005d4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005d6:	4b0e      	ldr	r3, [pc, #56]	; (8000610 <MX_SPI1_Init+0x74>)
 80005d8:	2200      	movs	r2, #0
 80005da:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80005dc:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <MX_SPI1_Init+0x74>)
 80005de:	2200      	movs	r2, #0
 80005e0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80005e2:	4b0b      	ldr	r3, [pc, #44]	; (8000610 <MX_SPI1_Init+0x74>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80005e8:	4b09      	ldr	r3, [pc, #36]	; (8000610 <MX_SPI1_Init+0x74>)
 80005ea:	2207      	movs	r2, #7
 80005ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80005ee:	4b08      	ldr	r3, [pc, #32]	; (8000610 <MX_SPI1_Init+0x74>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80005f4:	4b06      	ldr	r3, [pc, #24]	; (8000610 <MX_SPI1_Init+0x74>)
 80005f6:	2208      	movs	r2, #8
 80005f8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80005fa:	4805      	ldr	r0, [pc, #20]	; (8000610 <MX_SPI1_Init+0x74>)
 80005fc:	f003 f8d4 	bl	80037a8 <HAL_SPI_Init>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000606:	f000 f8c4 	bl	8000792 <Error_Handler>
  }
}
 800060a:	bf00      	nop
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	20000104 	.word	0x20000104
 8000614:	40013000 	.word	0x40013000

08000618 <MX_USB_PCD_Init>:


static void MX_USB_PCD_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  hpcd_USB_FS.Instance = USB;
 800061c:	4b0d      	ldr	r3, [pc, #52]	; (8000654 <MX_USB_PCD_Init+0x3c>)
 800061e:	4a0e      	ldr	r2, [pc, #56]	; (8000658 <MX_USB_PCD_Init+0x40>)
 8000620:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000622:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <MX_USB_PCD_Init+0x3c>)
 8000624:	2208      	movs	r2, #8
 8000626:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000628:	4b0a      	ldr	r3, [pc, #40]	; (8000654 <MX_USB_PCD_Init+0x3c>)
 800062a:	2202      	movs	r2, #2
 800062c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800062e:	4b09      	ldr	r3, [pc, #36]	; (8000654 <MX_USB_PCD_Init+0x3c>)
 8000630:	2202      	movs	r2, #2
 8000632:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000634:	4b07      	ldr	r3, [pc, #28]	; (8000654 <MX_USB_PCD_Init+0x3c>)
 8000636:	2200      	movs	r2, #0
 8000638:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800063a:	4b06      	ldr	r3, [pc, #24]	; (8000654 <MX_USB_PCD_Init+0x3c>)
 800063c:	2200      	movs	r2, #0
 800063e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000640:	4804      	ldr	r0, [pc, #16]	; (8000654 <MX_USB_PCD_Init+0x3c>)
 8000642:	f001 fc0a 	bl	8001e5a <HAL_PCD_Init>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 800064c:	f000 f8a1 	bl	8000792 <Error_Handler>
  }

}
 8000650:	bf00      	nop
 8000652:	bd80      	pop	{r7, pc}
 8000654:	20000200 	.word	0x20000200
 8000658:	40005c00 	.word	0x40005c00

0800065c <MX_GPIO_Init>:


static void MX_GPIO_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b08a      	sub	sp, #40	; 0x28
 8000660:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000662:	f107 0314 	add.w	r3, r7, #20
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	605a      	str	r2, [r3, #4]
 800066c:	609a      	str	r2, [r3, #8]
 800066e:	60da      	str	r2, [r3, #12]
 8000670:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000672:	4b37      	ldr	r3, [pc, #220]	; (8000750 <MX_GPIO_Init+0xf4>)
 8000674:	695b      	ldr	r3, [r3, #20]
 8000676:	4a36      	ldr	r2, [pc, #216]	; (8000750 <MX_GPIO_Init+0xf4>)
 8000678:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800067c:	6153      	str	r3, [r2, #20]
 800067e:	4b34      	ldr	r3, [pc, #208]	; (8000750 <MX_GPIO_Init+0xf4>)
 8000680:	695b      	ldr	r3, [r3, #20]
 8000682:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000686:	613b      	str	r3, [r7, #16]
 8000688:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800068a:	4b31      	ldr	r3, [pc, #196]	; (8000750 <MX_GPIO_Init+0xf4>)
 800068c:	695b      	ldr	r3, [r3, #20]
 800068e:	4a30      	ldr	r2, [pc, #192]	; (8000750 <MX_GPIO_Init+0xf4>)
 8000690:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000694:	6153      	str	r3, [r2, #20]
 8000696:	4b2e      	ldr	r3, [pc, #184]	; (8000750 <MX_GPIO_Init+0xf4>)
 8000698:	695b      	ldr	r3, [r3, #20]
 800069a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800069e:	60fb      	str	r3, [r7, #12]
 80006a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006a2:	4b2b      	ldr	r3, [pc, #172]	; (8000750 <MX_GPIO_Init+0xf4>)
 80006a4:	695b      	ldr	r3, [r3, #20]
 80006a6:	4a2a      	ldr	r2, [pc, #168]	; (8000750 <MX_GPIO_Init+0xf4>)
 80006a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006ac:	6153      	str	r3, [r2, #20]
 80006ae:	4b28      	ldr	r3, [pc, #160]	; (8000750 <MX_GPIO_Init+0xf4>)
 80006b0:	695b      	ldr	r3, [r3, #20]
 80006b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006b6:	60bb      	str	r3, [r7, #8]
 80006b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ba:	4b25      	ldr	r3, [pc, #148]	; (8000750 <MX_GPIO_Init+0xf4>)
 80006bc:	695b      	ldr	r3, [r3, #20]
 80006be:	4a24      	ldr	r2, [pc, #144]	; (8000750 <MX_GPIO_Init+0xf4>)
 80006c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006c4:	6153      	str	r3, [r2, #20]
 80006c6:	4b22      	ldr	r3, [pc, #136]	; (8000750 <MX_GPIO_Init+0xf4>)
 80006c8:	695b      	ldr	r3, [r3, #20]
 80006ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d2:	4b1f      	ldr	r3, [pc, #124]	; (8000750 <MX_GPIO_Init+0xf4>)
 80006d4:	695b      	ldr	r3, [r3, #20]
 80006d6:	4a1e      	ldr	r2, [pc, #120]	; (8000750 <MX_GPIO_Init+0xf4>)
 80006d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006dc:	6153      	str	r3, [r2, #20]
 80006de:	4b1c      	ldr	r3, [pc, #112]	; (8000750 <MX_GPIO_Init+0xf4>)
 80006e0:	695b      	ldr	r3, [r3, #20]
 80006e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80006e6:	603b      	str	r3, [r7, #0]
 80006e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80006ea:	2200      	movs	r2, #0
 80006ec:	f64f 7108 	movw	r1, #65288	; 0xff08
 80006f0:	4818      	ldr	r0, [pc, #96]	; (8000754 <MX_GPIO_Init+0xf8>)
 80006f2:	f000 fd8d 	bl	8001210 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 80006f6:	2337      	movs	r3, #55	; 0x37
 80006f8:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80006fa:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80006fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000700:	2300      	movs	r3, #0
 8000702:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000704:	f107 0314 	add.w	r3, r7, #20
 8000708:	4619      	mov	r1, r3
 800070a:	4812      	ldr	r0, [pc, #72]	; (8000754 <MX_GPIO_Init+0xf8>)
 800070c:	f000 fc06 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000710:	f64f 7308 	movw	r3, #65288	; 0xff08
 8000714:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000716:	2301      	movs	r3, #1
 8000718:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071a:	2300      	movs	r3, #0
 800071c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071e:	2300      	movs	r3, #0
 8000720:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000722:	f107 0314 	add.w	r3, r7, #20
 8000726:	4619      	mov	r1, r3
 8000728:	480a      	ldr	r0, [pc, #40]	; (8000754 <MX_GPIO_Init+0xf8>)
 800072a:	f000 fbf7 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800072e:	2301      	movs	r3, #1
 8000730:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000732:	2300      	movs	r3, #0
 8000734:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000736:	2300      	movs	r3, #0
 8000738:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800073a:	f107 0314 	add.w	r3, r7, #20
 800073e:	4619      	mov	r1, r3
 8000740:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000744:	f000 fbea 	bl	8000f1c <HAL_GPIO_Init>

}
 8000748:	bf00      	nop
 800074a:	3728      	adds	r7, #40	; 0x28
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40021000 	.word	0x40021000
 8000754:	48001000 	.word	0x48001000

08000758 <initialise_ptu_i2c>:

void initialise_ptu_i2c(I2C_HandleTypeDef *i2c) {
 8000758:	b580      	push	{r7, lr}
 800075a:	b088      	sub	sp, #32
 800075c:	af04      	add	r7, sp, #16
 800075e:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef return_value = 0x00;
 8000760:	2300      	movs	r3, #0
 8000762:	73fb      	strb	r3, [r7, #15]

	uint8_t reg_1 = 0b00001111;
 8000764:	230f      	movs	r3, #15
 8000766:	73bb      	strb	r3, [r7, #14]

	// reset lidar board
	uint8_t reset_value = 0x00;
 8000768:	2300      	movs	r3, #0
 800076a:	737b      	strb	r3, [r7, #13]
	return_value = HAL_I2C_Mem_Write(i2c, LIDAR_WR, 0x00, 1, &reset_value, 1, 10);
 800076c:	230a      	movs	r3, #10
 800076e:	9302      	str	r3, [sp, #8]
 8000770:	2301      	movs	r3, #1
 8000772:	9301      	str	r3, [sp, #4]
 8000774:	f107 030d 	add.w	r3, r7, #13
 8000778:	9300      	str	r3, [sp, #0]
 800077a:	2301      	movs	r3, #1
 800077c:	2200      	movs	r2, #0
 800077e:	21c4      	movs	r1, #196	; 0xc4
 8000780:	6878      	ldr	r0, [r7, #4]
 8000782:	f000 fded 	bl	8001360 <HAL_I2C_Mem_Write>
 8000786:	4603      	mov	r3, r0
 8000788:	73fb      	strb	r3, [r7, #15]
}
 800078a:	bf00      	nop
 800078c:	3710      	adds	r7, #16
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}

08000792 <Error_Handler>:


void Error_Handler(void)
{
 8000792:	b480      	push	{r7}
 8000794:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000796:	b672      	cpsid	i
}
 8000798:	bf00      	nop
	__disable_irq();
	while (1)
 800079a:	e7fe      	b.n	800079a <Error_Handler+0x8>

0800079c <SerialInitialise>:
		0x77};


// InitialiseSerial - Initialise the serial port
// Input: baudRate is from an enumerated set
void SerialInitialise(uint32_t baudRate, SerialPort *serial_port, void (*completion_function)(uint32_t)) {
 800079c:	b480      	push	{r7}
 800079e:	b087      	sub	sp, #28
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	60f8      	str	r0, [r7, #12]
 80007a4:	60b9      	str	r1, [r7, #8]
 80007a6:	607a      	str	r2, [r7, #4]

	serial_port->completion_function = completion_function;
 80007a8:	68bb      	ldr	r3, [r7, #8]
 80007aa:	687a      	ldr	r2, [r7, #4]
 80007ac:	635a      	str	r2, [r3, #52]	; 0x34

	// enable clock power, system configuration clock and GPIOC
	// common to all UARTs
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80007ae:	4b34      	ldr	r3, [pc, #208]	; (8000880 <SerialInitialise+0xe4>)
 80007b0:	69db      	ldr	r3, [r3, #28]
 80007b2:	4a33      	ldr	r2, [pc, #204]	; (8000880 <SerialInitialise+0xe4>)
 80007b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007b8:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80007ba:	4b31      	ldr	r3, [pc, #196]	; (8000880 <SerialInitialise+0xe4>)
 80007bc:	699b      	ldr	r3, [r3, #24]
 80007be:	4a30      	ldr	r2, [pc, #192]	; (8000880 <SerialInitialise+0xe4>)
 80007c0:	f043 0301 	orr.w	r3, r3, #1
 80007c4:	6193      	str	r3, [r2, #24]

	switch(serial_port->SerialPortGPIO) {
 80007c6:	68bb      	ldr	r3, [r7, #8]
 80007c8:	699b      	ldr	r3, [r3, #24]
 80007ca:	2b02      	cmp	r3, #2
 80007cc:	d106      	bne.n	80007dc <SerialInitialise+0x40>
	case SERIAL_GPIO_C:
		RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 80007ce:	4b2c      	ldr	r3, [pc, #176]	; (8000880 <SerialInitialise+0xe4>)
 80007d0:	695b      	ldr	r3, [r3, #20]
 80007d2:	4a2b      	ldr	r2, [pc, #172]	; (8000880 <SerialInitialise+0xe4>)
 80007d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80007d8:	6153      	str	r3, [r2, #20]
		break;
 80007da:	e000      	b.n	80007de <SerialInitialise+0x42>
	default:
		break;
 80007dc:	bf00      	nop
	}

	// set pin mode
	*(serial_port->SerialPinModeRegister) = serial_port->SerialPinModeValue;
 80007de:	68bb      	ldr	r3, [r7, #8]
 80007e0:	69db      	ldr	r3, [r3, #28]
 80007e2:	68ba      	ldr	r2, [r7, #8]
 80007e4:	6a12      	ldr	r2, [r2, #32]
 80007e6:	601a      	str	r2, [r3, #0]

	// enable high speed clock for GPIOC
	*(serial_port->SerialPinSpeedRegister) = serial_port->SerialPinSpeedValue;
 80007e8:	68bb      	ldr	r3, [r7, #8]
 80007ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007ec:	68ba      	ldr	r2, [r7, #8]
 80007ee:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80007f0:	601a      	str	r2, [r3, #0]

	// set alternate function to enable USART to an external pin
	*(serial_port->SerialPinAlternatePinRegister) = serial_port->SerialPinAlternatePinValue;
 80007f2:	68bb      	ldr	r3, [r7, #8]
 80007f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007f6:	68ba      	ldr	r2, [r7, #8]
 80007f8:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 80007fc:	b2d2      	uxtb	r2, r2
 80007fe:	701a      	strb	r2, [r3, #0]

	*(serial_port->TimerEnableRegister) |= serial_port->TimerEnableMask;
 8000800:	68bb      	ldr	r3, [r7, #8]
 8000802:	6959      	ldr	r1, [r3, #20]
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	691b      	ldr	r3, [r3, #16]
 8000808:	681a      	ldr	r2, [r3, #0]
 800080a:	68bb      	ldr	r3, [r7, #8]
 800080c:	691b      	ldr	r3, [r3, #16]
 800080e:	430a      	orrs	r2, r1
 8000810:	601a      	str	r2, [r3, #0]

	uint16_t *baud_rate_config = ((uint16_t*)serial_port->BaudRate); // only 16 bits used!
 8000812:	68bb      	ldr	r3, [r7, #8]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	617b      	str	r3, [r7, #20]

	// Baud rate calculation from datasheet
	switch(baudRate){
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	2b04      	cmp	r3, #4
 800081c:	d821      	bhi.n	8000862 <SerialInitialise+0xc6>
 800081e:	a201      	add	r2, pc, #4	; (adr r2, 8000824 <SerialInitialise+0x88>)
 8000820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000824:	08000839 	.word	0x08000839
 8000828:	08000841 	.word	0x08000841
 800082c:	08000849 	.word	0x08000849
 8000830:	08000851 	.word	0x08000851
 8000834:	08000859 	.word	0x08000859
	case BAUD_9600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000838:	697b      	ldr	r3, [r7, #20]
 800083a:	2246      	movs	r2, #70	; 0x46
 800083c:	801a      	strh	r2, [r3, #0]
		break;
 800083e:	e010      	b.n	8000862 <SerialInitialise+0xc6>
	case BAUD_19200:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000840:	697b      	ldr	r3, [r7, #20]
 8000842:	2246      	movs	r2, #70	; 0x46
 8000844:	801a      	strh	r2, [r3, #0]
		break;
 8000846:	e00c      	b.n	8000862 <SerialInitialise+0xc6>
	case BAUD_38400:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000848:	697b      	ldr	r3, [r7, #20]
 800084a:	2246      	movs	r2, #70	; 0x46
 800084c:	801a      	strh	r2, [r3, #0]
		break;
 800084e:	e008      	b.n	8000862 <SerialInitialise+0xc6>
	case BAUD_57600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000850:	697b      	ldr	r3, [r7, #20]
 8000852:	2246      	movs	r2, #70	; 0x46
 8000854:	801a      	strh	r2, [r3, #0]
		break;
 8000856:	e004      	b.n	8000862 <SerialInitialise+0xc6>
	case BAUD_115200:
		*baud_rate_config = 0x46 * 0x06;  // 115200 at 8MHz
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800085e:	801a      	strh	r2, [r3, #0]
		break;
 8000860:	bf00      	nop
	}


	// enable serial port for tx and rx
	*(serial_port->ControlRegister1) |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 8000862:	68bb      	ldr	r3, [r7, #8]
 8000864:	685b      	ldr	r3, [r3, #4]
 8000866:	681a      	ldr	r2, [r3, #0]
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	685b      	ldr	r3, [r3, #4]
 800086c:	f042 020d 	orr.w	r2, r2, #13
 8000870:	601a      	str	r2, [r3, #0]
}
 8000872:	bf00      	nop
 8000874:	371c      	adds	r7, #28
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	40021000 	.word	0x40021000

08000884 <SerialOutputChar>:


void SerialOutputChar(uint8_t data, SerialPort *serial_port) {
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	6039      	str	r1, [r7, #0]
 800088e:	71fb      	strb	r3, [r7, #7]
	while((*(serial_port->StatusRegister) & USART_ISR_TXE) == 0){
 8000890:	bf00      	nop
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	689b      	ldr	r3, [r3, #8]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800089c:	2b00      	cmp	r3, #0
 800089e:	d0f8      	beq.n	8000892 <SerialOutputChar+0xe>
	}

	*(serial_port->DataOutputRegister) = data;
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	68db      	ldr	r3, [r3, #12]
 80008a4:	79fa      	ldrb	r2, [r7, #7]
 80008a6:	b292      	uxth	r2, r2
 80008a8:	801a      	strh	r2, [r3, #0]
}
 80008aa:	bf00      	nop
 80008ac:	370c      	adds	r7, #12
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr

080008b6 <SerialOutputString>:



void SerialOutputString(uint8_t *pt, SerialPort *serial_port) {
 80008b6:	b580      	push	{r7, lr}
 80008b8:	b084      	sub	sp, #16
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	6078      	str	r0, [r7, #4]
 80008be:	6039      	str	r1, [r7, #0]

	uint32_t counter = 0;
 80008c0:	2300      	movs	r3, #0
 80008c2:	60fb      	str	r3, [r7, #12]
	while(*pt) {
 80008c4:	e00b      	b.n	80008de <SerialOutputString+0x28>
		SerialOutputChar(*pt, serial_port);
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	6839      	ldr	r1, [r7, #0]
 80008cc:	4618      	mov	r0, r3
 80008ce:	f7ff ffd9 	bl	8000884 <SerialOutputChar>
		counter++;
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	3301      	adds	r3, #1
 80008d6:	60fb      	str	r3, [r7, #12]
		pt++;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	3301      	adds	r3, #1
 80008dc:	607b      	str	r3, [r7, #4]
	while(*pt) {
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d1ef      	bne.n	80008c6 <SerialOutputString+0x10>
	}

	if (serial_port->completion_function != 0x00)
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d003      	beq.n	80008f6 <SerialOutputString+0x40>
		serial_port->completion_function(counter);
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008f2:	68f8      	ldr	r0, [r7, #12]
 80008f4:	4798      	blx	r3
}
 80008f6:	bf00      	nop
 80008f8:	3710      	adds	r7, #16
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
	...

08000900 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000906:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <HAL_MspInit+0x44>)
 8000908:	699b      	ldr	r3, [r3, #24]
 800090a:	4a0e      	ldr	r2, [pc, #56]	; (8000944 <HAL_MspInit+0x44>)
 800090c:	f043 0301 	orr.w	r3, r3, #1
 8000910:	6193      	str	r3, [r2, #24]
 8000912:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <HAL_MspInit+0x44>)
 8000914:	699b      	ldr	r3, [r3, #24]
 8000916:	f003 0301 	and.w	r3, r3, #1
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800091e:	4b09      	ldr	r3, [pc, #36]	; (8000944 <HAL_MspInit+0x44>)
 8000920:	69db      	ldr	r3, [r3, #28]
 8000922:	4a08      	ldr	r2, [pc, #32]	; (8000944 <HAL_MspInit+0x44>)
 8000924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000928:	61d3      	str	r3, [r2, #28]
 800092a:	4b06      	ldr	r3, [pc, #24]	; (8000944 <HAL_MspInit+0x44>)
 800092c:	69db      	ldr	r3, [r3, #28]
 800092e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000932:	603b      	str	r3, [r7, #0]
 8000934:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000936:	2007      	movs	r0, #7
 8000938:	f000 fabc 	bl	8000eb4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800093c:	bf00      	nop
 800093e:	3708      	adds	r7, #8
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	40021000 	.word	0x40021000

08000948 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b08a      	sub	sp, #40	; 0x28
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000950:	f107 0314 	add.w	r3, r7, #20
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	605a      	str	r2, [r3, #4]
 800095a:	609a      	str	r2, [r3, #8]
 800095c:	60da      	str	r2, [r3, #12]
 800095e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a17      	ldr	r2, [pc, #92]	; (80009c4 <HAL_I2C_MspInit+0x7c>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d127      	bne.n	80009ba <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800096a:	4b17      	ldr	r3, [pc, #92]	; (80009c8 <HAL_I2C_MspInit+0x80>)
 800096c:	695b      	ldr	r3, [r3, #20]
 800096e:	4a16      	ldr	r2, [pc, #88]	; (80009c8 <HAL_I2C_MspInit+0x80>)
 8000970:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000974:	6153      	str	r3, [r2, #20]
 8000976:	4b14      	ldr	r3, [pc, #80]	; (80009c8 <HAL_I2C_MspInit+0x80>)
 8000978:	695b      	ldr	r3, [r3, #20]
 800097a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800097e:	613b      	str	r3, [r7, #16]
 8000980:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000982:	23c0      	movs	r3, #192	; 0xc0
 8000984:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000986:	2312      	movs	r3, #18
 8000988:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800098a:	2301      	movs	r3, #1
 800098c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800098e:	2303      	movs	r3, #3
 8000990:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000992:	2304      	movs	r3, #4
 8000994:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000996:	f107 0314 	add.w	r3, r7, #20
 800099a:	4619      	mov	r1, r3
 800099c:	480b      	ldr	r0, [pc, #44]	; (80009cc <HAL_I2C_MspInit+0x84>)
 800099e:	f000 fabd 	bl	8000f1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009a2:	4b09      	ldr	r3, [pc, #36]	; (80009c8 <HAL_I2C_MspInit+0x80>)
 80009a4:	69db      	ldr	r3, [r3, #28]
 80009a6:	4a08      	ldr	r2, [pc, #32]	; (80009c8 <HAL_I2C_MspInit+0x80>)
 80009a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009ac:	61d3      	str	r3, [r2, #28]
 80009ae:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <HAL_I2C_MspInit+0x80>)
 80009b0:	69db      	ldr	r3, [r3, #28]
 80009b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80009ba:	bf00      	nop
 80009bc:	3728      	adds	r7, #40	; 0x28
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40005400 	.word	0x40005400
 80009c8:	40021000 	.word	0x40021000
 80009cc:	48000400 	.word	0x48000400

080009d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b08a      	sub	sp, #40	; 0x28
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d8:	f107 0314 	add.w	r3, r7, #20
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
 80009e2:	609a      	str	r2, [r3, #8]
 80009e4:	60da      	str	r2, [r3, #12]
 80009e6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a17      	ldr	r2, [pc, #92]	; (8000a4c <HAL_SPI_MspInit+0x7c>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d128      	bne.n	8000a44 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009f2:	4b17      	ldr	r3, [pc, #92]	; (8000a50 <HAL_SPI_MspInit+0x80>)
 80009f4:	699b      	ldr	r3, [r3, #24]
 80009f6:	4a16      	ldr	r2, [pc, #88]	; (8000a50 <HAL_SPI_MspInit+0x80>)
 80009f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009fc:	6193      	str	r3, [r2, #24]
 80009fe:	4b14      	ldr	r3, [pc, #80]	; (8000a50 <HAL_SPI_MspInit+0x80>)
 8000a00:	699b      	ldr	r3, [r3, #24]
 8000a02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a06:	613b      	str	r3, [r7, #16]
 8000a08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0a:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <HAL_SPI_MspInit+0x80>)
 8000a0c:	695b      	ldr	r3, [r3, #20]
 8000a0e:	4a10      	ldr	r2, [pc, #64]	; (8000a50 <HAL_SPI_MspInit+0x80>)
 8000a10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a14:	6153      	str	r3, [r2, #20]
 8000a16:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <HAL_SPI_MspInit+0x80>)
 8000a18:	695b      	ldr	r3, [r3, #20]
 8000a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000a22:	23e0      	movs	r3, #224	; 0xe0
 8000a24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a26:	2302      	movs	r3, #2
 8000a28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a2e:	2303      	movs	r3, #3
 8000a30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a32:	2305      	movs	r3, #5
 8000a34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a36:	f107 0314 	add.w	r3, r7, #20
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a40:	f000 fa6c 	bl	8000f1c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000a44:	bf00      	nop
 8000a46:	3728      	adds	r7, #40	; 0x28
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	40013000 	.word	0x40013000
 8000a50:	40021000 	.word	0x40021000

08000a54 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b08a      	sub	sp, #40	; 0x28
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
 8000a6a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a18      	ldr	r2, [pc, #96]	; (8000ad4 <HAL_PCD_MspInit+0x80>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d129      	bne.n	8000aca <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a76:	4b18      	ldr	r3, [pc, #96]	; (8000ad8 <HAL_PCD_MspInit+0x84>)
 8000a78:	695b      	ldr	r3, [r3, #20]
 8000a7a:	4a17      	ldr	r2, [pc, #92]	; (8000ad8 <HAL_PCD_MspInit+0x84>)
 8000a7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a80:	6153      	str	r3, [r2, #20]
 8000a82:	4b15      	ldr	r3, [pc, #84]	; (8000ad8 <HAL_PCD_MspInit+0x84>)
 8000a84:	695b      	ldr	r3, [r3, #20]
 8000a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a8a:	613b      	str	r3, [r7, #16]
 8000a8c:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8000a8e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000a92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a94:	2302      	movs	r3, #2
 8000a96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a9c:	2303      	movs	r3, #3
 8000a9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000aa0:	230e      	movs	r3, #14
 8000aa2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa4:	f107 0314 	add.w	r3, r7, #20
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aae:	f000 fa35 	bl	8000f1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000ab2:	4b09      	ldr	r3, [pc, #36]	; (8000ad8 <HAL_PCD_MspInit+0x84>)
 8000ab4:	69db      	ldr	r3, [r3, #28]
 8000ab6:	4a08      	ldr	r2, [pc, #32]	; (8000ad8 <HAL_PCD_MspInit+0x84>)
 8000ab8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000abc:	61d3      	str	r3, [r2, #28]
 8000abe:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <HAL_PCD_MspInit+0x84>)
 8000ac0:	69db      	ldr	r3, [r3, #28]
 8000ac2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000ac6:	60fb      	str	r3, [r7, #12]
 8000ac8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000aca:	bf00      	nop
 8000acc:	3728      	adds	r7, #40	; 0x28
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40005c00 	.word	0x40005c00
 8000ad8:	40021000 	.word	0x40021000

08000adc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ae0:	e7fe      	b.n	8000ae0 <NMI_Handler+0x4>

08000ae2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ae6:	e7fe      	b.n	8000ae6 <HardFault_Handler+0x4>

08000ae8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aec:	e7fe      	b.n	8000aec <MemManage_Handler+0x4>

08000aee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aee:	b480      	push	{r7}
 8000af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000af2:	e7fe      	b.n	8000af2 <BusFault_Handler+0x4>

08000af4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af8:	e7fe      	b.n	8000af8 <UsageFault_Handler+0x4>

08000afa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000afa:	b480      	push	{r7}
 8000afc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000afe:	bf00      	nop
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr

08000b08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b0c:	bf00      	nop
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr

08000b16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b16:	b480      	push	{r7}
 8000b18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr

08000b24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b28:	f000 f8ce 	bl	8000cc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b2c:	bf00      	nop
 8000b2e:	bd80      	pop	{r7, pc}

08000b30 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b34:	4802      	ldr	r0, [pc, #8]	; (8000b40 <TIM1_CC_IRQHandler+0x10>)
 8000b36:	f003 f825 	bl	8003b84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	20000168 	.word	0x20000168

08000b44 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b48:	4802      	ldr	r0, [pc, #8]	; (8000b54 <TIM2_IRQHandler+0x10>)
 8000b4a:	f003 f81b 	bl	8003b84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	200001b4 	.word	0x200001b4

08000b58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b60:	4a14      	ldr	r2, [pc, #80]	; (8000bb4 <_sbrk+0x5c>)
 8000b62:	4b15      	ldr	r3, [pc, #84]	; (8000bb8 <_sbrk+0x60>)
 8000b64:	1ad3      	subs	r3, r2, r3
 8000b66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b6c:	4b13      	ldr	r3, [pc, #76]	; (8000bbc <_sbrk+0x64>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d102      	bne.n	8000b7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b74:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <_sbrk+0x64>)
 8000b76:	4a12      	ldr	r2, [pc, #72]	; (8000bc0 <_sbrk+0x68>)
 8000b78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b7a:	4b10      	ldr	r3, [pc, #64]	; (8000bbc <_sbrk+0x64>)
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	4413      	add	r3, r2
 8000b82:	693a      	ldr	r2, [r7, #16]
 8000b84:	429a      	cmp	r2, r3
 8000b86:	d207      	bcs.n	8000b98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b88:	f003 f9f4 	bl	8003f74 <__errno>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	220c      	movs	r2, #12
 8000b90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b92:	f04f 33ff 	mov.w	r3, #4294967295
 8000b96:	e009      	b.n	8000bac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b98:	4b08      	ldr	r3, [pc, #32]	; (8000bbc <_sbrk+0x64>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b9e:	4b07      	ldr	r3, [pc, #28]	; (8000bbc <_sbrk+0x64>)
 8000ba0:	681a      	ldr	r2, [r3, #0]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	4413      	add	r3, r2
 8000ba6:	4a05      	ldr	r2, [pc, #20]	; (8000bbc <_sbrk+0x64>)
 8000ba8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000baa:	68fb      	ldr	r3, [r7, #12]
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	3718      	adds	r7, #24
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	2000a000 	.word	0x2000a000
 8000bb8:	00000400 	.word	0x00000400
 8000bbc:	200004ec 	.word	0x200004ec
 8000bc0:	20000640 	.word	0x20000640

08000bc4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bc8:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <SystemInit+0x20>)
 8000bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bce:	4a05      	ldr	r2, [pc, #20]	; (8000be4 <SystemInit+0x20>)
 8000bd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bd8:	bf00      	nop
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	e000ed00 	.word	0xe000ed00

08000be8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000be8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c20 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bec:	f7ff ffea 	bl	8000bc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bf0:	480c      	ldr	r0, [pc, #48]	; (8000c24 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bf2:	490d      	ldr	r1, [pc, #52]	; (8000c28 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bf4:	4a0d      	ldr	r2, [pc, #52]	; (8000c2c <LoopForever+0xe>)
  movs r3, #0
 8000bf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bf8:	e002      	b.n	8000c00 <LoopCopyDataInit>

08000bfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bfe:	3304      	adds	r3, #4

08000c00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c04:	d3f9      	bcc.n	8000bfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c06:	4a0a      	ldr	r2, [pc, #40]	; (8000c30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c08:	4c0a      	ldr	r4, [pc, #40]	; (8000c34 <LoopForever+0x16>)
  movs r3, #0
 8000c0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c0c:	e001      	b.n	8000c12 <LoopFillZerobss>

08000c0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c10:	3204      	adds	r2, #4

08000c12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c14:	d3fb      	bcc.n	8000c0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c16:	f003 f9b3 	bl	8003f80 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c1a:	f7ff fbb3 	bl	8000384 <main>

08000c1e <LoopForever>:

LoopForever:
    b LoopForever
 8000c1e:	e7fe      	b.n	8000c1e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c20:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000c24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c28:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8000c2c:	08004920 	.word	0x08004920
  ldr r2, =_sbss
 8000c30:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8000c34:	2000063c 	.word	0x2000063c

08000c38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c38:	e7fe      	b.n	8000c38 <ADC1_2_IRQHandler>
	...

08000c3c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c40:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <HAL_Init+0x28>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a07      	ldr	r2, [pc, #28]	; (8000c64 <HAL_Init+0x28>)
 8000c46:	f043 0310 	orr.w	r3, r3, #16
 8000c4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c4c:	2003      	movs	r0, #3
 8000c4e:	f000 f931 	bl	8000eb4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c52:	2000      	movs	r0, #0
 8000c54:	f000 f808 	bl	8000c68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c58:	f7ff fe52 	bl	8000900 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c5c:	2300      	movs	r3, #0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40022000 	.word	0x40022000

08000c68 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c70:	4b12      	ldr	r3, [pc, #72]	; (8000cbc <HAL_InitTick+0x54>)
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	4b12      	ldr	r3, [pc, #72]	; (8000cc0 <HAL_InitTick+0x58>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	4619      	mov	r1, r3
 8000c7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c86:	4618      	mov	r0, r3
 8000c88:	f000 f93b 	bl	8000f02 <HAL_SYSTICK_Config>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c92:	2301      	movs	r3, #1
 8000c94:	e00e      	b.n	8000cb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	2b0f      	cmp	r3, #15
 8000c9a:	d80a      	bhi.n	8000cb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	6879      	ldr	r1, [r7, #4]
 8000ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ca4:	f000 f911 	bl	8000eca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ca8:	4a06      	ldr	r2, [pc, #24]	; (8000cc4 <HAL_InitTick+0x5c>)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	e000      	b.n	8000cb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	20000038 	.word	0x20000038
 8000cc0:	20000040 	.word	0x20000040
 8000cc4:	2000003c 	.word	0x2000003c

08000cc8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ccc:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <HAL_IncTick+0x20>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	4b06      	ldr	r3, [pc, #24]	; (8000cec <HAL_IncTick+0x24>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	4a04      	ldr	r2, [pc, #16]	; (8000cec <HAL_IncTick+0x24>)
 8000cda:	6013      	str	r3, [r2, #0]
}
 8000cdc:	bf00      	nop
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	20000040 	.word	0x20000040
 8000cec:	200004f0 	.word	0x200004f0

08000cf0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  return uwTick;  
 8000cf4:	4b03      	ldr	r3, [pc, #12]	; (8000d04 <HAL_GetTick+0x14>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	200004f0 	.word	0x200004f0

08000d08 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d10:	f7ff ffee 	bl	8000cf0 <HAL_GetTick>
 8000d14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d20:	d005      	beq.n	8000d2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d22:	4b0a      	ldr	r3, [pc, #40]	; (8000d4c <HAL_Delay+0x44>)
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	461a      	mov	r2, r3
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	4413      	add	r3, r2
 8000d2c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000d2e:	bf00      	nop
 8000d30:	f7ff ffde 	bl	8000cf0 <HAL_GetTick>
 8000d34:	4602      	mov	r2, r0
 8000d36:	68bb      	ldr	r3, [r7, #8]
 8000d38:	1ad3      	subs	r3, r2, r3
 8000d3a:	68fa      	ldr	r2, [r7, #12]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	d8f7      	bhi.n	8000d30 <HAL_Delay+0x28>
  {
  }
}
 8000d40:	bf00      	nop
 8000d42:	bf00      	nop
 8000d44:	3710      	adds	r7, #16
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	20000040 	.word	0x20000040

08000d50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	f003 0307 	and.w	r3, r3, #7
 8000d5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d60:	4b0c      	ldr	r3, [pc, #48]	; (8000d94 <__NVIC_SetPriorityGrouping+0x44>)
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d66:	68ba      	ldr	r2, [r7, #8]
 8000d68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d82:	4a04      	ldr	r2, [pc, #16]	; (8000d94 <__NVIC_SetPriorityGrouping+0x44>)
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	60d3      	str	r3, [r2, #12]
}
 8000d88:	bf00      	nop
 8000d8a:	3714      	adds	r7, #20
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	e000ed00 	.word	0xe000ed00

08000d98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d9c:	4b04      	ldr	r3, [pc, #16]	; (8000db0 <__NVIC_GetPriorityGrouping+0x18>)
 8000d9e:	68db      	ldr	r3, [r3, #12]
 8000da0:	0a1b      	lsrs	r3, r3, #8
 8000da2:	f003 0307 	and.w	r3, r3, #7
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	6039      	str	r1, [r7, #0]
 8000dbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	db0a      	blt.n	8000dde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	b2da      	uxtb	r2, r3
 8000dcc:	490c      	ldr	r1, [pc, #48]	; (8000e00 <__NVIC_SetPriority+0x4c>)
 8000dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd2:	0112      	lsls	r2, r2, #4
 8000dd4:	b2d2      	uxtb	r2, r2
 8000dd6:	440b      	add	r3, r1
 8000dd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ddc:	e00a      	b.n	8000df4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	b2da      	uxtb	r2, r3
 8000de2:	4908      	ldr	r1, [pc, #32]	; (8000e04 <__NVIC_SetPriority+0x50>)
 8000de4:	79fb      	ldrb	r3, [r7, #7]
 8000de6:	f003 030f 	and.w	r3, r3, #15
 8000dea:	3b04      	subs	r3, #4
 8000dec:	0112      	lsls	r2, r2, #4
 8000dee:	b2d2      	uxtb	r2, r2
 8000df0:	440b      	add	r3, r1
 8000df2:	761a      	strb	r2, [r3, #24]
}
 8000df4:	bf00      	nop
 8000df6:	370c      	adds	r7, #12
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	e000e100 	.word	0xe000e100
 8000e04:	e000ed00 	.word	0xe000ed00

08000e08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b089      	sub	sp, #36	; 0x24
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	60f8      	str	r0, [r7, #12]
 8000e10:	60b9      	str	r1, [r7, #8]
 8000e12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	f003 0307 	and.w	r3, r3, #7
 8000e1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e1c:	69fb      	ldr	r3, [r7, #28]
 8000e1e:	f1c3 0307 	rsb	r3, r3, #7
 8000e22:	2b04      	cmp	r3, #4
 8000e24:	bf28      	it	cs
 8000e26:	2304      	movcs	r3, #4
 8000e28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	3304      	adds	r3, #4
 8000e2e:	2b06      	cmp	r3, #6
 8000e30:	d902      	bls.n	8000e38 <NVIC_EncodePriority+0x30>
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	3b03      	subs	r3, #3
 8000e36:	e000      	b.n	8000e3a <NVIC_EncodePriority+0x32>
 8000e38:	2300      	movs	r3, #0
 8000e3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e40:	69bb      	ldr	r3, [r7, #24]
 8000e42:	fa02 f303 	lsl.w	r3, r2, r3
 8000e46:	43da      	mvns	r2, r3
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	401a      	ands	r2, r3
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e50:	f04f 31ff 	mov.w	r1, #4294967295
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	fa01 f303 	lsl.w	r3, r1, r3
 8000e5a:	43d9      	mvns	r1, r3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e60:	4313      	orrs	r3, r2
         );
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3724      	adds	r7, #36	; 0x24
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
	...

08000e70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	3b01      	subs	r3, #1
 8000e7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e80:	d301      	bcc.n	8000e86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e82:	2301      	movs	r3, #1
 8000e84:	e00f      	b.n	8000ea6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e86:	4a0a      	ldr	r2, [pc, #40]	; (8000eb0 <SysTick_Config+0x40>)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	3b01      	subs	r3, #1
 8000e8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e8e:	210f      	movs	r1, #15
 8000e90:	f04f 30ff 	mov.w	r0, #4294967295
 8000e94:	f7ff ff8e 	bl	8000db4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e98:	4b05      	ldr	r3, [pc, #20]	; (8000eb0 <SysTick_Config+0x40>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e9e:	4b04      	ldr	r3, [pc, #16]	; (8000eb0 <SysTick_Config+0x40>)
 8000ea0:	2207      	movs	r2, #7
 8000ea2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ea4:	2300      	movs	r3, #0
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	e000e010 	.word	0xe000e010

08000eb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	f7ff ff47 	bl	8000d50 <__NVIC_SetPriorityGrouping>
}
 8000ec2:	bf00      	nop
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b086      	sub	sp, #24
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	60b9      	str	r1, [r7, #8]
 8000ed4:	607a      	str	r2, [r7, #4]
 8000ed6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000edc:	f7ff ff5c 	bl	8000d98 <__NVIC_GetPriorityGrouping>
 8000ee0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ee2:	687a      	ldr	r2, [r7, #4]
 8000ee4:	68b9      	ldr	r1, [r7, #8]
 8000ee6:	6978      	ldr	r0, [r7, #20]
 8000ee8:	f7ff ff8e 	bl	8000e08 <NVIC_EncodePriority>
 8000eec:	4602      	mov	r2, r0
 8000eee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ef2:	4611      	mov	r1, r2
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff ff5d 	bl	8000db4 <__NVIC_SetPriority>
}
 8000efa:	bf00      	nop
 8000efc:	3718      	adds	r7, #24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b082      	sub	sp, #8
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f7ff ffb0 	bl	8000e70 <SysTick_Config>
 8000f10:	4603      	mov	r3, r0
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
	...

08000f1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b087      	sub	sp, #28
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f26:	2300      	movs	r3, #0
 8000f28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f2a:	e154      	b.n	80011d6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	2101      	movs	r1, #1
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	fa01 f303 	lsl.w	r3, r1, r3
 8000f38:	4013      	ands	r3, r2
 8000f3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	f000 8146 	beq.w	80011d0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f003 0303 	and.w	r3, r3, #3
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d005      	beq.n	8000f5c <HAL_GPIO_Init+0x40>
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f003 0303 	and.w	r3, r3, #3
 8000f58:	2b02      	cmp	r3, #2
 8000f5a:	d130      	bne.n	8000fbe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	689b      	ldr	r3, [r3, #8]
 8000f60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	2203      	movs	r2, #3
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	4013      	ands	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	68da      	ldr	r2, [r3, #12]
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	693a      	ldr	r2, [r7, #16]
 8000f82:	4313      	orrs	r3, r2
 8000f84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	693a      	ldr	r2, [r7, #16]
 8000f8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f92:	2201      	movs	r2, #1
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	43db      	mvns	r3, r3
 8000f9c:	693a      	ldr	r2, [r7, #16]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	091b      	lsrs	r3, r3, #4
 8000fa8:	f003 0201 	and.w	r2, r3, #1
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f003 0303 	and.w	r3, r3, #3
 8000fc6:	2b03      	cmp	r3, #3
 8000fc8:	d017      	beq.n	8000ffa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	68db      	ldr	r3, [r3, #12]
 8000fce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	2203      	movs	r2, #3
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	43db      	mvns	r3, r3
 8000fdc:	693a      	ldr	r2, [r7, #16]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	689a      	ldr	r2, [r3, #8]
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	f003 0303 	and.w	r3, r3, #3
 8001002:	2b02      	cmp	r3, #2
 8001004:	d123      	bne.n	800104e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	08da      	lsrs	r2, r3, #3
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	3208      	adds	r2, #8
 800100e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001012:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	f003 0307 	and.w	r3, r3, #7
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	220f      	movs	r2, #15
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	43db      	mvns	r3, r3
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	4013      	ands	r3, r2
 8001028:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	691a      	ldr	r2, [r3, #16]
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	f003 0307 	and.w	r3, r3, #7
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	4313      	orrs	r3, r2
 800103e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	08da      	lsrs	r2, r3, #3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	3208      	adds	r2, #8
 8001048:	6939      	ldr	r1, [r7, #16]
 800104a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	2203      	movs	r2, #3
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	43db      	mvns	r3, r3
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	4013      	ands	r3, r2
 8001064:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f003 0203 	and.w	r2, r3, #3
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	fa02 f303 	lsl.w	r3, r2, r3
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	4313      	orrs	r3, r2
 800107a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800108a:	2b00      	cmp	r3, #0
 800108c:	f000 80a0 	beq.w	80011d0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001090:	4b58      	ldr	r3, [pc, #352]	; (80011f4 <HAL_GPIO_Init+0x2d8>)
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	4a57      	ldr	r2, [pc, #348]	; (80011f4 <HAL_GPIO_Init+0x2d8>)
 8001096:	f043 0301 	orr.w	r3, r3, #1
 800109a:	6193      	str	r3, [r2, #24]
 800109c:	4b55      	ldr	r3, [pc, #340]	; (80011f4 <HAL_GPIO_Init+0x2d8>)
 800109e:	699b      	ldr	r3, [r3, #24]
 80010a0:	f003 0301 	and.w	r3, r3, #1
 80010a4:	60bb      	str	r3, [r7, #8]
 80010a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010a8:	4a53      	ldr	r2, [pc, #332]	; (80011f8 <HAL_GPIO_Init+0x2dc>)
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	089b      	lsrs	r3, r3, #2
 80010ae:	3302      	adds	r3, #2
 80010b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	f003 0303 	and.w	r3, r3, #3
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	220f      	movs	r2, #15
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	43db      	mvns	r3, r3
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	4013      	ands	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80010d2:	d019      	beq.n	8001108 <HAL_GPIO_Init+0x1ec>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	4a49      	ldr	r2, [pc, #292]	; (80011fc <HAL_GPIO_Init+0x2e0>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d013      	beq.n	8001104 <HAL_GPIO_Init+0x1e8>
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	4a48      	ldr	r2, [pc, #288]	; (8001200 <HAL_GPIO_Init+0x2e4>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d00d      	beq.n	8001100 <HAL_GPIO_Init+0x1e4>
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	4a47      	ldr	r2, [pc, #284]	; (8001204 <HAL_GPIO_Init+0x2e8>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d007      	beq.n	80010fc <HAL_GPIO_Init+0x1e0>
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	4a46      	ldr	r2, [pc, #280]	; (8001208 <HAL_GPIO_Init+0x2ec>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d101      	bne.n	80010f8 <HAL_GPIO_Init+0x1dc>
 80010f4:	2304      	movs	r3, #4
 80010f6:	e008      	b.n	800110a <HAL_GPIO_Init+0x1ee>
 80010f8:	2305      	movs	r3, #5
 80010fa:	e006      	b.n	800110a <HAL_GPIO_Init+0x1ee>
 80010fc:	2303      	movs	r3, #3
 80010fe:	e004      	b.n	800110a <HAL_GPIO_Init+0x1ee>
 8001100:	2302      	movs	r3, #2
 8001102:	e002      	b.n	800110a <HAL_GPIO_Init+0x1ee>
 8001104:	2301      	movs	r3, #1
 8001106:	e000      	b.n	800110a <HAL_GPIO_Init+0x1ee>
 8001108:	2300      	movs	r3, #0
 800110a:	697a      	ldr	r2, [r7, #20]
 800110c:	f002 0203 	and.w	r2, r2, #3
 8001110:	0092      	lsls	r2, r2, #2
 8001112:	4093      	lsls	r3, r2
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	4313      	orrs	r3, r2
 8001118:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800111a:	4937      	ldr	r1, [pc, #220]	; (80011f8 <HAL_GPIO_Init+0x2dc>)
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	089b      	lsrs	r3, r3, #2
 8001120:	3302      	adds	r3, #2
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001128:	4b38      	ldr	r3, [pc, #224]	; (800120c <HAL_GPIO_Init+0x2f0>)
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	43db      	mvns	r3, r3
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	4013      	ands	r3, r2
 8001136:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001140:	2b00      	cmp	r3, #0
 8001142:	d003      	beq.n	800114c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001144:	693a      	ldr	r2, [r7, #16]
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	4313      	orrs	r3, r2
 800114a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800114c:	4a2f      	ldr	r2, [pc, #188]	; (800120c <HAL_GPIO_Init+0x2f0>)
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001152:	4b2e      	ldr	r3, [pc, #184]	; (800120c <HAL_GPIO_Init+0x2f0>)
 8001154:	68db      	ldr	r3, [r3, #12]
 8001156:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	43db      	mvns	r3, r3
 800115c:	693a      	ldr	r2, [r7, #16]
 800115e:	4013      	ands	r3, r2
 8001160:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800116a:	2b00      	cmp	r3, #0
 800116c:	d003      	beq.n	8001176 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	4313      	orrs	r3, r2
 8001174:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001176:	4a25      	ldr	r2, [pc, #148]	; (800120c <HAL_GPIO_Init+0x2f0>)
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800117c:	4b23      	ldr	r3, [pc, #140]	; (800120c <HAL_GPIO_Init+0x2f0>)
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	43db      	mvns	r3, r3
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	4013      	ands	r3, r2
 800118a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001194:	2b00      	cmp	r3, #0
 8001196:	d003      	beq.n	80011a0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001198:	693a      	ldr	r2, [r7, #16]
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	4313      	orrs	r3, r2
 800119e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80011a0:	4a1a      	ldr	r2, [pc, #104]	; (800120c <HAL_GPIO_Init+0x2f0>)
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011a6:	4b19      	ldr	r3, [pc, #100]	; (800120c <HAL_GPIO_Init+0x2f0>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	43db      	mvns	r3, r3
 80011b0:	693a      	ldr	r2, [r7, #16]
 80011b2:	4013      	ands	r3, r2
 80011b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d003      	beq.n	80011ca <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80011ca:	4a10      	ldr	r2, [pc, #64]	; (800120c <HAL_GPIO_Init+0x2f0>)
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	3301      	adds	r3, #1
 80011d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	fa22 f303 	lsr.w	r3, r2, r3
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	f47f aea3 	bne.w	8000f2c <HAL_GPIO_Init+0x10>
  }
}
 80011e6:	bf00      	nop
 80011e8:	bf00      	nop
 80011ea:	371c      	adds	r7, #28
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	40021000 	.word	0x40021000
 80011f8:	40010000 	.word	0x40010000
 80011fc:	48000400 	.word	0x48000400
 8001200:	48000800 	.word	0x48000800
 8001204:	48000c00 	.word	0x48000c00
 8001208:	48001000 	.word	0x48001000
 800120c:	40010400 	.word	0x40010400

08001210 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	460b      	mov	r3, r1
 800121a:	807b      	strh	r3, [r7, #2]
 800121c:	4613      	mov	r3, r2
 800121e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001220:	787b      	ldrb	r3, [r7, #1]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d003      	beq.n	800122e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001226:	887a      	ldrh	r2, [r7, #2]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800122c:	e002      	b.n	8001234 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800122e:	887a      	ldrh	r2, [r7, #2]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001234:	bf00      	nop
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d101      	bne.n	8001252 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e081      	b.n	8001356 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001258:	b2db      	uxtb	r3, r3
 800125a:	2b00      	cmp	r3, #0
 800125c:	d106      	bne.n	800126c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2200      	movs	r2, #0
 8001262:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f7ff fb6e 	bl	8000948 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2224      	movs	r2, #36	; 0x24
 8001270:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f022 0201 	bic.w	r2, r2, #1
 8001282:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	685a      	ldr	r2, [r3, #4]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001290:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	689a      	ldr	r2, [r3, #8]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80012a0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	68db      	ldr	r3, [r3, #12]
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d107      	bne.n	80012ba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	689a      	ldr	r2, [r3, #8]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	e006      	b.n	80012c8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	689a      	ldr	r2, [r3, #8]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80012c6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d104      	bne.n	80012da <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012d8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	687a      	ldr	r2, [r7, #4]
 80012e2:	6812      	ldr	r2, [r2, #0]
 80012e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012ec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	68da      	ldr	r2, [r3, #12]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80012fc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	691a      	ldr	r2, [r3, #16]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	695b      	ldr	r3, [r3, #20]
 8001306:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	699b      	ldr	r3, [r3, #24]
 800130e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	430a      	orrs	r2, r1
 8001316:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	69d9      	ldr	r1, [r3, #28]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6a1a      	ldr	r2, [r3, #32]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	430a      	orrs	r2, r1
 8001326:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f042 0201 	orr.w	r2, r2, #1
 8001336:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2200      	movs	r2, #0
 800133c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2220      	movs	r2, #32
 8001342:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2200      	movs	r2, #0
 800134a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2200      	movs	r2, #0
 8001350:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001354:	2300      	movs	r3, #0
}
 8001356:	4618      	mov	r0, r3
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
	...

08001360 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b088      	sub	sp, #32
 8001364:	af02      	add	r7, sp, #8
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	4608      	mov	r0, r1
 800136a:	4611      	mov	r1, r2
 800136c:	461a      	mov	r2, r3
 800136e:	4603      	mov	r3, r0
 8001370:	817b      	strh	r3, [r7, #10]
 8001372:	460b      	mov	r3, r1
 8001374:	813b      	strh	r3, [r7, #8]
 8001376:	4613      	mov	r3, r2
 8001378:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001380:	b2db      	uxtb	r3, r3
 8001382:	2b20      	cmp	r3, #32
 8001384:	f040 80f9 	bne.w	800157a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001388:	6a3b      	ldr	r3, [r7, #32]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d002      	beq.n	8001394 <HAL_I2C_Mem_Write+0x34>
 800138e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001390:	2b00      	cmp	r3, #0
 8001392:	d105      	bne.n	80013a0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	f44f 7200 	mov.w	r2, #512	; 0x200
 800139a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	e0ed      	b.n	800157c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d101      	bne.n	80013ae <HAL_I2C_Mem_Write+0x4e>
 80013aa:	2302      	movs	r3, #2
 80013ac:	e0e6      	b.n	800157c <HAL_I2C_Mem_Write+0x21c>
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	2201      	movs	r2, #1
 80013b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80013b6:	f7ff fc9b 	bl	8000cf0 <HAL_GetTick>
 80013ba:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	9300      	str	r3, [sp, #0]
 80013c0:	2319      	movs	r3, #25
 80013c2:	2201      	movs	r2, #1
 80013c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013c8:	68f8      	ldr	r0, [r7, #12]
 80013ca:	f000 fac3 	bl	8001954 <I2C_WaitOnFlagUntilTimeout>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	e0d1      	b.n	800157c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	2221      	movs	r2, #33	; 0x21
 80013dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	2240      	movs	r2, #64	; 0x40
 80013e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	2200      	movs	r2, #0
 80013ec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	6a3a      	ldr	r2, [r7, #32]
 80013f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80013f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	2200      	movs	r2, #0
 80013fe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001400:	88f8      	ldrh	r0, [r7, #6]
 8001402:	893a      	ldrh	r2, [r7, #8]
 8001404:	8979      	ldrh	r1, [r7, #10]
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	9301      	str	r3, [sp, #4]
 800140a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800140c:	9300      	str	r3, [sp, #0]
 800140e:	4603      	mov	r3, r0
 8001410:	68f8      	ldr	r0, [r7, #12]
 8001412:	f000 f9d3 	bl	80017bc <I2C_RequestMemoryWrite>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d005      	beq.n	8001428 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	2200      	movs	r2, #0
 8001420:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001424:	2301      	movs	r3, #1
 8001426:	e0a9      	b.n	800157c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800142c:	b29b      	uxth	r3, r3
 800142e:	2bff      	cmp	r3, #255	; 0xff
 8001430:	d90e      	bls.n	8001450 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	22ff      	movs	r2, #255	; 0xff
 8001436:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800143c:	b2da      	uxtb	r2, r3
 800143e:	8979      	ldrh	r1, [r7, #10]
 8001440:	2300      	movs	r3, #0
 8001442:	9300      	str	r3, [sp, #0]
 8001444:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001448:	68f8      	ldr	r0, [r7, #12]
 800144a:	f000 fc3d 	bl	8001cc8 <I2C_TransferConfig>
 800144e:	e00f      	b.n	8001470 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001454:	b29a      	uxth	r2, r3
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800145e:	b2da      	uxtb	r2, r3
 8001460:	8979      	ldrh	r1, [r7, #10]
 8001462:	2300      	movs	r3, #0
 8001464:	9300      	str	r3, [sp, #0]
 8001466:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800146a:	68f8      	ldr	r0, [r7, #12]
 800146c:	f000 fc2c 	bl	8001cc8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001470:	697a      	ldr	r2, [r7, #20]
 8001472:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001474:	68f8      	ldr	r0, [r7, #12]
 8001476:	f000 fabc 	bl	80019f2 <I2C_WaitOnTXISFlagUntilTimeout>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	e07b      	b.n	800157c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001488:	781a      	ldrb	r2, [r3, #0]
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001494:	1c5a      	adds	r2, r3, #1
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800149e:	b29b      	uxth	r3, r3
 80014a0:	3b01      	subs	r3, #1
 80014a2:	b29a      	uxth	r2, r3
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014ac:	3b01      	subs	r3, #1
 80014ae:	b29a      	uxth	r2, r3
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d034      	beq.n	8001528 <HAL_I2C_Mem_Write+0x1c8>
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d130      	bne.n	8001528 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	9300      	str	r3, [sp, #0]
 80014ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014cc:	2200      	movs	r2, #0
 80014ce:	2180      	movs	r1, #128	; 0x80
 80014d0:	68f8      	ldr	r0, [r7, #12]
 80014d2:	f000 fa3f 	bl	8001954 <I2C_WaitOnFlagUntilTimeout>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e04d      	b.n	800157c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014e4:	b29b      	uxth	r3, r3
 80014e6:	2bff      	cmp	r3, #255	; 0xff
 80014e8:	d90e      	bls.n	8001508 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	22ff      	movs	r2, #255	; 0xff
 80014ee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014f4:	b2da      	uxtb	r2, r3
 80014f6:	8979      	ldrh	r1, [r7, #10]
 80014f8:	2300      	movs	r3, #0
 80014fa:	9300      	str	r3, [sp, #0]
 80014fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001500:	68f8      	ldr	r0, [r7, #12]
 8001502:	f000 fbe1 	bl	8001cc8 <I2C_TransferConfig>
 8001506:	e00f      	b.n	8001528 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800150c:	b29a      	uxth	r2, r3
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001516:	b2da      	uxtb	r2, r3
 8001518:	8979      	ldrh	r1, [r7, #10]
 800151a:	2300      	movs	r3, #0
 800151c:	9300      	str	r3, [sp, #0]
 800151e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001522:	68f8      	ldr	r0, [r7, #12]
 8001524:	f000 fbd0 	bl	8001cc8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800152c:	b29b      	uxth	r3, r3
 800152e:	2b00      	cmp	r3, #0
 8001530:	d19e      	bne.n	8001470 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001532:	697a      	ldr	r2, [r7, #20]
 8001534:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001536:	68f8      	ldr	r0, [r7, #12]
 8001538:	f000 faa2 	bl	8001a80 <I2C_WaitOnSTOPFlagUntilTimeout>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e01a      	b.n	800157c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	2220      	movs	r2, #32
 800154c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	6859      	ldr	r1, [r3, #4]
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	4b0a      	ldr	r3, [pc, #40]	; (8001584 <HAL_I2C_Mem_Write+0x224>)
 800155a:	400b      	ands	r3, r1
 800155c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	2220      	movs	r2, #32
 8001562:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	2200      	movs	r2, #0
 800156a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	2200      	movs	r2, #0
 8001572:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001576:	2300      	movs	r3, #0
 8001578:	e000      	b.n	800157c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800157a:	2302      	movs	r3, #2
  }
}
 800157c:	4618      	mov	r0, r3
 800157e:	3718      	adds	r7, #24
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	fe00e800 	.word	0xfe00e800

08001588 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b088      	sub	sp, #32
 800158c:	af02      	add	r7, sp, #8
 800158e:	60f8      	str	r0, [r7, #12]
 8001590:	4608      	mov	r0, r1
 8001592:	4611      	mov	r1, r2
 8001594:	461a      	mov	r2, r3
 8001596:	4603      	mov	r3, r0
 8001598:	817b      	strh	r3, [r7, #10]
 800159a:	460b      	mov	r3, r1
 800159c:	813b      	strh	r3, [r7, #8]
 800159e:	4613      	mov	r3, r2
 80015a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	2b20      	cmp	r3, #32
 80015ac:	f040 80fd 	bne.w	80017aa <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80015b0:	6a3b      	ldr	r3, [r7, #32]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d002      	beq.n	80015bc <HAL_I2C_Mem_Read+0x34>
 80015b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d105      	bne.n	80015c8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015c2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e0f1      	b.n	80017ac <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d101      	bne.n	80015d6 <HAL_I2C_Mem_Read+0x4e>
 80015d2:	2302      	movs	r3, #2
 80015d4:	e0ea      	b.n	80017ac <HAL_I2C_Mem_Read+0x224>
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	2201      	movs	r2, #1
 80015da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80015de:	f7ff fb87 	bl	8000cf0 <HAL_GetTick>
 80015e2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	9300      	str	r3, [sp, #0]
 80015e8:	2319      	movs	r3, #25
 80015ea:	2201      	movs	r2, #1
 80015ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015f0:	68f8      	ldr	r0, [r7, #12]
 80015f2:	f000 f9af 	bl	8001954 <I2C_WaitOnFlagUntilTimeout>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e0d5      	b.n	80017ac <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	2222      	movs	r2, #34	; 0x22
 8001604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	2240      	movs	r2, #64	; 0x40
 800160c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	2200      	movs	r2, #0
 8001614:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	6a3a      	ldr	r2, [r7, #32]
 800161a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001620:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	2200      	movs	r2, #0
 8001626:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001628:	88f8      	ldrh	r0, [r7, #6]
 800162a:	893a      	ldrh	r2, [r7, #8]
 800162c:	8979      	ldrh	r1, [r7, #10]
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	9301      	str	r3, [sp, #4]
 8001632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001634:	9300      	str	r3, [sp, #0]
 8001636:	4603      	mov	r3, r0
 8001638:	68f8      	ldr	r0, [r7, #12]
 800163a:	f000 f913 	bl	8001864 <I2C_RequestMemoryRead>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d005      	beq.n	8001650 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	2200      	movs	r2, #0
 8001648:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e0ad      	b.n	80017ac <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001654:	b29b      	uxth	r3, r3
 8001656:	2bff      	cmp	r3, #255	; 0xff
 8001658:	d90e      	bls.n	8001678 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	22ff      	movs	r2, #255	; 0xff
 800165e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001664:	b2da      	uxtb	r2, r3
 8001666:	8979      	ldrh	r1, [r7, #10]
 8001668:	4b52      	ldr	r3, [pc, #328]	; (80017b4 <HAL_I2C_Mem_Read+0x22c>)
 800166a:	9300      	str	r3, [sp, #0]
 800166c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001670:	68f8      	ldr	r0, [r7, #12]
 8001672:	f000 fb29 	bl	8001cc8 <I2C_TransferConfig>
 8001676:	e00f      	b.n	8001698 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800167c:	b29a      	uxth	r2, r3
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001686:	b2da      	uxtb	r2, r3
 8001688:	8979      	ldrh	r1, [r7, #10]
 800168a:	4b4a      	ldr	r3, [pc, #296]	; (80017b4 <HAL_I2C_Mem_Read+0x22c>)
 800168c:	9300      	str	r3, [sp, #0]
 800168e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001692:	68f8      	ldr	r0, [r7, #12]
 8001694:	f000 fb18 	bl	8001cc8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	9300      	str	r3, [sp, #0]
 800169c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800169e:	2200      	movs	r2, #0
 80016a0:	2104      	movs	r1, #4
 80016a2:	68f8      	ldr	r0, [r7, #12]
 80016a4:	f000 f956 	bl	8001954 <I2C_WaitOnFlagUntilTimeout>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e07c      	b.n	80017ac <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016bc:	b2d2      	uxtb	r2, r2
 80016be:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c4:	1c5a      	adds	r2, r3, #1
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016ce:	3b01      	subs	r3, #1
 80016d0:	b29a      	uxth	r2, r3
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016da:	b29b      	uxth	r3, r3
 80016dc:	3b01      	subs	r3, #1
 80016de:	b29a      	uxth	r2, r3
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016e8:	b29b      	uxth	r3, r3
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d034      	beq.n	8001758 <HAL_I2C_Mem_Read+0x1d0>
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d130      	bne.n	8001758 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	9300      	str	r3, [sp, #0]
 80016fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016fc:	2200      	movs	r2, #0
 80016fe:	2180      	movs	r1, #128	; 0x80
 8001700:	68f8      	ldr	r0, [r7, #12]
 8001702:	f000 f927 	bl	8001954 <I2C_WaitOnFlagUntilTimeout>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	e04d      	b.n	80017ac <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001714:	b29b      	uxth	r3, r3
 8001716:	2bff      	cmp	r3, #255	; 0xff
 8001718:	d90e      	bls.n	8001738 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	22ff      	movs	r2, #255	; 0xff
 800171e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001724:	b2da      	uxtb	r2, r3
 8001726:	8979      	ldrh	r1, [r7, #10]
 8001728:	2300      	movs	r3, #0
 800172a:	9300      	str	r3, [sp, #0]
 800172c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001730:	68f8      	ldr	r0, [r7, #12]
 8001732:	f000 fac9 	bl	8001cc8 <I2C_TransferConfig>
 8001736:	e00f      	b.n	8001758 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800173c:	b29a      	uxth	r2, r3
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001746:	b2da      	uxtb	r2, r3
 8001748:	8979      	ldrh	r1, [r7, #10]
 800174a:	2300      	movs	r3, #0
 800174c:	9300      	str	r3, [sp, #0]
 800174e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001752:	68f8      	ldr	r0, [r7, #12]
 8001754:	f000 fab8 	bl	8001cc8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800175c:	b29b      	uxth	r3, r3
 800175e:	2b00      	cmp	r3, #0
 8001760:	d19a      	bne.n	8001698 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001762:	697a      	ldr	r2, [r7, #20]
 8001764:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001766:	68f8      	ldr	r0, [r7, #12]
 8001768:	f000 f98a 	bl	8001a80 <I2C_WaitOnSTOPFlagUntilTimeout>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e01a      	b.n	80017ac <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2220      	movs	r2, #32
 800177c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	6859      	ldr	r1, [r3, #4]
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	4b0b      	ldr	r3, [pc, #44]	; (80017b8 <HAL_I2C_Mem_Read+0x230>)
 800178a:	400b      	ands	r3, r1
 800178c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	2220      	movs	r2, #32
 8001792:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	2200      	movs	r2, #0
 800179a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	2200      	movs	r2, #0
 80017a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80017a6:	2300      	movs	r3, #0
 80017a8:	e000      	b.n	80017ac <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80017aa:	2302      	movs	r3, #2
  }
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3718      	adds	r7, #24
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	80002400 	.word	0x80002400
 80017b8:	fe00e800 	.word	0xfe00e800

080017bc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b086      	sub	sp, #24
 80017c0:	af02      	add	r7, sp, #8
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	4608      	mov	r0, r1
 80017c6:	4611      	mov	r1, r2
 80017c8:	461a      	mov	r2, r3
 80017ca:	4603      	mov	r3, r0
 80017cc:	817b      	strh	r3, [r7, #10]
 80017ce:	460b      	mov	r3, r1
 80017d0:	813b      	strh	r3, [r7, #8]
 80017d2:	4613      	mov	r3, r2
 80017d4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80017d6:	88fb      	ldrh	r3, [r7, #6]
 80017d8:	b2da      	uxtb	r2, r3
 80017da:	8979      	ldrh	r1, [r7, #10]
 80017dc:	4b20      	ldr	r3, [pc, #128]	; (8001860 <I2C_RequestMemoryWrite+0xa4>)
 80017de:	9300      	str	r3, [sp, #0]
 80017e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017e4:	68f8      	ldr	r0, [r7, #12]
 80017e6:	f000 fa6f 	bl	8001cc8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80017ea:	69fa      	ldr	r2, [r7, #28]
 80017ec:	69b9      	ldr	r1, [r7, #24]
 80017ee:	68f8      	ldr	r0, [r7, #12]
 80017f0:	f000 f8ff 	bl	80019f2 <I2C_WaitOnTXISFlagUntilTimeout>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e02c      	b.n	8001858 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80017fe:	88fb      	ldrh	r3, [r7, #6]
 8001800:	2b01      	cmp	r3, #1
 8001802:	d105      	bne.n	8001810 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001804:	893b      	ldrh	r3, [r7, #8]
 8001806:	b2da      	uxtb	r2, r3
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	629a      	str	r2, [r3, #40]	; 0x28
 800180e:	e015      	b.n	800183c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001810:	893b      	ldrh	r3, [r7, #8]
 8001812:	0a1b      	lsrs	r3, r3, #8
 8001814:	b29b      	uxth	r3, r3
 8001816:	b2da      	uxtb	r2, r3
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800181e:	69fa      	ldr	r2, [r7, #28]
 8001820:	69b9      	ldr	r1, [r7, #24]
 8001822:	68f8      	ldr	r0, [r7, #12]
 8001824:	f000 f8e5 	bl	80019f2 <I2C_WaitOnTXISFlagUntilTimeout>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e012      	b.n	8001858 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001832:	893b      	ldrh	r3, [r7, #8]
 8001834:	b2da      	uxtb	r2, r3
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	9300      	str	r3, [sp, #0]
 8001840:	69bb      	ldr	r3, [r7, #24]
 8001842:	2200      	movs	r2, #0
 8001844:	2180      	movs	r1, #128	; 0x80
 8001846:	68f8      	ldr	r0, [r7, #12]
 8001848:	f000 f884 	bl	8001954 <I2C_WaitOnFlagUntilTimeout>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e000      	b.n	8001858 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001856:	2300      	movs	r3, #0
}
 8001858:	4618      	mov	r0, r3
 800185a:	3710      	adds	r7, #16
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	80002000 	.word	0x80002000

08001864 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	af02      	add	r7, sp, #8
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	4608      	mov	r0, r1
 800186e:	4611      	mov	r1, r2
 8001870:	461a      	mov	r2, r3
 8001872:	4603      	mov	r3, r0
 8001874:	817b      	strh	r3, [r7, #10]
 8001876:	460b      	mov	r3, r1
 8001878:	813b      	strh	r3, [r7, #8]
 800187a:	4613      	mov	r3, r2
 800187c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800187e:	88fb      	ldrh	r3, [r7, #6]
 8001880:	b2da      	uxtb	r2, r3
 8001882:	8979      	ldrh	r1, [r7, #10]
 8001884:	4b20      	ldr	r3, [pc, #128]	; (8001908 <I2C_RequestMemoryRead+0xa4>)
 8001886:	9300      	str	r3, [sp, #0]
 8001888:	2300      	movs	r3, #0
 800188a:	68f8      	ldr	r0, [r7, #12]
 800188c:	f000 fa1c 	bl	8001cc8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001890:	69fa      	ldr	r2, [r7, #28]
 8001892:	69b9      	ldr	r1, [r7, #24]
 8001894:	68f8      	ldr	r0, [r7, #12]
 8001896:	f000 f8ac 	bl	80019f2 <I2C_WaitOnTXISFlagUntilTimeout>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e02c      	b.n	80018fe <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80018a4:	88fb      	ldrh	r3, [r7, #6]
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d105      	bne.n	80018b6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80018aa:	893b      	ldrh	r3, [r7, #8]
 80018ac:	b2da      	uxtb	r2, r3
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	629a      	str	r2, [r3, #40]	; 0x28
 80018b4:	e015      	b.n	80018e2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80018b6:	893b      	ldrh	r3, [r7, #8]
 80018b8:	0a1b      	lsrs	r3, r3, #8
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	b2da      	uxtb	r2, r3
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80018c4:	69fa      	ldr	r2, [r7, #28]
 80018c6:	69b9      	ldr	r1, [r7, #24]
 80018c8:	68f8      	ldr	r0, [r7, #12]
 80018ca:	f000 f892 	bl	80019f2 <I2C_WaitOnTXISFlagUntilTimeout>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e012      	b.n	80018fe <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80018d8:	893b      	ldrh	r3, [r7, #8]
 80018da:	b2da      	uxtb	r2, r3
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	9300      	str	r3, [sp, #0]
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	2200      	movs	r2, #0
 80018ea:	2140      	movs	r1, #64	; 0x40
 80018ec:	68f8      	ldr	r0, [r7, #12]
 80018ee:	f000 f831 	bl	8001954 <I2C_WaitOnFlagUntilTimeout>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e000      	b.n	80018fe <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	80002000 	.word	0x80002000

0800190c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	699b      	ldr	r3, [r3, #24]
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	2b02      	cmp	r3, #2
 8001920:	d103      	bne.n	800192a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	2200      	movs	r2, #0
 8001928:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	699b      	ldr	r3, [r3, #24]
 8001930:	f003 0301 	and.w	r3, r3, #1
 8001934:	2b01      	cmp	r3, #1
 8001936:	d007      	beq.n	8001948 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	699a      	ldr	r2, [r3, #24]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f042 0201 	orr.w	r2, r2, #1
 8001946:	619a      	str	r2, [r3, #24]
  }
}
 8001948:	bf00      	nop
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	603b      	str	r3, [r7, #0]
 8001960:	4613      	mov	r3, r2
 8001962:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001964:	e031      	b.n	80019ca <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800196c:	d02d      	beq.n	80019ca <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800196e:	f7ff f9bf 	bl	8000cf0 <HAL_GetTick>
 8001972:	4602      	mov	r2, r0
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	683a      	ldr	r2, [r7, #0]
 800197a:	429a      	cmp	r2, r3
 800197c:	d302      	bcc.n	8001984 <I2C_WaitOnFlagUntilTimeout+0x30>
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d122      	bne.n	80019ca <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	699a      	ldr	r2, [r3, #24]
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	4013      	ands	r3, r2
 800198e:	68ba      	ldr	r2, [r7, #8]
 8001990:	429a      	cmp	r2, r3
 8001992:	bf0c      	ite	eq
 8001994:	2301      	moveq	r3, #1
 8001996:	2300      	movne	r3, #0
 8001998:	b2db      	uxtb	r3, r3
 800199a:	461a      	mov	r2, r3
 800199c:	79fb      	ldrb	r3, [r7, #7]
 800199e:	429a      	cmp	r2, r3
 80019a0:	d113      	bne.n	80019ca <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a6:	f043 0220 	orr.w	r2, r3, #32
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	2220      	movs	r2, #32
 80019b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	2200      	movs	r2, #0
 80019ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	2200      	movs	r2, #0
 80019c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e00f      	b.n	80019ea <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	699a      	ldr	r2, [r3, #24]
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	4013      	ands	r3, r2
 80019d4:	68ba      	ldr	r2, [r7, #8]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	bf0c      	ite	eq
 80019da:	2301      	moveq	r3, #1
 80019dc:	2300      	movne	r3, #0
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	461a      	mov	r2, r3
 80019e2:	79fb      	ldrb	r3, [r7, #7]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d0be      	beq.n	8001966 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3710      	adds	r7, #16
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b084      	sub	sp, #16
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	60f8      	str	r0, [r7, #12]
 80019fa:	60b9      	str	r1, [r7, #8]
 80019fc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80019fe:	e033      	b.n	8001a68 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a00:	687a      	ldr	r2, [r7, #4]
 8001a02:	68b9      	ldr	r1, [r7, #8]
 8001a04:	68f8      	ldr	r0, [r7, #12]
 8001a06:	f000 f87f 	bl	8001b08 <I2C_IsErrorOccurred>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e031      	b.n	8001a78 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a1a:	d025      	beq.n	8001a68 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a1c:	f7ff f968 	bl	8000cf0 <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	68ba      	ldr	r2, [r7, #8]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d302      	bcc.n	8001a32 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d11a      	bne.n	8001a68 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	699b      	ldr	r3, [r3, #24]
 8001a38:	f003 0302 	and.w	r3, r3, #2
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d013      	beq.n	8001a68 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a44:	f043 0220 	orr.w	r2, r3, #32
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2220      	movs	r2, #32
 8001a50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2200      	movs	r2, #0
 8001a58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e007      	b.n	8001a78 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	699b      	ldr	r3, [r3, #24]
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d1c4      	bne.n	8001a00 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001a76:	2300      	movs	r3, #0
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3710      	adds	r7, #16
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	60b9      	str	r1, [r7, #8]
 8001a8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a8c:	e02f      	b.n	8001aee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	68b9      	ldr	r1, [r7, #8]
 8001a92:	68f8      	ldr	r0, [r7, #12]
 8001a94:	f000 f838 	bl	8001b08 <I2C_IsErrorOccurred>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e02d      	b.n	8001afe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001aa2:	f7ff f925 	bl	8000cf0 <HAL_GetTick>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	68ba      	ldr	r2, [r7, #8]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d302      	bcc.n	8001ab8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d11a      	bne.n	8001aee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	699b      	ldr	r3, [r3, #24]
 8001abe:	f003 0320 	and.w	r3, r3, #32
 8001ac2:	2b20      	cmp	r3, #32
 8001ac4:	d013      	beq.n	8001aee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aca:	f043 0220 	orr.w	r2, r3, #32
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	2220      	movs	r2, #32
 8001ad6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2200      	movs	r2, #0
 8001ade:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e007      	b.n	8001afe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	f003 0320 	and.w	r3, r3, #32
 8001af8:	2b20      	cmp	r3, #32
 8001afa:	d1c8      	bne.n	8001a8e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3710      	adds	r7, #16
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
	...

08001b08 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b08a      	sub	sp, #40	; 0x28
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	60b9      	str	r1, [r7, #8]
 8001b12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b14:	2300      	movs	r3, #0
 8001b16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001b22:	2300      	movs	r3, #0
 8001b24:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	f003 0310 	and.w	r3, r3, #16
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d068      	beq.n	8001c06 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2210      	movs	r2, #16
 8001b3a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001b3c:	e049      	b.n	8001bd2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b44:	d045      	beq.n	8001bd2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001b46:	f7ff f8d3 	bl	8000cf0 <HAL_GetTick>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	68ba      	ldr	r2, [r7, #8]
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d302      	bcc.n	8001b5c <I2C_IsErrorOccurred+0x54>
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d13a      	bne.n	8001bd2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b66:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001b6e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	699b      	ldr	r3, [r3, #24]
 8001b76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b7e:	d121      	bne.n	8001bc4 <I2C_IsErrorOccurred+0xbc>
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001b86:	d01d      	beq.n	8001bc4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001b88:	7cfb      	ldrb	r3, [r7, #19]
 8001b8a:	2b20      	cmp	r3, #32
 8001b8c:	d01a      	beq.n	8001bc4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	685a      	ldr	r2, [r3, #4]
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001b9c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001b9e:	f7ff f8a7 	bl	8000cf0 <HAL_GetTick>
 8001ba2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ba4:	e00e      	b.n	8001bc4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001ba6:	f7ff f8a3 	bl	8000cf0 <HAL_GetTick>
 8001baa:	4602      	mov	r2, r0
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	2b19      	cmp	r3, #25
 8001bb2:	d907      	bls.n	8001bc4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001bb4:	6a3b      	ldr	r3, [r7, #32]
 8001bb6:	f043 0320 	orr.w	r3, r3, #32
 8001bba:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8001bc2:	e006      	b.n	8001bd2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	699b      	ldr	r3, [r3, #24]
 8001bca:	f003 0320 	and.w	r3, r3, #32
 8001bce:	2b20      	cmp	r3, #32
 8001bd0:	d1e9      	bne.n	8001ba6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	699b      	ldr	r3, [r3, #24]
 8001bd8:	f003 0320 	and.w	r3, r3, #32
 8001bdc:	2b20      	cmp	r3, #32
 8001bde:	d003      	beq.n	8001be8 <I2C_IsErrorOccurred+0xe0>
 8001be0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d0aa      	beq.n	8001b3e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001be8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d103      	bne.n	8001bf8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2220      	movs	r2, #32
 8001bf6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001bf8:	6a3b      	ldr	r3, [r7, #32]
 8001bfa:	f043 0304 	orr.w	r3, r3, #4
 8001bfe:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	699b      	ldr	r3, [r3, #24]
 8001c0c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d00b      	beq.n	8001c30 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001c18:	6a3b      	ldr	r3, [r7, #32]
 8001c1a:	f043 0301 	orr.w	r3, r3, #1
 8001c1e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c28:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d00b      	beq.n	8001c52 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001c3a:	6a3b      	ldr	r3, [r7, #32]
 8001c3c:	f043 0308 	orr.w	r3, r3, #8
 8001c40:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c4a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d00b      	beq.n	8001c74 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001c5c:	6a3b      	ldr	r3, [r7, #32]
 8001c5e:	f043 0302 	orr.w	r3, r3, #2
 8001c62:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c6c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001c74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d01c      	beq.n	8001cb6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001c7c:	68f8      	ldr	r0, [r7, #12]
 8001c7e:	f7ff fe45 	bl	800190c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	6859      	ldr	r1, [r3, #4]
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	4b0d      	ldr	r3, [pc, #52]	; (8001cc4 <I2C_IsErrorOccurred+0x1bc>)
 8001c8e:	400b      	ands	r3, r1
 8001c90:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c96:	6a3b      	ldr	r3, [r7, #32]
 8001c98:	431a      	orrs	r2, r3
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2220      	movs	r2, #32
 8001ca2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001cb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3728      	adds	r7, #40	; 0x28
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	fe00e800 	.word	0xfe00e800

08001cc8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b087      	sub	sp, #28
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	607b      	str	r3, [r7, #4]
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	817b      	strh	r3, [r7, #10]
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001cda:	897b      	ldrh	r3, [r7, #10]
 8001cdc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001ce0:	7a7b      	ldrb	r3, [r7, #9]
 8001ce2:	041b      	lsls	r3, r3, #16
 8001ce4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001ce8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001cee:	6a3b      	ldr	r3, [r7, #32]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001cf6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	685a      	ldr	r2, [r3, #4]
 8001cfe:	6a3b      	ldr	r3, [r7, #32]
 8001d00:	0d5b      	lsrs	r3, r3, #21
 8001d02:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001d06:	4b08      	ldr	r3, [pc, #32]	; (8001d28 <I2C_TransferConfig+0x60>)
 8001d08:	430b      	orrs	r3, r1
 8001d0a:	43db      	mvns	r3, r3
 8001d0c:	ea02 0103 	and.w	r1, r2, r3
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	697a      	ldr	r2, [r7, #20]
 8001d16:	430a      	orrs	r2, r1
 8001d18:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001d1a:	bf00      	nop
 8001d1c:	371c      	adds	r7, #28
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	03ff63ff 	.word	0x03ff63ff

08001d2c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	2b20      	cmp	r3, #32
 8001d40:	d138      	bne.n	8001db4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d101      	bne.n	8001d50 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	e032      	b.n	8001db6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2224      	movs	r2, #36	; 0x24
 8001d5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f022 0201 	bic.w	r2, r2, #1
 8001d6e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001d7e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	6819      	ldr	r1, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	683a      	ldr	r2, [r7, #0]
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f042 0201 	orr.w	r2, r2, #1
 8001d9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2220      	movs	r2, #32
 8001da4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001db0:	2300      	movs	r3, #0
 8001db2:	e000      	b.n	8001db6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001db4:	2302      	movs	r3, #2
  }
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr

08001dc2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	b085      	sub	sp, #20
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
 8001dca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	2b20      	cmp	r3, #32
 8001dd6:	d139      	bne.n	8001e4c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d101      	bne.n	8001de6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001de2:	2302      	movs	r3, #2
 8001de4:	e033      	b.n	8001e4e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2201      	movs	r2, #1
 8001dea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2224      	movs	r2, #36	; 0x24
 8001df2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f022 0201 	bic.w	r2, r2, #1
 8001e04:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001e14:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	021b      	lsls	r3, r3, #8
 8001e1a:	68fa      	ldr	r2, [r7, #12]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	68fa      	ldr	r2, [r7, #12]
 8001e26:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f042 0201 	orr.w	r2, r2, #1
 8001e36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2220      	movs	r2, #32
 8001e3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2200      	movs	r2, #0
 8001e44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	e000      	b.n	8001e4e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001e4c:	2302      	movs	r3, #2
  }
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3714      	adds	r7, #20
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr

08001e5a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001e5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e5c:	b08b      	sub	sp, #44	; 0x2c
 8001e5e:	af06      	add	r7, sp, #24
 8001e60:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d101      	bne.n	8001e6c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e0c4      	b.n	8001ff6 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d106      	bne.n	8001e86 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f7fe fde7 	bl	8000a54 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2203      	movs	r2, #3
 8001e8a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f002 f80a 	bl	8003eac <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e98:	2300      	movs	r3, #0
 8001e9a:	73fb      	strb	r3, [r7, #15]
 8001e9c:	e040      	b.n	8001f20 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ea0:	6879      	ldr	r1, [r7, #4]
 8001ea2:	1c5a      	adds	r2, r3, #1
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	4413      	add	r3, r2
 8001eaa:	00db      	lsls	r3, r3, #3
 8001eac:	440b      	add	r3, r1
 8001eae:	3301      	adds	r3, #1
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001eb4:	7bfb      	ldrb	r3, [r7, #15]
 8001eb6:	6879      	ldr	r1, [r7, #4]
 8001eb8:	1c5a      	adds	r2, r3, #1
 8001eba:	4613      	mov	r3, r2
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	4413      	add	r3, r2
 8001ec0:	00db      	lsls	r3, r3, #3
 8001ec2:	440b      	add	r3, r1
 8001ec4:	7bfa      	ldrb	r2, [r7, #15]
 8001ec6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ec8:	7bfb      	ldrb	r3, [r7, #15]
 8001eca:	6879      	ldr	r1, [r7, #4]
 8001ecc:	1c5a      	adds	r2, r3, #1
 8001ece:	4613      	mov	r3, r2
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	4413      	add	r3, r2
 8001ed4:	00db      	lsls	r3, r3, #3
 8001ed6:	440b      	add	r3, r1
 8001ed8:	3303      	adds	r3, #3
 8001eda:	2200      	movs	r2, #0
 8001edc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001ede:	7bfa      	ldrb	r2, [r7, #15]
 8001ee0:	6879      	ldr	r1, [r7, #4]
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	4413      	add	r3, r2
 8001ee8:	00db      	lsls	r3, r3, #3
 8001eea:	440b      	add	r3, r1
 8001eec:	3338      	adds	r3, #56	; 0x38
 8001eee:	2200      	movs	r2, #0
 8001ef0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ef2:	7bfa      	ldrb	r2, [r7, #15]
 8001ef4:	6879      	ldr	r1, [r7, #4]
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	4413      	add	r3, r2
 8001efc:	00db      	lsls	r3, r3, #3
 8001efe:	440b      	add	r3, r1
 8001f00:	333c      	adds	r3, #60	; 0x3c
 8001f02:	2200      	movs	r2, #0
 8001f04:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f06:	7bfa      	ldrb	r2, [r7, #15]
 8001f08:	6879      	ldr	r1, [r7, #4]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	4413      	add	r3, r2
 8001f10:	00db      	lsls	r3, r3, #3
 8001f12:	440b      	add	r3, r1
 8001f14:	3340      	adds	r3, #64	; 0x40
 8001f16:	2200      	movs	r2, #0
 8001f18:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f1a:	7bfb      	ldrb	r3, [r7, #15]
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	73fb      	strb	r3, [r7, #15]
 8001f20:	7bfa      	ldrb	r2, [r7, #15]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d3b9      	bcc.n	8001e9e <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	73fb      	strb	r3, [r7, #15]
 8001f2e:	e044      	b.n	8001fba <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f30:	7bfa      	ldrb	r2, [r7, #15]
 8001f32:	6879      	ldr	r1, [r7, #4]
 8001f34:	4613      	mov	r3, r2
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	4413      	add	r3, r2
 8001f3a:	00db      	lsls	r3, r3, #3
 8001f3c:	440b      	add	r3, r1
 8001f3e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001f42:	2200      	movs	r2, #0
 8001f44:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f46:	7bfa      	ldrb	r2, [r7, #15]
 8001f48:	6879      	ldr	r1, [r7, #4]
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	4413      	add	r3, r2
 8001f50:	00db      	lsls	r3, r3, #3
 8001f52:	440b      	add	r3, r1
 8001f54:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f58:	7bfa      	ldrb	r2, [r7, #15]
 8001f5a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f5c:	7bfa      	ldrb	r2, [r7, #15]
 8001f5e:	6879      	ldr	r1, [r7, #4]
 8001f60:	4613      	mov	r3, r2
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	4413      	add	r3, r2
 8001f66:	00db      	lsls	r3, r3, #3
 8001f68:	440b      	add	r3, r1
 8001f6a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001f6e:	2200      	movs	r2, #0
 8001f70:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f72:	7bfa      	ldrb	r2, [r7, #15]
 8001f74:	6879      	ldr	r1, [r7, #4]
 8001f76:	4613      	mov	r3, r2
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	4413      	add	r3, r2
 8001f7c:	00db      	lsls	r3, r3, #3
 8001f7e:	440b      	add	r3, r1
 8001f80:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f88:	7bfa      	ldrb	r2, [r7, #15]
 8001f8a:	6879      	ldr	r1, [r7, #4]
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	4413      	add	r3, r2
 8001f92:	00db      	lsls	r3, r3, #3
 8001f94:	440b      	add	r3, r1
 8001f96:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f9e:	7bfa      	ldrb	r2, [r7, #15]
 8001fa0:	6879      	ldr	r1, [r7, #4]
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	4413      	add	r3, r2
 8001fa8:	00db      	lsls	r3, r3, #3
 8001faa:	440b      	add	r3, r1
 8001fac:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fb4:	7bfb      	ldrb	r3, [r7, #15]
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	73fb      	strb	r3, [r7, #15]
 8001fba:	7bfa      	ldrb	r2, [r7, #15]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d3b5      	bcc.n	8001f30 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	603b      	str	r3, [r7, #0]
 8001fca:	687e      	ldr	r6, [r7, #4]
 8001fcc:	466d      	mov	r5, sp
 8001fce:	f106 0410 	add.w	r4, r6, #16
 8001fd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fd6:	6823      	ldr	r3, [r4, #0]
 8001fd8:	602b      	str	r3, [r5, #0]
 8001fda:	1d33      	adds	r3, r6, #4
 8001fdc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fde:	6838      	ldr	r0, [r7, #0]
 8001fe0:	f001 ff7f 	bl	8003ee2 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3714      	adds	r7, #20
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002000 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002006:	af00      	add	r7, sp, #0
 8002008:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800200c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002010:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002012:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002016:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d102      	bne.n	8002026 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	f001 b823 	b.w	800306c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002026:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800202a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	2b00      	cmp	r3, #0
 8002038:	f000 817d 	beq.w	8002336 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800203c:	4bbc      	ldr	r3, [pc, #752]	; (8002330 <HAL_RCC_OscConfig+0x330>)
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f003 030c 	and.w	r3, r3, #12
 8002044:	2b04      	cmp	r3, #4
 8002046:	d00c      	beq.n	8002062 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002048:	4bb9      	ldr	r3, [pc, #740]	; (8002330 <HAL_RCC_OscConfig+0x330>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f003 030c 	and.w	r3, r3, #12
 8002050:	2b08      	cmp	r3, #8
 8002052:	d15c      	bne.n	800210e <HAL_RCC_OscConfig+0x10e>
 8002054:	4bb6      	ldr	r3, [pc, #728]	; (8002330 <HAL_RCC_OscConfig+0x330>)
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800205c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002060:	d155      	bne.n	800210e <HAL_RCC_OscConfig+0x10e>
 8002062:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002066:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800206a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800206e:	fa93 f3a3 	rbit	r3, r3
 8002072:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002076:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800207a:	fab3 f383 	clz	r3, r3
 800207e:	b2db      	uxtb	r3, r3
 8002080:	095b      	lsrs	r3, r3, #5
 8002082:	b2db      	uxtb	r3, r3
 8002084:	f043 0301 	orr.w	r3, r3, #1
 8002088:	b2db      	uxtb	r3, r3
 800208a:	2b01      	cmp	r3, #1
 800208c:	d102      	bne.n	8002094 <HAL_RCC_OscConfig+0x94>
 800208e:	4ba8      	ldr	r3, [pc, #672]	; (8002330 <HAL_RCC_OscConfig+0x330>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	e015      	b.n	80020c0 <HAL_RCC_OscConfig+0xc0>
 8002094:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002098:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800209c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80020a0:	fa93 f3a3 	rbit	r3, r3
 80020a4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80020a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020ac:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80020b0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80020b4:	fa93 f3a3 	rbit	r3, r3
 80020b8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80020bc:	4b9c      	ldr	r3, [pc, #624]	; (8002330 <HAL_RCC_OscConfig+0x330>)
 80020be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80020c4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80020c8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80020cc:	fa92 f2a2 	rbit	r2, r2
 80020d0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80020d4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80020d8:	fab2 f282 	clz	r2, r2
 80020dc:	b2d2      	uxtb	r2, r2
 80020de:	f042 0220 	orr.w	r2, r2, #32
 80020e2:	b2d2      	uxtb	r2, r2
 80020e4:	f002 021f 	and.w	r2, r2, #31
 80020e8:	2101      	movs	r1, #1
 80020ea:	fa01 f202 	lsl.w	r2, r1, r2
 80020ee:	4013      	ands	r3, r2
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	f000 811f 	beq.w	8002334 <HAL_RCC_OscConfig+0x334>
 80020f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	2b00      	cmp	r3, #0
 8002104:	f040 8116 	bne.w	8002334 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	f000 bfaf 	b.w	800306c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800210e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002112:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800211e:	d106      	bne.n	800212e <HAL_RCC_OscConfig+0x12e>
 8002120:	4b83      	ldr	r3, [pc, #524]	; (8002330 <HAL_RCC_OscConfig+0x330>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a82      	ldr	r2, [pc, #520]	; (8002330 <HAL_RCC_OscConfig+0x330>)
 8002126:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800212a:	6013      	str	r3, [r2, #0]
 800212c:	e036      	b.n	800219c <HAL_RCC_OscConfig+0x19c>
 800212e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002132:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d10c      	bne.n	8002158 <HAL_RCC_OscConfig+0x158>
 800213e:	4b7c      	ldr	r3, [pc, #496]	; (8002330 <HAL_RCC_OscConfig+0x330>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a7b      	ldr	r2, [pc, #492]	; (8002330 <HAL_RCC_OscConfig+0x330>)
 8002144:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002148:	6013      	str	r3, [r2, #0]
 800214a:	4b79      	ldr	r3, [pc, #484]	; (8002330 <HAL_RCC_OscConfig+0x330>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a78      	ldr	r2, [pc, #480]	; (8002330 <HAL_RCC_OscConfig+0x330>)
 8002150:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002154:	6013      	str	r3, [r2, #0]
 8002156:	e021      	b.n	800219c <HAL_RCC_OscConfig+0x19c>
 8002158:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800215c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002168:	d10c      	bne.n	8002184 <HAL_RCC_OscConfig+0x184>
 800216a:	4b71      	ldr	r3, [pc, #452]	; (8002330 <HAL_RCC_OscConfig+0x330>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a70      	ldr	r2, [pc, #448]	; (8002330 <HAL_RCC_OscConfig+0x330>)
 8002170:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002174:	6013      	str	r3, [r2, #0]
 8002176:	4b6e      	ldr	r3, [pc, #440]	; (8002330 <HAL_RCC_OscConfig+0x330>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a6d      	ldr	r2, [pc, #436]	; (8002330 <HAL_RCC_OscConfig+0x330>)
 800217c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002180:	6013      	str	r3, [r2, #0]
 8002182:	e00b      	b.n	800219c <HAL_RCC_OscConfig+0x19c>
 8002184:	4b6a      	ldr	r3, [pc, #424]	; (8002330 <HAL_RCC_OscConfig+0x330>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a69      	ldr	r2, [pc, #420]	; (8002330 <HAL_RCC_OscConfig+0x330>)
 800218a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800218e:	6013      	str	r3, [r2, #0]
 8002190:	4b67      	ldr	r3, [pc, #412]	; (8002330 <HAL_RCC_OscConfig+0x330>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a66      	ldr	r2, [pc, #408]	; (8002330 <HAL_RCC_OscConfig+0x330>)
 8002196:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800219a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800219c:	4b64      	ldr	r3, [pc, #400]	; (8002330 <HAL_RCC_OscConfig+0x330>)
 800219e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a0:	f023 020f 	bic.w	r2, r3, #15
 80021a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	495f      	ldr	r1, [pc, #380]	; (8002330 <HAL_RCC_OscConfig+0x330>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d059      	beq.n	800227a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c6:	f7fe fd93 	bl	8000cf0 <HAL_GetTick>
 80021ca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ce:	e00a      	b.n	80021e6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021d0:	f7fe fd8e 	bl	8000cf0 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	2b64      	cmp	r3, #100	; 0x64
 80021de:	d902      	bls.n	80021e6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	f000 bf43 	b.w	800306c <HAL_RCC_OscConfig+0x106c>
 80021e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021ea:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ee:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80021f2:	fa93 f3a3 	rbit	r3, r3
 80021f6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80021fa:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021fe:	fab3 f383 	clz	r3, r3
 8002202:	b2db      	uxtb	r3, r3
 8002204:	095b      	lsrs	r3, r3, #5
 8002206:	b2db      	uxtb	r3, r3
 8002208:	f043 0301 	orr.w	r3, r3, #1
 800220c:	b2db      	uxtb	r3, r3
 800220e:	2b01      	cmp	r3, #1
 8002210:	d102      	bne.n	8002218 <HAL_RCC_OscConfig+0x218>
 8002212:	4b47      	ldr	r3, [pc, #284]	; (8002330 <HAL_RCC_OscConfig+0x330>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	e015      	b.n	8002244 <HAL_RCC_OscConfig+0x244>
 8002218:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800221c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002220:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002224:	fa93 f3a3 	rbit	r3, r3
 8002228:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800222c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002230:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002234:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002238:	fa93 f3a3 	rbit	r3, r3
 800223c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002240:	4b3b      	ldr	r3, [pc, #236]	; (8002330 <HAL_RCC_OscConfig+0x330>)
 8002242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002244:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002248:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800224c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002250:	fa92 f2a2 	rbit	r2, r2
 8002254:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002258:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800225c:	fab2 f282 	clz	r2, r2
 8002260:	b2d2      	uxtb	r2, r2
 8002262:	f042 0220 	orr.w	r2, r2, #32
 8002266:	b2d2      	uxtb	r2, r2
 8002268:	f002 021f 	and.w	r2, r2, #31
 800226c:	2101      	movs	r1, #1
 800226e:	fa01 f202 	lsl.w	r2, r1, r2
 8002272:	4013      	ands	r3, r2
 8002274:	2b00      	cmp	r3, #0
 8002276:	d0ab      	beq.n	80021d0 <HAL_RCC_OscConfig+0x1d0>
 8002278:	e05d      	b.n	8002336 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800227a:	f7fe fd39 	bl	8000cf0 <HAL_GetTick>
 800227e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002282:	e00a      	b.n	800229a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002284:	f7fe fd34 	bl	8000cf0 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	2b64      	cmp	r3, #100	; 0x64
 8002292:	d902      	bls.n	800229a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	f000 bee9 	b.w	800306c <HAL_RCC_OscConfig+0x106c>
 800229a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800229e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80022a6:	fa93 f3a3 	rbit	r3, r3
 80022aa:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80022ae:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022b2:	fab3 f383 	clz	r3, r3
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	095b      	lsrs	r3, r3, #5
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	f043 0301 	orr.w	r3, r3, #1
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d102      	bne.n	80022cc <HAL_RCC_OscConfig+0x2cc>
 80022c6:	4b1a      	ldr	r3, [pc, #104]	; (8002330 <HAL_RCC_OscConfig+0x330>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	e015      	b.n	80022f8 <HAL_RCC_OscConfig+0x2f8>
 80022cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022d0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80022d8:	fa93 f3a3 	rbit	r3, r3
 80022dc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80022e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022e4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80022e8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80022ec:	fa93 f3a3 	rbit	r3, r3
 80022f0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80022f4:	4b0e      	ldr	r3, [pc, #56]	; (8002330 <HAL_RCC_OscConfig+0x330>)
 80022f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80022fc:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002300:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002304:	fa92 f2a2 	rbit	r2, r2
 8002308:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800230c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002310:	fab2 f282 	clz	r2, r2
 8002314:	b2d2      	uxtb	r2, r2
 8002316:	f042 0220 	orr.w	r2, r2, #32
 800231a:	b2d2      	uxtb	r2, r2
 800231c:	f002 021f 	and.w	r2, r2, #31
 8002320:	2101      	movs	r1, #1
 8002322:	fa01 f202 	lsl.w	r2, r1, r2
 8002326:	4013      	ands	r3, r2
 8002328:	2b00      	cmp	r3, #0
 800232a:	d1ab      	bne.n	8002284 <HAL_RCC_OscConfig+0x284>
 800232c:	e003      	b.n	8002336 <HAL_RCC_OscConfig+0x336>
 800232e:	bf00      	nop
 8002330:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002334:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002336:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800233a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b00      	cmp	r3, #0
 8002348:	f000 817d 	beq.w	8002646 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800234c:	4ba6      	ldr	r3, [pc, #664]	; (80025e8 <HAL_RCC_OscConfig+0x5e8>)
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f003 030c 	and.w	r3, r3, #12
 8002354:	2b00      	cmp	r3, #0
 8002356:	d00b      	beq.n	8002370 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002358:	4ba3      	ldr	r3, [pc, #652]	; (80025e8 <HAL_RCC_OscConfig+0x5e8>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f003 030c 	and.w	r3, r3, #12
 8002360:	2b08      	cmp	r3, #8
 8002362:	d172      	bne.n	800244a <HAL_RCC_OscConfig+0x44a>
 8002364:	4ba0      	ldr	r3, [pc, #640]	; (80025e8 <HAL_RCC_OscConfig+0x5e8>)
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d16c      	bne.n	800244a <HAL_RCC_OscConfig+0x44a>
 8002370:	2302      	movs	r3, #2
 8002372:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002376:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800237a:	fa93 f3a3 	rbit	r3, r3
 800237e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002382:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002386:	fab3 f383 	clz	r3, r3
 800238a:	b2db      	uxtb	r3, r3
 800238c:	095b      	lsrs	r3, r3, #5
 800238e:	b2db      	uxtb	r3, r3
 8002390:	f043 0301 	orr.w	r3, r3, #1
 8002394:	b2db      	uxtb	r3, r3
 8002396:	2b01      	cmp	r3, #1
 8002398:	d102      	bne.n	80023a0 <HAL_RCC_OscConfig+0x3a0>
 800239a:	4b93      	ldr	r3, [pc, #588]	; (80025e8 <HAL_RCC_OscConfig+0x5e8>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	e013      	b.n	80023c8 <HAL_RCC_OscConfig+0x3c8>
 80023a0:	2302      	movs	r3, #2
 80023a2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80023aa:	fa93 f3a3 	rbit	r3, r3
 80023ae:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80023b2:	2302      	movs	r3, #2
 80023b4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80023b8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80023bc:	fa93 f3a3 	rbit	r3, r3
 80023c0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80023c4:	4b88      	ldr	r3, [pc, #544]	; (80025e8 <HAL_RCC_OscConfig+0x5e8>)
 80023c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c8:	2202      	movs	r2, #2
 80023ca:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80023ce:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80023d2:	fa92 f2a2 	rbit	r2, r2
 80023d6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80023da:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80023de:	fab2 f282 	clz	r2, r2
 80023e2:	b2d2      	uxtb	r2, r2
 80023e4:	f042 0220 	orr.w	r2, r2, #32
 80023e8:	b2d2      	uxtb	r2, r2
 80023ea:	f002 021f 	and.w	r2, r2, #31
 80023ee:	2101      	movs	r1, #1
 80023f0:	fa01 f202 	lsl.w	r2, r1, r2
 80023f4:	4013      	ands	r3, r2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d00a      	beq.n	8002410 <HAL_RCC_OscConfig+0x410>
 80023fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	691b      	ldr	r3, [r3, #16]
 8002406:	2b01      	cmp	r3, #1
 8002408:	d002      	beq.n	8002410 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	f000 be2e 	b.w	800306c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002410:	4b75      	ldr	r3, [pc, #468]	; (80025e8 <HAL_RCC_OscConfig+0x5e8>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002418:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800241c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	695b      	ldr	r3, [r3, #20]
 8002424:	21f8      	movs	r1, #248	; 0xf8
 8002426:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800242e:	fa91 f1a1 	rbit	r1, r1
 8002432:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002436:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800243a:	fab1 f181 	clz	r1, r1
 800243e:	b2c9      	uxtb	r1, r1
 8002440:	408b      	lsls	r3, r1
 8002442:	4969      	ldr	r1, [pc, #420]	; (80025e8 <HAL_RCC_OscConfig+0x5e8>)
 8002444:	4313      	orrs	r3, r2
 8002446:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002448:	e0fd      	b.n	8002646 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800244a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800244e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	2b00      	cmp	r3, #0
 8002458:	f000 8088 	beq.w	800256c <HAL_RCC_OscConfig+0x56c>
 800245c:	2301      	movs	r3, #1
 800245e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002462:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002466:	fa93 f3a3 	rbit	r3, r3
 800246a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800246e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002472:	fab3 f383 	clz	r3, r3
 8002476:	b2db      	uxtb	r3, r3
 8002478:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800247c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	461a      	mov	r2, r3
 8002484:	2301      	movs	r3, #1
 8002486:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002488:	f7fe fc32 	bl	8000cf0 <HAL_GetTick>
 800248c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002490:	e00a      	b.n	80024a8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002492:	f7fe fc2d 	bl	8000cf0 <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d902      	bls.n	80024a8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	f000 bde2 	b.w	800306c <HAL_RCC_OscConfig+0x106c>
 80024a8:	2302      	movs	r3, #2
 80024aa:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ae:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80024b2:	fa93 f3a3 	rbit	r3, r3
 80024b6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80024ba:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024be:	fab3 f383 	clz	r3, r3
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	095b      	lsrs	r3, r3, #5
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	f043 0301 	orr.w	r3, r3, #1
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d102      	bne.n	80024d8 <HAL_RCC_OscConfig+0x4d8>
 80024d2:	4b45      	ldr	r3, [pc, #276]	; (80025e8 <HAL_RCC_OscConfig+0x5e8>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	e013      	b.n	8002500 <HAL_RCC_OscConfig+0x500>
 80024d8:	2302      	movs	r3, #2
 80024da:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024de:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80024e2:	fa93 f3a3 	rbit	r3, r3
 80024e6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80024ea:	2302      	movs	r3, #2
 80024ec:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80024f0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80024f4:	fa93 f3a3 	rbit	r3, r3
 80024f8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80024fc:	4b3a      	ldr	r3, [pc, #232]	; (80025e8 <HAL_RCC_OscConfig+0x5e8>)
 80024fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002500:	2202      	movs	r2, #2
 8002502:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002506:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800250a:	fa92 f2a2 	rbit	r2, r2
 800250e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002512:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002516:	fab2 f282 	clz	r2, r2
 800251a:	b2d2      	uxtb	r2, r2
 800251c:	f042 0220 	orr.w	r2, r2, #32
 8002520:	b2d2      	uxtb	r2, r2
 8002522:	f002 021f 	and.w	r2, r2, #31
 8002526:	2101      	movs	r1, #1
 8002528:	fa01 f202 	lsl.w	r2, r1, r2
 800252c:	4013      	ands	r3, r2
 800252e:	2b00      	cmp	r3, #0
 8002530:	d0af      	beq.n	8002492 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002532:	4b2d      	ldr	r3, [pc, #180]	; (80025e8 <HAL_RCC_OscConfig+0x5e8>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800253a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800253e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	695b      	ldr	r3, [r3, #20]
 8002546:	21f8      	movs	r1, #248	; 0xf8
 8002548:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002550:	fa91 f1a1 	rbit	r1, r1
 8002554:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002558:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800255c:	fab1 f181 	clz	r1, r1
 8002560:	b2c9      	uxtb	r1, r1
 8002562:	408b      	lsls	r3, r1
 8002564:	4920      	ldr	r1, [pc, #128]	; (80025e8 <HAL_RCC_OscConfig+0x5e8>)
 8002566:	4313      	orrs	r3, r2
 8002568:	600b      	str	r3, [r1, #0]
 800256a:	e06c      	b.n	8002646 <HAL_RCC_OscConfig+0x646>
 800256c:	2301      	movs	r3, #1
 800256e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002572:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002576:	fa93 f3a3 	rbit	r3, r3
 800257a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800257e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002582:	fab3 f383 	clz	r3, r3
 8002586:	b2db      	uxtb	r3, r3
 8002588:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800258c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	461a      	mov	r2, r3
 8002594:	2300      	movs	r3, #0
 8002596:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002598:	f7fe fbaa 	bl	8000cf0 <HAL_GetTick>
 800259c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025a0:	e00a      	b.n	80025b8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025a2:	f7fe fba5 	bl	8000cf0 <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d902      	bls.n	80025b8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	f000 bd5a 	b.w	800306c <HAL_RCC_OscConfig+0x106c>
 80025b8:	2302      	movs	r3, #2
 80025ba:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025be:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80025c2:	fa93 f3a3 	rbit	r3, r3
 80025c6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80025ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ce:	fab3 f383 	clz	r3, r3
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	095b      	lsrs	r3, r3, #5
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	f043 0301 	orr.w	r3, r3, #1
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d104      	bne.n	80025ec <HAL_RCC_OscConfig+0x5ec>
 80025e2:	4b01      	ldr	r3, [pc, #4]	; (80025e8 <HAL_RCC_OscConfig+0x5e8>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	e015      	b.n	8002614 <HAL_RCC_OscConfig+0x614>
 80025e8:	40021000 	.word	0x40021000
 80025ec:	2302      	movs	r3, #2
 80025ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80025f6:	fa93 f3a3 	rbit	r3, r3
 80025fa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80025fe:	2302      	movs	r3, #2
 8002600:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002604:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002608:	fa93 f3a3 	rbit	r3, r3
 800260c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002610:	4bc8      	ldr	r3, [pc, #800]	; (8002934 <HAL_RCC_OscConfig+0x934>)
 8002612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002614:	2202      	movs	r2, #2
 8002616:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800261a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800261e:	fa92 f2a2 	rbit	r2, r2
 8002622:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002626:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800262a:	fab2 f282 	clz	r2, r2
 800262e:	b2d2      	uxtb	r2, r2
 8002630:	f042 0220 	orr.w	r2, r2, #32
 8002634:	b2d2      	uxtb	r2, r2
 8002636:	f002 021f 	and.w	r2, r2, #31
 800263a:	2101      	movs	r1, #1
 800263c:	fa01 f202 	lsl.w	r2, r1, r2
 8002640:	4013      	ands	r3, r2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d1ad      	bne.n	80025a2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002646:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800264a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0308 	and.w	r3, r3, #8
 8002656:	2b00      	cmp	r3, #0
 8002658:	f000 8110 	beq.w	800287c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800265c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002660:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d079      	beq.n	8002760 <HAL_RCC_OscConfig+0x760>
 800266c:	2301      	movs	r3, #1
 800266e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002672:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002676:	fa93 f3a3 	rbit	r3, r3
 800267a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800267e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002682:	fab3 f383 	clz	r3, r3
 8002686:	b2db      	uxtb	r3, r3
 8002688:	461a      	mov	r2, r3
 800268a:	4bab      	ldr	r3, [pc, #684]	; (8002938 <HAL_RCC_OscConfig+0x938>)
 800268c:	4413      	add	r3, r2
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	461a      	mov	r2, r3
 8002692:	2301      	movs	r3, #1
 8002694:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002696:	f7fe fb2b 	bl	8000cf0 <HAL_GetTick>
 800269a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800269e:	e00a      	b.n	80026b6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026a0:	f7fe fb26 	bl	8000cf0 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d902      	bls.n	80026b6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	f000 bcdb 	b.w	800306c <HAL_RCC_OscConfig+0x106c>
 80026b6:	2302      	movs	r3, #2
 80026b8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026bc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80026c0:	fa93 f3a3 	rbit	r3, r3
 80026c4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80026c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026cc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80026d0:	2202      	movs	r2, #2
 80026d2:	601a      	str	r2, [r3, #0]
 80026d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026d8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	fa93 f2a3 	rbit	r2, r3
 80026e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80026ea:	601a      	str	r2, [r3, #0]
 80026ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80026f4:	2202      	movs	r2, #2
 80026f6:	601a      	str	r2, [r3, #0]
 80026f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	fa93 f2a3 	rbit	r2, r3
 8002706:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800270a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800270e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002710:	4b88      	ldr	r3, [pc, #544]	; (8002934 <HAL_RCC_OscConfig+0x934>)
 8002712:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002714:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002718:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800271c:	2102      	movs	r1, #2
 800271e:	6019      	str	r1, [r3, #0]
 8002720:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002724:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	fa93 f1a3 	rbit	r1, r3
 800272e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002732:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002736:	6019      	str	r1, [r3, #0]
  return result;
 8002738:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800273c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	fab3 f383 	clz	r3, r3
 8002746:	b2db      	uxtb	r3, r3
 8002748:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800274c:	b2db      	uxtb	r3, r3
 800274e:	f003 031f 	and.w	r3, r3, #31
 8002752:	2101      	movs	r1, #1
 8002754:	fa01 f303 	lsl.w	r3, r1, r3
 8002758:	4013      	ands	r3, r2
 800275a:	2b00      	cmp	r3, #0
 800275c:	d0a0      	beq.n	80026a0 <HAL_RCC_OscConfig+0x6a0>
 800275e:	e08d      	b.n	800287c <HAL_RCC_OscConfig+0x87c>
 8002760:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002764:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002768:	2201      	movs	r2, #1
 800276a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800276c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002770:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	fa93 f2a3 	rbit	r2, r3
 800277a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800277e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002782:	601a      	str	r2, [r3, #0]
  return result;
 8002784:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002788:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800278c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800278e:	fab3 f383 	clz	r3, r3
 8002792:	b2db      	uxtb	r3, r3
 8002794:	461a      	mov	r2, r3
 8002796:	4b68      	ldr	r3, [pc, #416]	; (8002938 <HAL_RCC_OscConfig+0x938>)
 8002798:	4413      	add	r3, r2
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	461a      	mov	r2, r3
 800279e:	2300      	movs	r3, #0
 80027a0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027a2:	f7fe faa5 	bl	8000cf0 <HAL_GetTick>
 80027a6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027aa:	e00a      	b.n	80027c2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027ac:	f7fe faa0 	bl	8000cf0 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d902      	bls.n	80027c2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	f000 bc55 	b.w	800306c <HAL_RCC_OscConfig+0x106c>
 80027c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027c6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80027ca:	2202      	movs	r2, #2
 80027cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027d2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	fa93 f2a3 	rbit	r2, r3
 80027dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027e0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80027e4:	601a      	str	r2, [r3, #0]
 80027e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ea:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80027ee:	2202      	movs	r2, #2
 80027f0:	601a      	str	r2, [r3, #0]
 80027f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027f6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	fa93 f2a3 	rbit	r2, r3
 8002800:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002804:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002808:	601a      	str	r2, [r3, #0]
 800280a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800280e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002812:	2202      	movs	r2, #2
 8002814:	601a      	str	r2, [r3, #0]
 8002816:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800281a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	fa93 f2a3 	rbit	r2, r3
 8002824:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002828:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800282c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800282e:	4b41      	ldr	r3, [pc, #260]	; (8002934 <HAL_RCC_OscConfig+0x934>)
 8002830:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002832:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002836:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800283a:	2102      	movs	r1, #2
 800283c:	6019      	str	r1, [r3, #0]
 800283e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002842:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	fa93 f1a3 	rbit	r1, r3
 800284c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002850:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002854:	6019      	str	r1, [r3, #0]
  return result;
 8002856:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800285a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	fab3 f383 	clz	r3, r3
 8002864:	b2db      	uxtb	r3, r3
 8002866:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800286a:	b2db      	uxtb	r3, r3
 800286c:	f003 031f 	and.w	r3, r3, #31
 8002870:	2101      	movs	r1, #1
 8002872:	fa01 f303 	lsl.w	r3, r1, r3
 8002876:	4013      	ands	r3, r2
 8002878:	2b00      	cmp	r3, #0
 800287a:	d197      	bne.n	80027ac <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800287c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002880:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0304 	and.w	r3, r3, #4
 800288c:	2b00      	cmp	r3, #0
 800288e:	f000 81a1 	beq.w	8002bd4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002892:	2300      	movs	r3, #0
 8002894:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002898:	4b26      	ldr	r3, [pc, #152]	; (8002934 <HAL_RCC_OscConfig+0x934>)
 800289a:	69db      	ldr	r3, [r3, #28]
 800289c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d116      	bne.n	80028d2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028a4:	4b23      	ldr	r3, [pc, #140]	; (8002934 <HAL_RCC_OscConfig+0x934>)
 80028a6:	69db      	ldr	r3, [r3, #28]
 80028a8:	4a22      	ldr	r2, [pc, #136]	; (8002934 <HAL_RCC_OscConfig+0x934>)
 80028aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028ae:	61d3      	str	r3, [r2, #28]
 80028b0:	4b20      	ldr	r3, [pc, #128]	; (8002934 <HAL_RCC_OscConfig+0x934>)
 80028b2:	69db      	ldr	r3, [r3, #28]
 80028b4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80028b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028bc:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80028c0:	601a      	str	r2, [r3, #0]
 80028c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028c6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80028ca:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80028cc:	2301      	movs	r3, #1
 80028ce:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d2:	4b1a      	ldr	r3, [pc, #104]	; (800293c <HAL_RCC_OscConfig+0x93c>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d11a      	bne.n	8002914 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028de:	4b17      	ldr	r3, [pc, #92]	; (800293c <HAL_RCC_OscConfig+0x93c>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a16      	ldr	r2, [pc, #88]	; (800293c <HAL_RCC_OscConfig+0x93c>)
 80028e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028e8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028ea:	f7fe fa01 	bl	8000cf0 <HAL_GetTick>
 80028ee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028f2:	e009      	b.n	8002908 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028f4:	f7fe f9fc 	bl	8000cf0 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	2b64      	cmp	r3, #100	; 0x64
 8002902:	d901      	bls.n	8002908 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e3b1      	b.n	800306c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002908:	4b0c      	ldr	r3, [pc, #48]	; (800293c <HAL_RCC_OscConfig+0x93c>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002910:	2b00      	cmp	r3, #0
 8002912:	d0ef      	beq.n	80028f4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002914:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002918:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	2b01      	cmp	r3, #1
 8002922:	d10d      	bne.n	8002940 <HAL_RCC_OscConfig+0x940>
 8002924:	4b03      	ldr	r3, [pc, #12]	; (8002934 <HAL_RCC_OscConfig+0x934>)
 8002926:	6a1b      	ldr	r3, [r3, #32]
 8002928:	4a02      	ldr	r2, [pc, #8]	; (8002934 <HAL_RCC_OscConfig+0x934>)
 800292a:	f043 0301 	orr.w	r3, r3, #1
 800292e:	6213      	str	r3, [r2, #32]
 8002930:	e03c      	b.n	80029ac <HAL_RCC_OscConfig+0x9ac>
 8002932:	bf00      	nop
 8002934:	40021000 	.word	0x40021000
 8002938:	10908120 	.word	0x10908120
 800293c:	40007000 	.word	0x40007000
 8002940:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002944:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d10c      	bne.n	800296a <HAL_RCC_OscConfig+0x96a>
 8002950:	4bc1      	ldr	r3, [pc, #772]	; (8002c58 <HAL_RCC_OscConfig+0xc58>)
 8002952:	6a1b      	ldr	r3, [r3, #32]
 8002954:	4ac0      	ldr	r2, [pc, #768]	; (8002c58 <HAL_RCC_OscConfig+0xc58>)
 8002956:	f023 0301 	bic.w	r3, r3, #1
 800295a:	6213      	str	r3, [r2, #32]
 800295c:	4bbe      	ldr	r3, [pc, #760]	; (8002c58 <HAL_RCC_OscConfig+0xc58>)
 800295e:	6a1b      	ldr	r3, [r3, #32]
 8002960:	4abd      	ldr	r2, [pc, #756]	; (8002c58 <HAL_RCC_OscConfig+0xc58>)
 8002962:	f023 0304 	bic.w	r3, r3, #4
 8002966:	6213      	str	r3, [r2, #32]
 8002968:	e020      	b.n	80029ac <HAL_RCC_OscConfig+0x9ac>
 800296a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800296e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	2b05      	cmp	r3, #5
 8002978:	d10c      	bne.n	8002994 <HAL_RCC_OscConfig+0x994>
 800297a:	4bb7      	ldr	r3, [pc, #732]	; (8002c58 <HAL_RCC_OscConfig+0xc58>)
 800297c:	6a1b      	ldr	r3, [r3, #32]
 800297e:	4ab6      	ldr	r2, [pc, #728]	; (8002c58 <HAL_RCC_OscConfig+0xc58>)
 8002980:	f043 0304 	orr.w	r3, r3, #4
 8002984:	6213      	str	r3, [r2, #32]
 8002986:	4bb4      	ldr	r3, [pc, #720]	; (8002c58 <HAL_RCC_OscConfig+0xc58>)
 8002988:	6a1b      	ldr	r3, [r3, #32]
 800298a:	4ab3      	ldr	r2, [pc, #716]	; (8002c58 <HAL_RCC_OscConfig+0xc58>)
 800298c:	f043 0301 	orr.w	r3, r3, #1
 8002990:	6213      	str	r3, [r2, #32]
 8002992:	e00b      	b.n	80029ac <HAL_RCC_OscConfig+0x9ac>
 8002994:	4bb0      	ldr	r3, [pc, #704]	; (8002c58 <HAL_RCC_OscConfig+0xc58>)
 8002996:	6a1b      	ldr	r3, [r3, #32]
 8002998:	4aaf      	ldr	r2, [pc, #700]	; (8002c58 <HAL_RCC_OscConfig+0xc58>)
 800299a:	f023 0301 	bic.w	r3, r3, #1
 800299e:	6213      	str	r3, [r2, #32]
 80029a0:	4bad      	ldr	r3, [pc, #692]	; (8002c58 <HAL_RCC_OscConfig+0xc58>)
 80029a2:	6a1b      	ldr	r3, [r3, #32]
 80029a4:	4aac      	ldr	r2, [pc, #688]	; (8002c58 <HAL_RCC_OscConfig+0xc58>)
 80029a6:	f023 0304 	bic.w	r3, r3, #4
 80029aa:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	f000 8081 	beq.w	8002ac0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029be:	f7fe f997 	bl	8000cf0 <HAL_GetTick>
 80029c2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029c6:	e00b      	b.n	80029e0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029c8:	f7fe f992 	bl	8000cf0 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80029d8:	4293      	cmp	r3, r2
 80029da:	d901      	bls.n	80029e0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e345      	b.n	800306c <HAL_RCC_OscConfig+0x106c>
 80029e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029e4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80029e8:	2202      	movs	r2, #2
 80029ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029f0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	fa93 f2a3 	rbit	r2, r3
 80029fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029fe:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002a02:	601a      	str	r2, [r3, #0]
 8002a04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a08:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002a0c:	2202      	movs	r2, #2
 8002a0e:	601a      	str	r2, [r3, #0]
 8002a10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a14:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	fa93 f2a3 	rbit	r2, r3
 8002a1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a22:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002a26:	601a      	str	r2, [r3, #0]
  return result;
 8002a28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a2c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002a30:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a32:	fab3 f383 	clz	r3, r3
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	095b      	lsrs	r3, r3, #5
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	f043 0302 	orr.w	r3, r3, #2
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d102      	bne.n	8002a4c <HAL_RCC_OscConfig+0xa4c>
 8002a46:	4b84      	ldr	r3, [pc, #528]	; (8002c58 <HAL_RCC_OscConfig+0xc58>)
 8002a48:	6a1b      	ldr	r3, [r3, #32]
 8002a4a:	e013      	b.n	8002a74 <HAL_RCC_OscConfig+0xa74>
 8002a4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a50:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002a54:	2202      	movs	r2, #2
 8002a56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a5c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	fa93 f2a3 	rbit	r2, r3
 8002a66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a6a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002a6e:	601a      	str	r2, [r3, #0]
 8002a70:	4b79      	ldr	r3, [pc, #484]	; (8002c58 <HAL_RCC_OscConfig+0xc58>)
 8002a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a74:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a78:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002a7c:	2102      	movs	r1, #2
 8002a7e:	6011      	str	r1, [r2, #0]
 8002a80:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a84:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002a88:	6812      	ldr	r2, [r2, #0]
 8002a8a:	fa92 f1a2 	rbit	r1, r2
 8002a8e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a92:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002a96:	6011      	str	r1, [r2, #0]
  return result;
 8002a98:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a9c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002aa0:	6812      	ldr	r2, [r2, #0]
 8002aa2:	fab2 f282 	clz	r2, r2
 8002aa6:	b2d2      	uxtb	r2, r2
 8002aa8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002aac:	b2d2      	uxtb	r2, r2
 8002aae:	f002 021f 	and.w	r2, r2, #31
 8002ab2:	2101      	movs	r1, #1
 8002ab4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ab8:	4013      	ands	r3, r2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d084      	beq.n	80029c8 <HAL_RCC_OscConfig+0x9c8>
 8002abe:	e07f      	b.n	8002bc0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ac0:	f7fe f916 	bl	8000cf0 <HAL_GetTick>
 8002ac4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ac8:	e00b      	b.n	8002ae2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002aca:	f7fe f911 	bl	8000cf0 <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e2c4      	b.n	800306c <HAL_RCC_OscConfig+0x106c>
 8002ae2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ae6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002aea:	2202      	movs	r2, #2
 8002aec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002af2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	fa93 f2a3 	rbit	r2, r3
 8002afc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b00:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002b04:	601a      	str	r2, [r3, #0]
 8002b06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b0a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002b0e:	2202      	movs	r2, #2
 8002b10:	601a      	str	r2, [r3, #0]
 8002b12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b16:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	fa93 f2a3 	rbit	r2, r3
 8002b20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b24:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002b28:	601a      	str	r2, [r3, #0]
  return result;
 8002b2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b2e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002b32:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b34:	fab3 f383 	clz	r3, r3
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	095b      	lsrs	r3, r3, #5
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	f043 0302 	orr.w	r3, r3, #2
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d102      	bne.n	8002b4e <HAL_RCC_OscConfig+0xb4e>
 8002b48:	4b43      	ldr	r3, [pc, #268]	; (8002c58 <HAL_RCC_OscConfig+0xc58>)
 8002b4a:	6a1b      	ldr	r3, [r3, #32]
 8002b4c:	e013      	b.n	8002b76 <HAL_RCC_OscConfig+0xb76>
 8002b4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b52:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002b56:	2202      	movs	r2, #2
 8002b58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b5e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	fa93 f2a3 	rbit	r2, r3
 8002b68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b6c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002b70:	601a      	str	r2, [r3, #0]
 8002b72:	4b39      	ldr	r3, [pc, #228]	; (8002c58 <HAL_RCC_OscConfig+0xc58>)
 8002b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b76:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b7a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002b7e:	2102      	movs	r1, #2
 8002b80:	6011      	str	r1, [r2, #0]
 8002b82:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b86:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002b8a:	6812      	ldr	r2, [r2, #0]
 8002b8c:	fa92 f1a2 	rbit	r1, r2
 8002b90:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b94:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002b98:	6011      	str	r1, [r2, #0]
  return result;
 8002b9a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b9e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002ba2:	6812      	ldr	r2, [r2, #0]
 8002ba4:	fab2 f282 	clz	r2, r2
 8002ba8:	b2d2      	uxtb	r2, r2
 8002baa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bae:	b2d2      	uxtb	r2, r2
 8002bb0:	f002 021f 	and.w	r2, r2, #31
 8002bb4:	2101      	movs	r1, #1
 8002bb6:	fa01 f202 	lsl.w	r2, r1, r2
 8002bba:	4013      	ands	r3, r2
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d184      	bne.n	8002aca <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002bc0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d105      	bne.n	8002bd4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bc8:	4b23      	ldr	r3, [pc, #140]	; (8002c58 <HAL_RCC_OscConfig+0xc58>)
 8002bca:	69db      	ldr	r3, [r3, #28]
 8002bcc:	4a22      	ldr	r2, [pc, #136]	; (8002c58 <HAL_RCC_OscConfig+0xc58>)
 8002bce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bd2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bd8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	69db      	ldr	r3, [r3, #28]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f000 8242 	beq.w	800306a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002be6:	4b1c      	ldr	r3, [pc, #112]	; (8002c58 <HAL_RCC_OscConfig+0xc58>)
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f003 030c 	and.w	r3, r3, #12
 8002bee:	2b08      	cmp	r3, #8
 8002bf0:	f000 8213 	beq.w	800301a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bf8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	69db      	ldr	r3, [r3, #28]
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	f040 8162 	bne.w	8002eca <HAL_RCC_OscConfig+0xeca>
 8002c06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c0a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002c0e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002c12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c18:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	fa93 f2a3 	rbit	r2, r3
 8002c22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c26:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002c2a:	601a      	str	r2, [r3, #0]
  return result;
 8002c2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c30:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002c34:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c36:	fab3 f383 	clz	r3, r3
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c40:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	461a      	mov	r2, r3
 8002c48:	2300      	movs	r3, #0
 8002c4a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c4c:	f7fe f850 	bl	8000cf0 <HAL_GetTick>
 8002c50:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c54:	e00c      	b.n	8002c70 <HAL_RCC_OscConfig+0xc70>
 8002c56:	bf00      	nop
 8002c58:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c5c:	f7fe f848 	bl	8000cf0 <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d901      	bls.n	8002c70 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e1fd      	b.n	800306c <HAL_RCC_OscConfig+0x106c>
 8002c70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c74:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002c78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c82:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	fa93 f2a3 	rbit	r2, r3
 8002c8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c90:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002c94:	601a      	str	r2, [r3, #0]
  return result;
 8002c96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c9a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002c9e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ca0:	fab3 f383 	clz	r3, r3
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	095b      	lsrs	r3, r3, #5
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	f043 0301 	orr.w	r3, r3, #1
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d102      	bne.n	8002cba <HAL_RCC_OscConfig+0xcba>
 8002cb4:	4bb0      	ldr	r3, [pc, #704]	; (8002f78 <HAL_RCC_OscConfig+0xf78>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	e027      	b.n	8002d0a <HAL_RCC_OscConfig+0xd0a>
 8002cba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cbe:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002cc2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cc6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ccc:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	fa93 f2a3 	rbit	r2, r3
 8002cd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cda:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002cde:	601a      	str	r2, [r3, #0]
 8002ce0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ce4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002ce8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cec:	601a      	str	r2, [r3, #0]
 8002cee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cf2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	fa93 f2a3 	rbit	r2, r3
 8002cfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d00:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002d04:	601a      	str	r2, [r3, #0]
 8002d06:	4b9c      	ldr	r3, [pc, #624]	; (8002f78 <HAL_RCC_OscConfig+0xf78>)
 8002d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d0e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002d12:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002d16:	6011      	str	r1, [r2, #0]
 8002d18:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d1c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002d20:	6812      	ldr	r2, [r2, #0]
 8002d22:	fa92 f1a2 	rbit	r1, r2
 8002d26:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d2a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002d2e:	6011      	str	r1, [r2, #0]
  return result;
 8002d30:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d34:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002d38:	6812      	ldr	r2, [r2, #0]
 8002d3a:	fab2 f282 	clz	r2, r2
 8002d3e:	b2d2      	uxtb	r2, r2
 8002d40:	f042 0220 	orr.w	r2, r2, #32
 8002d44:	b2d2      	uxtb	r2, r2
 8002d46:	f002 021f 	and.w	r2, r2, #31
 8002d4a:	2101      	movs	r1, #1
 8002d4c:	fa01 f202 	lsl.w	r2, r1, r2
 8002d50:	4013      	ands	r3, r2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d182      	bne.n	8002c5c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d56:	4b88      	ldr	r3, [pc, #544]	; (8002f78 <HAL_RCC_OscConfig+0xf78>)
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002d5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002d6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d6e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	6a1b      	ldr	r3, [r3, #32]
 8002d76:	430b      	orrs	r3, r1
 8002d78:	497f      	ldr	r1, [pc, #508]	; (8002f78 <HAL_RCC_OscConfig+0xf78>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	604b      	str	r3, [r1, #4]
 8002d7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d82:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002d86:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002d8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d90:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	fa93 f2a3 	rbit	r2, r3
 8002d9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d9e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002da2:	601a      	str	r2, [r3, #0]
  return result;
 8002da4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002da8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002dac:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dae:	fab3 f383 	clz	r3, r3
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002db8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc4:	f7fd ff94 	bl	8000cf0 <HAL_GetTick>
 8002dc8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002dcc:	e009      	b.n	8002de2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dce:	f7fd ff8f 	bl	8000cf0 <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e144      	b.n	800306c <HAL_RCC_OscConfig+0x106c>
 8002de2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002de6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002dea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002dee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002df4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	fa93 f2a3 	rbit	r2, r3
 8002dfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e02:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002e06:	601a      	str	r2, [r3, #0]
  return result;
 8002e08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e0c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002e10:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e12:	fab3 f383 	clz	r3, r3
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	095b      	lsrs	r3, r3, #5
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	f043 0301 	orr.w	r3, r3, #1
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d102      	bne.n	8002e2c <HAL_RCC_OscConfig+0xe2c>
 8002e26:	4b54      	ldr	r3, [pc, #336]	; (8002f78 <HAL_RCC_OscConfig+0xf78>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	e027      	b.n	8002e7c <HAL_RCC_OscConfig+0xe7c>
 8002e2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e30:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002e34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e3e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	fa93 f2a3 	rbit	r2, r3
 8002e48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e4c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002e50:	601a      	str	r2, [r3, #0]
 8002e52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e56:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002e5a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e5e:	601a      	str	r2, [r3, #0]
 8002e60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e64:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	fa93 f2a3 	rbit	r2, r3
 8002e6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e72:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002e76:	601a      	str	r2, [r3, #0]
 8002e78:	4b3f      	ldr	r3, [pc, #252]	; (8002f78 <HAL_RCC_OscConfig+0xf78>)
 8002e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e80:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002e84:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002e88:	6011      	str	r1, [r2, #0]
 8002e8a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e8e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002e92:	6812      	ldr	r2, [r2, #0]
 8002e94:	fa92 f1a2 	rbit	r1, r2
 8002e98:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e9c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002ea0:	6011      	str	r1, [r2, #0]
  return result;
 8002ea2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ea6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002eaa:	6812      	ldr	r2, [r2, #0]
 8002eac:	fab2 f282 	clz	r2, r2
 8002eb0:	b2d2      	uxtb	r2, r2
 8002eb2:	f042 0220 	orr.w	r2, r2, #32
 8002eb6:	b2d2      	uxtb	r2, r2
 8002eb8:	f002 021f 	and.w	r2, r2, #31
 8002ebc:	2101      	movs	r1, #1
 8002ebe:	fa01 f202 	lsl.w	r2, r1, r2
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d082      	beq.n	8002dce <HAL_RCC_OscConfig+0xdce>
 8002ec8:	e0cf      	b.n	800306a <HAL_RCC_OscConfig+0x106a>
 8002eca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ece:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002ed2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ed6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002edc:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	fa93 f2a3 	rbit	r2, r3
 8002ee6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eea:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002eee:	601a      	str	r2, [r3, #0]
  return result;
 8002ef0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ef4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002ef8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002efa:	fab3 f383 	clz	r3, r3
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f04:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f10:	f7fd feee 	bl	8000cf0 <HAL_GetTick>
 8002f14:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f18:	e009      	b.n	8002f2e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f1a:	f7fd fee9 	bl	8000cf0 <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e09e      	b.n	800306c <HAL_RCC_OscConfig+0x106c>
 8002f2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f32:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002f36:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f40:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	fa93 f2a3 	rbit	r2, r3
 8002f4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f4e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002f52:	601a      	str	r2, [r3, #0]
  return result;
 8002f54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f58:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002f5c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f5e:	fab3 f383 	clz	r3, r3
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	095b      	lsrs	r3, r3, #5
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	f043 0301 	orr.w	r3, r3, #1
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d104      	bne.n	8002f7c <HAL_RCC_OscConfig+0xf7c>
 8002f72:	4b01      	ldr	r3, [pc, #4]	; (8002f78 <HAL_RCC_OscConfig+0xf78>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	e029      	b.n	8002fcc <HAL_RCC_OscConfig+0xfcc>
 8002f78:	40021000 	.word	0x40021000
 8002f7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f80:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002f84:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f8e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	fa93 f2a3 	rbit	r2, r3
 8002f98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f9c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002fa0:	601a      	str	r2, [r3, #0]
 8002fa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fa6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002faa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fae:	601a      	str	r2, [r3, #0]
 8002fb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fb4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	fa93 f2a3 	rbit	r2, r3
 8002fbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fc2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002fc6:	601a      	str	r2, [r3, #0]
 8002fc8:	4b2b      	ldr	r3, [pc, #172]	; (8003078 <HAL_RCC_OscConfig+0x1078>)
 8002fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fcc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002fd0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002fd4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002fd8:	6011      	str	r1, [r2, #0]
 8002fda:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002fde:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002fe2:	6812      	ldr	r2, [r2, #0]
 8002fe4:	fa92 f1a2 	rbit	r1, r2
 8002fe8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002fec:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002ff0:	6011      	str	r1, [r2, #0]
  return result;
 8002ff2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ff6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002ffa:	6812      	ldr	r2, [r2, #0]
 8002ffc:	fab2 f282 	clz	r2, r2
 8003000:	b2d2      	uxtb	r2, r2
 8003002:	f042 0220 	orr.w	r2, r2, #32
 8003006:	b2d2      	uxtb	r2, r2
 8003008:	f002 021f 	and.w	r2, r2, #31
 800300c:	2101      	movs	r1, #1
 800300e:	fa01 f202 	lsl.w	r2, r1, r2
 8003012:	4013      	ands	r3, r2
 8003014:	2b00      	cmp	r3, #0
 8003016:	d180      	bne.n	8002f1a <HAL_RCC_OscConfig+0xf1a>
 8003018:	e027      	b.n	800306a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800301a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800301e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	69db      	ldr	r3, [r3, #28]
 8003026:	2b01      	cmp	r3, #1
 8003028:	d101      	bne.n	800302e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e01e      	b.n	800306c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800302e:	4b12      	ldr	r3, [pc, #72]	; (8003078 <HAL_RCC_OscConfig+0x1078>)
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003036:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800303a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800303e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003042:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	6a1b      	ldr	r3, [r3, #32]
 800304a:	429a      	cmp	r2, r3
 800304c:	d10b      	bne.n	8003066 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800304e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003052:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003056:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800305a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003062:	429a      	cmp	r2, r3
 8003064:	d001      	beq.n	800306a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e000      	b.n	800306c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800306a:	2300      	movs	r3, #0
}
 800306c:	4618      	mov	r0, r3
 800306e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	40021000 	.word	0x40021000

0800307c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b09e      	sub	sp, #120	; 0x78
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003086:	2300      	movs	r3, #0
 8003088:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d101      	bne.n	8003094 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e162      	b.n	800335a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003094:	4b90      	ldr	r3, [pc, #576]	; (80032d8 <HAL_RCC_ClockConfig+0x25c>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0307 	and.w	r3, r3, #7
 800309c:	683a      	ldr	r2, [r7, #0]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d910      	bls.n	80030c4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030a2:	4b8d      	ldr	r3, [pc, #564]	; (80032d8 <HAL_RCC_ClockConfig+0x25c>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f023 0207 	bic.w	r2, r3, #7
 80030aa:	498b      	ldr	r1, [pc, #556]	; (80032d8 <HAL_RCC_ClockConfig+0x25c>)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030b2:	4b89      	ldr	r3, [pc, #548]	; (80032d8 <HAL_RCC_ClockConfig+0x25c>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0307 	and.w	r3, r3, #7
 80030ba:	683a      	ldr	r2, [r7, #0]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d001      	beq.n	80030c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e14a      	b.n	800335a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0302 	and.w	r3, r3, #2
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d008      	beq.n	80030e2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030d0:	4b82      	ldr	r3, [pc, #520]	; (80032dc <HAL_RCC_ClockConfig+0x260>)
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	497f      	ldr	r1, [pc, #508]	; (80032dc <HAL_RCC_ClockConfig+0x260>)
 80030de:	4313      	orrs	r3, r2
 80030e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	f000 80dc 	beq.w	80032a8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d13c      	bne.n	8003172 <HAL_RCC_ClockConfig+0xf6>
 80030f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030fc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003100:	fa93 f3a3 	rbit	r3, r3
 8003104:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003106:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003108:	fab3 f383 	clz	r3, r3
 800310c:	b2db      	uxtb	r3, r3
 800310e:	095b      	lsrs	r3, r3, #5
 8003110:	b2db      	uxtb	r3, r3
 8003112:	f043 0301 	orr.w	r3, r3, #1
 8003116:	b2db      	uxtb	r3, r3
 8003118:	2b01      	cmp	r3, #1
 800311a:	d102      	bne.n	8003122 <HAL_RCC_ClockConfig+0xa6>
 800311c:	4b6f      	ldr	r3, [pc, #444]	; (80032dc <HAL_RCC_ClockConfig+0x260>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	e00f      	b.n	8003142 <HAL_RCC_ClockConfig+0xc6>
 8003122:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003126:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003128:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800312a:	fa93 f3a3 	rbit	r3, r3
 800312e:	667b      	str	r3, [r7, #100]	; 0x64
 8003130:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003134:	663b      	str	r3, [r7, #96]	; 0x60
 8003136:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003138:	fa93 f3a3 	rbit	r3, r3
 800313c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800313e:	4b67      	ldr	r3, [pc, #412]	; (80032dc <HAL_RCC_ClockConfig+0x260>)
 8003140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003142:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003146:	65ba      	str	r2, [r7, #88]	; 0x58
 8003148:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800314a:	fa92 f2a2 	rbit	r2, r2
 800314e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003150:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003152:	fab2 f282 	clz	r2, r2
 8003156:	b2d2      	uxtb	r2, r2
 8003158:	f042 0220 	orr.w	r2, r2, #32
 800315c:	b2d2      	uxtb	r2, r2
 800315e:	f002 021f 	and.w	r2, r2, #31
 8003162:	2101      	movs	r1, #1
 8003164:	fa01 f202 	lsl.w	r2, r1, r2
 8003168:	4013      	ands	r3, r2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d17b      	bne.n	8003266 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e0f3      	b.n	800335a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	2b02      	cmp	r3, #2
 8003178:	d13c      	bne.n	80031f4 <HAL_RCC_ClockConfig+0x178>
 800317a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800317e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003180:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003182:	fa93 f3a3 	rbit	r3, r3
 8003186:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003188:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800318a:	fab3 f383 	clz	r3, r3
 800318e:	b2db      	uxtb	r3, r3
 8003190:	095b      	lsrs	r3, r3, #5
 8003192:	b2db      	uxtb	r3, r3
 8003194:	f043 0301 	orr.w	r3, r3, #1
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b01      	cmp	r3, #1
 800319c:	d102      	bne.n	80031a4 <HAL_RCC_ClockConfig+0x128>
 800319e:	4b4f      	ldr	r3, [pc, #316]	; (80032dc <HAL_RCC_ClockConfig+0x260>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	e00f      	b.n	80031c4 <HAL_RCC_ClockConfig+0x148>
 80031a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031a8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031ac:	fa93 f3a3 	rbit	r3, r3
 80031b0:	647b      	str	r3, [r7, #68]	; 0x44
 80031b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031b6:	643b      	str	r3, [r7, #64]	; 0x40
 80031b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031ba:	fa93 f3a3 	rbit	r3, r3
 80031be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031c0:	4b46      	ldr	r3, [pc, #280]	; (80032dc <HAL_RCC_ClockConfig+0x260>)
 80031c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031c8:	63ba      	str	r2, [r7, #56]	; 0x38
 80031ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031cc:	fa92 f2a2 	rbit	r2, r2
 80031d0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80031d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031d4:	fab2 f282 	clz	r2, r2
 80031d8:	b2d2      	uxtb	r2, r2
 80031da:	f042 0220 	orr.w	r2, r2, #32
 80031de:	b2d2      	uxtb	r2, r2
 80031e0:	f002 021f 	and.w	r2, r2, #31
 80031e4:	2101      	movs	r1, #1
 80031e6:	fa01 f202 	lsl.w	r2, r1, r2
 80031ea:	4013      	ands	r3, r2
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d13a      	bne.n	8003266 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e0b2      	b.n	800335a <HAL_RCC_ClockConfig+0x2de>
 80031f4:	2302      	movs	r3, #2
 80031f6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031fa:	fa93 f3a3 	rbit	r3, r3
 80031fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003202:	fab3 f383 	clz	r3, r3
 8003206:	b2db      	uxtb	r3, r3
 8003208:	095b      	lsrs	r3, r3, #5
 800320a:	b2db      	uxtb	r3, r3
 800320c:	f043 0301 	orr.w	r3, r3, #1
 8003210:	b2db      	uxtb	r3, r3
 8003212:	2b01      	cmp	r3, #1
 8003214:	d102      	bne.n	800321c <HAL_RCC_ClockConfig+0x1a0>
 8003216:	4b31      	ldr	r3, [pc, #196]	; (80032dc <HAL_RCC_ClockConfig+0x260>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	e00d      	b.n	8003238 <HAL_RCC_ClockConfig+0x1bc>
 800321c:	2302      	movs	r3, #2
 800321e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003222:	fa93 f3a3 	rbit	r3, r3
 8003226:	627b      	str	r3, [r7, #36]	; 0x24
 8003228:	2302      	movs	r3, #2
 800322a:	623b      	str	r3, [r7, #32]
 800322c:	6a3b      	ldr	r3, [r7, #32]
 800322e:	fa93 f3a3 	rbit	r3, r3
 8003232:	61fb      	str	r3, [r7, #28]
 8003234:	4b29      	ldr	r3, [pc, #164]	; (80032dc <HAL_RCC_ClockConfig+0x260>)
 8003236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003238:	2202      	movs	r2, #2
 800323a:	61ba      	str	r2, [r7, #24]
 800323c:	69ba      	ldr	r2, [r7, #24]
 800323e:	fa92 f2a2 	rbit	r2, r2
 8003242:	617a      	str	r2, [r7, #20]
  return result;
 8003244:	697a      	ldr	r2, [r7, #20]
 8003246:	fab2 f282 	clz	r2, r2
 800324a:	b2d2      	uxtb	r2, r2
 800324c:	f042 0220 	orr.w	r2, r2, #32
 8003250:	b2d2      	uxtb	r2, r2
 8003252:	f002 021f 	and.w	r2, r2, #31
 8003256:	2101      	movs	r1, #1
 8003258:	fa01 f202 	lsl.w	r2, r1, r2
 800325c:	4013      	ands	r3, r2
 800325e:	2b00      	cmp	r3, #0
 8003260:	d101      	bne.n	8003266 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e079      	b.n	800335a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003266:	4b1d      	ldr	r3, [pc, #116]	; (80032dc <HAL_RCC_ClockConfig+0x260>)
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f023 0203 	bic.w	r2, r3, #3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	491a      	ldr	r1, [pc, #104]	; (80032dc <HAL_RCC_ClockConfig+0x260>)
 8003274:	4313      	orrs	r3, r2
 8003276:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003278:	f7fd fd3a 	bl	8000cf0 <HAL_GetTick>
 800327c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800327e:	e00a      	b.n	8003296 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003280:	f7fd fd36 	bl	8000cf0 <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	f241 3288 	movw	r2, #5000	; 0x1388
 800328e:	4293      	cmp	r3, r2
 8003290:	d901      	bls.n	8003296 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e061      	b.n	800335a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003296:	4b11      	ldr	r3, [pc, #68]	; (80032dc <HAL_RCC_ClockConfig+0x260>)
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	f003 020c 	and.w	r2, r3, #12
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d1eb      	bne.n	8003280 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032a8:	4b0b      	ldr	r3, [pc, #44]	; (80032d8 <HAL_RCC_ClockConfig+0x25c>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0307 	and.w	r3, r3, #7
 80032b0:	683a      	ldr	r2, [r7, #0]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d214      	bcs.n	80032e0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032b6:	4b08      	ldr	r3, [pc, #32]	; (80032d8 <HAL_RCC_ClockConfig+0x25c>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f023 0207 	bic.w	r2, r3, #7
 80032be:	4906      	ldr	r1, [pc, #24]	; (80032d8 <HAL_RCC_ClockConfig+0x25c>)
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032c6:	4b04      	ldr	r3, [pc, #16]	; (80032d8 <HAL_RCC_ClockConfig+0x25c>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0307 	and.w	r3, r3, #7
 80032ce:	683a      	ldr	r2, [r7, #0]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d005      	beq.n	80032e0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e040      	b.n	800335a <HAL_RCC_ClockConfig+0x2de>
 80032d8:	40022000 	.word	0x40022000
 80032dc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0304 	and.w	r3, r3, #4
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d008      	beq.n	80032fe <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032ec:	4b1d      	ldr	r3, [pc, #116]	; (8003364 <HAL_RCC_ClockConfig+0x2e8>)
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	491a      	ldr	r1, [pc, #104]	; (8003364 <HAL_RCC_ClockConfig+0x2e8>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0308 	and.w	r3, r3, #8
 8003306:	2b00      	cmp	r3, #0
 8003308:	d009      	beq.n	800331e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800330a:	4b16      	ldr	r3, [pc, #88]	; (8003364 <HAL_RCC_ClockConfig+0x2e8>)
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	00db      	lsls	r3, r3, #3
 8003318:	4912      	ldr	r1, [pc, #72]	; (8003364 <HAL_RCC_ClockConfig+0x2e8>)
 800331a:	4313      	orrs	r3, r2
 800331c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800331e:	f000 f829 	bl	8003374 <HAL_RCC_GetSysClockFreq>
 8003322:	4601      	mov	r1, r0
 8003324:	4b0f      	ldr	r3, [pc, #60]	; (8003364 <HAL_RCC_ClockConfig+0x2e8>)
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800332c:	22f0      	movs	r2, #240	; 0xf0
 800332e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003330:	693a      	ldr	r2, [r7, #16]
 8003332:	fa92 f2a2 	rbit	r2, r2
 8003336:	60fa      	str	r2, [r7, #12]
  return result;
 8003338:	68fa      	ldr	r2, [r7, #12]
 800333a:	fab2 f282 	clz	r2, r2
 800333e:	b2d2      	uxtb	r2, r2
 8003340:	40d3      	lsrs	r3, r2
 8003342:	4a09      	ldr	r2, [pc, #36]	; (8003368 <HAL_RCC_ClockConfig+0x2ec>)
 8003344:	5cd3      	ldrb	r3, [r2, r3]
 8003346:	fa21 f303 	lsr.w	r3, r1, r3
 800334a:	4a08      	ldr	r2, [pc, #32]	; (800336c <HAL_RCC_ClockConfig+0x2f0>)
 800334c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800334e:	4b08      	ldr	r3, [pc, #32]	; (8003370 <HAL_RCC_ClockConfig+0x2f4>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4618      	mov	r0, r3
 8003354:	f7fd fc88 	bl	8000c68 <HAL_InitTick>
  
  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3778      	adds	r7, #120	; 0x78
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	40021000 	.word	0x40021000
 8003368:	080048b4 	.word	0x080048b4
 800336c:	20000038 	.word	0x20000038
 8003370:	2000003c 	.word	0x2000003c

08003374 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003374:	b480      	push	{r7}
 8003376:	b08b      	sub	sp, #44	; 0x2c
 8003378:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800337a:	2300      	movs	r3, #0
 800337c:	61fb      	str	r3, [r7, #28]
 800337e:	2300      	movs	r3, #0
 8003380:	61bb      	str	r3, [r7, #24]
 8003382:	2300      	movs	r3, #0
 8003384:	627b      	str	r3, [r7, #36]	; 0x24
 8003386:	2300      	movs	r3, #0
 8003388:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800338a:	2300      	movs	r3, #0
 800338c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800338e:	4b29      	ldr	r3, [pc, #164]	; (8003434 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	f003 030c 	and.w	r3, r3, #12
 800339a:	2b04      	cmp	r3, #4
 800339c:	d002      	beq.n	80033a4 <HAL_RCC_GetSysClockFreq+0x30>
 800339e:	2b08      	cmp	r3, #8
 80033a0:	d003      	beq.n	80033aa <HAL_RCC_GetSysClockFreq+0x36>
 80033a2:	e03c      	b.n	800341e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80033a4:	4b24      	ldr	r3, [pc, #144]	; (8003438 <HAL_RCC_GetSysClockFreq+0xc4>)
 80033a6:	623b      	str	r3, [r7, #32]
      break;
 80033a8:	e03c      	b.n	8003424 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80033b0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80033b4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b6:	68ba      	ldr	r2, [r7, #8]
 80033b8:	fa92 f2a2 	rbit	r2, r2
 80033bc:	607a      	str	r2, [r7, #4]
  return result;
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	fab2 f282 	clz	r2, r2
 80033c4:	b2d2      	uxtb	r2, r2
 80033c6:	40d3      	lsrs	r3, r2
 80033c8:	4a1c      	ldr	r2, [pc, #112]	; (800343c <HAL_RCC_GetSysClockFreq+0xc8>)
 80033ca:	5cd3      	ldrb	r3, [r2, r3]
 80033cc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80033ce:	4b19      	ldr	r3, [pc, #100]	; (8003434 <HAL_RCC_GetSysClockFreq+0xc0>)
 80033d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d2:	f003 030f 	and.w	r3, r3, #15
 80033d6:	220f      	movs	r2, #15
 80033d8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033da:	693a      	ldr	r2, [r7, #16]
 80033dc:	fa92 f2a2 	rbit	r2, r2
 80033e0:	60fa      	str	r2, [r7, #12]
  return result;
 80033e2:	68fa      	ldr	r2, [r7, #12]
 80033e4:	fab2 f282 	clz	r2, r2
 80033e8:	b2d2      	uxtb	r2, r2
 80033ea:	40d3      	lsrs	r3, r2
 80033ec:	4a14      	ldr	r2, [pc, #80]	; (8003440 <HAL_RCC_GetSysClockFreq+0xcc>)
 80033ee:	5cd3      	ldrb	r3, [r2, r3]
 80033f0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d008      	beq.n	800340e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80033fc:	4a0e      	ldr	r2, [pc, #56]	; (8003438 <HAL_RCC_GetSysClockFreq+0xc4>)
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	fbb2 f2f3 	udiv	r2, r2, r3
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	fb02 f303 	mul.w	r3, r2, r3
 800340a:	627b      	str	r3, [r7, #36]	; 0x24
 800340c:	e004      	b.n	8003418 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	4a0c      	ldr	r2, [pc, #48]	; (8003444 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003412:	fb02 f303 	mul.w	r3, r2, r3
 8003416:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341a:	623b      	str	r3, [r7, #32]
      break;
 800341c:	e002      	b.n	8003424 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800341e:	4b06      	ldr	r3, [pc, #24]	; (8003438 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003420:	623b      	str	r3, [r7, #32]
      break;
 8003422:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003424:	6a3b      	ldr	r3, [r7, #32]
}
 8003426:	4618      	mov	r0, r3
 8003428:	372c      	adds	r7, #44	; 0x2c
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr
 8003432:	bf00      	nop
 8003434:	40021000 	.word	0x40021000
 8003438:	007a1200 	.word	0x007a1200
 800343c:	080048c4 	.word	0x080048c4
 8003440:	080048d4 	.word	0x080048d4
 8003444:	003d0900 	.word	0x003d0900

08003448 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b092      	sub	sp, #72	; 0x48
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003450:	2300      	movs	r3, #0
 8003452:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003454:	2300      	movs	r3, #0
 8003456:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003458:	2300      	movs	r3, #0
 800345a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003466:	2b00      	cmp	r3, #0
 8003468:	f000 80d4 	beq.w	8003614 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800346c:	4b4e      	ldr	r3, [pc, #312]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800346e:	69db      	ldr	r3, [r3, #28]
 8003470:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d10e      	bne.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003478:	4b4b      	ldr	r3, [pc, #300]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800347a:	69db      	ldr	r3, [r3, #28]
 800347c:	4a4a      	ldr	r2, [pc, #296]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800347e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003482:	61d3      	str	r3, [r2, #28]
 8003484:	4b48      	ldr	r3, [pc, #288]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003486:	69db      	ldr	r3, [r3, #28]
 8003488:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800348c:	60bb      	str	r3, [r7, #8]
 800348e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003490:	2301      	movs	r3, #1
 8003492:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003496:	4b45      	ldr	r3, [pc, #276]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d118      	bne.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034a2:	4b42      	ldr	r3, [pc, #264]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a41      	ldr	r2, [pc, #260]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034ac:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034ae:	f7fd fc1f 	bl	8000cf0 <HAL_GetTick>
 80034b2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034b4:	e008      	b.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034b6:	f7fd fc1b 	bl	8000cf0 <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	2b64      	cmp	r3, #100	; 0x64
 80034c2:	d901      	bls.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e169      	b.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034c8:	4b38      	ldr	r3, [pc, #224]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d0f0      	beq.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80034d4:	4b34      	ldr	r3, [pc, #208]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034d6:	6a1b      	ldr	r3, [r3, #32]
 80034d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034dc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80034de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f000 8084 	beq.w	80035ee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d07c      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80034f4:	4b2c      	ldr	r3, [pc, #176]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034f6:	6a1b      	ldr	r3, [r3, #32]
 80034f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003502:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003506:	fa93 f3a3 	rbit	r3, r3
 800350a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800350c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800350e:	fab3 f383 	clz	r3, r3
 8003512:	b2db      	uxtb	r3, r3
 8003514:	461a      	mov	r2, r3
 8003516:	4b26      	ldr	r3, [pc, #152]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003518:	4413      	add	r3, r2
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	461a      	mov	r2, r3
 800351e:	2301      	movs	r3, #1
 8003520:	6013      	str	r3, [r2, #0]
 8003522:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003526:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800352a:	fa93 f3a3 	rbit	r3, r3
 800352e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003532:	fab3 f383 	clz	r3, r3
 8003536:	b2db      	uxtb	r3, r3
 8003538:	461a      	mov	r2, r3
 800353a:	4b1d      	ldr	r3, [pc, #116]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800353c:	4413      	add	r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	461a      	mov	r2, r3
 8003542:	2300      	movs	r3, #0
 8003544:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003546:	4a18      	ldr	r2, [pc, #96]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003548:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800354a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800354c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800354e:	f003 0301 	and.w	r3, r3, #1
 8003552:	2b00      	cmp	r3, #0
 8003554:	d04b      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003556:	f7fd fbcb 	bl	8000cf0 <HAL_GetTick>
 800355a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800355c:	e00a      	b.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800355e:	f7fd fbc7 	bl	8000cf0 <HAL_GetTick>
 8003562:	4602      	mov	r2, r0
 8003564:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	f241 3288 	movw	r2, #5000	; 0x1388
 800356c:	4293      	cmp	r3, r2
 800356e:	d901      	bls.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	e113      	b.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003574:	2302      	movs	r3, #2
 8003576:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800357a:	fa93 f3a3 	rbit	r3, r3
 800357e:	627b      	str	r3, [r7, #36]	; 0x24
 8003580:	2302      	movs	r3, #2
 8003582:	623b      	str	r3, [r7, #32]
 8003584:	6a3b      	ldr	r3, [r7, #32]
 8003586:	fa93 f3a3 	rbit	r3, r3
 800358a:	61fb      	str	r3, [r7, #28]
  return result;
 800358c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800358e:	fab3 f383 	clz	r3, r3
 8003592:	b2db      	uxtb	r3, r3
 8003594:	095b      	lsrs	r3, r3, #5
 8003596:	b2db      	uxtb	r3, r3
 8003598:	f043 0302 	orr.w	r3, r3, #2
 800359c:	b2db      	uxtb	r3, r3
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d108      	bne.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80035a2:	4b01      	ldr	r3, [pc, #4]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035a4:	6a1b      	ldr	r3, [r3, #32]
 80035a6:	e00d      	b.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80035a8:	40021000 	.word	0x40021000
 80035ac:	40007000 	.word	0x40007000
 80035b0:	10908100 	.word	0x10908100
 80035b4:	2302      	movs	r3, #2
 80035b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	fa93 f3a3 	rbit	r3, r3
 80035be:	617b      	str	r3, [r7, #20]
 80035c0:	4b78      	ldr	r3, [pc, #480]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80035c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c4:	2202      	movs	r2, #2
 80035c6:	613a      	str	r2, [r7, #16]
 80035c8:	693a      	ldr	r2, [r7, #16]
 80035ca:	fa92 f2a2 	rbit	r2, r2
 80035ce:	60fa      	str	r2, [r7, #12]
  return result;
 80035d0:	68fa      	ldr	r2, [r7, #12]
 80035d2:	fab2 f282 	clz	r2, r2
 80035d6:	b2d2      	uxtb	r2, r2
 80035d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035dc:	b2d2      	uxtb	r2, r2
 80035de:	f002 021f 	and.w	r2, r2, #31
 80035e2:	2101      	movs	r1, #1
 80035e4:	fa01 f202 	lsl.w	r2, r1, r2
 80035e8:	4013      	ands	r3, r2
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d0b7      	beq.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80035ee:	4b6d      	ldr	r3, [pc, #436]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80035f0:	6a1b      	ldr	r3, [r3, #32]
 80035f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	496a      	ldr	r1, [pc, #424]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003600:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003604:	2b01      	cmp	r3, #1
 8003606:	d105      	bne.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003608:	4b66      	ldr	r3, [pc, #408]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800360a:	69db      	ldr	r3, [r3, #28]
 800360c:	4a65      	ldr	r2, [pc, #404]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800360e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003612:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0301 	and.w	r3, r3, #1
 800361c:	2b00      	cmp	r3, #0
 800361e:	d008      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003620:	4b60      	ldr	r3, [pc, #384]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003624:	f023 0203 	bic.w	r2, r3, #3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	495d      	ldr	r1, [pc, #372]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800362e:	4313      	orrs	r3, r2
 8003630:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	2b00      	cmp	r3, #0
 800363c:	d008      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800363e:	4b59      	ldr	r3, [pc, #356]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003642:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	4956      	ldr	r1, [pc, #344]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800364c:	4313      	orrs	r3, r2
 800364e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0304 	and.w	r3, r3, #4
 8003658:	2b00      	cmp	r3, #0
 800365a:	d008      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800365c:	4b51      	ldr	r3, [pc, #324]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800365e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003660:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	691b      	ldr	r3, [r3, #16]
 8003668:	494e      	ldr	r1, [pc, #312]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800366a:	4313      	orrs	r3, r2
 800366c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0320 	and.w	r3, r3, #32
 8003676:	2b00      	cmp	r3, #0
 8003678:	d008      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800367a:	4b4a      	ldr	r3, [pc, #296]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800367c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367e:	f023 0210 	bic.w	r2, r3, #16
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	69db      	ldr	r3, [r3, #28]
 8003686:	4947      	ldr	r1, [pc, #284]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003688:	4313      	orrs	r3, r2
 800368a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d008      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003698:	4b42      	ldr	r3, [pc, #264]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a4:	493f      	ldr	r1, [pc, #252]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036a6:	4313      	orrs	r3, r2
 80036a8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d008      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80036b6:	4b3b      	ldr	r3, [pc, #236]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ba:	f023 0220 	bic.w	r2, r3, #32
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a1b      	ldr	r3, [r3, #32]
 80036c2:	4938      	ldr	r1, [pc, #224]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0308 	and.w	r3, r3, #8
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d008      	beq.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80036d4:	4b33      	ldr	r3, [pc, #204]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	695b      	ldr	r3, [r3, #20]
 80036e0:	4930      	ldr	r1, [pc, #192]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0310 	and.w	r3, r3, #16
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d008      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80036f2:	4b2c      	ldr	r3, [pc, #176]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	699b      	ldr	r3, [r3, #24]
 80036fe:	4929      	ldr	r1, [pc, #164]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003700:	4313      	orrs	r3, r2
 8003702:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800370c:	2b00      	cmp	r3, #0
 800370e:	d008      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003710:	4b24      	ldr	r3, [pc, #144]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371c:	4921      	ldr	r1, [pc, #132]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800371e:	4313      	orrs	r3, r2
 8003720:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800372a:	2b00      	cmp	r3, #0
 800372c:	d008      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800372e:	4b1d      	ldr	r3, [pc, #116]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003732:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373a:	491a      	ldr	r1, [pc, #104]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800373c:	4313      	orrs	r3, r2
 800373e:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003748:	2b00      	cmp	r3, #0
 800374a:	d008      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800374c:	4b15      	ldr	r3, [pc, #84]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800374e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003750:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003758:	4912      	ldr	r1, [pc, #72]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800375a:	4313      	orrs	r3, r2
 800375c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d008      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800376a:	4b0e      	ldr	r3, [pc, #56]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800376c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003776:	490b      	ldr	r1, [pc, #44]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003778:	4313      	orrs	r3, r2
 800377a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d008      	beq.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003788:	4b06      	ldr	r3, [pc, #24]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800378a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003794:	4903      	ldr	r1, [pc, #12]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003796:	4313      	orrs	r3, r2
 8003798:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800379a:	2300      	movs	r3, #0
}
 800379c:	4618      	mov	r0, r3
 800379e:	3748      	adds	r7, #72	; 0x48
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	40021000 	.word	0x40021000

080037a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d101      	bne.n	80037ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e09d      	b.n	80038f6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d108      	bne.n	80037d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037ca:	d009      	beq.n	80037e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	61da      	str	r2, [r3, #28]
 80037d2:	e005      	b.n	80037e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d106      	bne.n	8003800 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f7fd f8e8 	bl	80009d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2202      	movs	r2, #2
 8003804:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003816:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003820:	d902      	bls.n	8003828 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003822:	2300      	movs	r3, #0
 8003824:	60fb      	str	r3, [r7, #12]
 8003826:	e002      	b.n	800382e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003828:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800382c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003836:	d007      	beq.n	8003848 <HAL_SPI_Init+0xa0>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003840:	d002      	beq.n	8003848 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003858:	431a      	orrs	r2, r3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	f003 0302 	and.w	r3, r3, #2
 8003862:	431a      	orrs	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	695b      	ldr	r3, [r3, #20]
 8003868:	f003 0301 	and.w	r3, r3, #1
 800386c:	431a      	orrs	r2, r3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	699b      	ldr	r3, [r3, #24]
 8003872:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003876:	431a      	orrs	r2, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	69db      	ldr	r3, [r3, #28]
 800387c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003880:	431a      	orrs	r2, r3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a1b      	ldr	r3, [r3, #32]
 8003886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800388a:	ea42 0103 	orr.w	r1, r2, r3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003892:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	430a      	orrs	r2, r1
 800389c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	699b      	ldr	r3, [r3, #24]
 80038a2:	0c1b      	lsrs	r3, r3, #16
 80038a4:	f003 0204 	and.w	r2, r3, #4
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ac:	f003 0310 	and.w	r3, r3, #16
 80038b0:	431a      	orrs	r2, r3
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038b6:	f003 0308 	and.w	r3, r3, #8
 80038ba:	431a      	orrs	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80038c4:	ea42 0103 	orr.w	r1, r2, r3
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	430a      	orrs	r2, r1
 80038d4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	69da      	ldr	r2, [r3, #28]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038e4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3710      	adds	r7, #16
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
	...

08003900 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800390a:	2300      	movs	r3, #0
 800390c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d104      	bne.n	800391e <HAL_TIM_IC_Start_IT+0x1e>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800391a:	b2db      	uxtb	r3, r3
 800391c:	e023      	b.n	8003966 <HAL_TIM_IC_Start_IT+0x66>
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	2b04      	cmp	r3, #4
 8003922:	d104      	bne.n	800392e <HAL_TIM_IC_Start_IT+0x2e>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800392a:	b2db      	uxtb	r3, r3
 800392c:	e01b      	b.n	8003966 <HAL_TIM_IC_Start_IT+0x66>
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	2b08      	cmp	r3, #8
 8003932:	d104      	bne.n	800393e <HAL_TIM_IC_Start_IT+0x3e>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800393a:	b2db      	uxtb	r3, r3
 800393c:	e013      	b.n	8003966 <HAL_TIM_IC_Start_IT+0x66>
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	2b0c      	cmp	r3, #12
 8003942:	d104      	bne.n	800394e <HAL_TIM_IC_Start_IT+0x4e>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800394a:	b2db      	uxtb	r3, r3
 800394c:	e00b      	b.n	8003966 <HAL_TIM_IC_Start_IT+0x66>
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	2b10      	cmp	r3, #16
 8003952:	d104      	bne.n	800395e <HAL_TIM_IC_Start_IT+0x5e>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800395a:	b2db      	uxtb	r3, r3
 800395c:	e003      	b.n	8003966 <HAL_TIM_IC_Start_IT+0x66>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003964:	b2db      	uxtb	r3, r3
 8003966:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d104      	bne.n	8003978 <HAL_TIM_IC_Start_IT+0x78>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003974:	b2db      	uxtb	r3, r3
 8003976:	e013      	b.n	80039a0 <HAL_TIM_IC_Start_IT+0xa0>
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	2b04      	cmp	r3, #4
 800397c:	d104      	bne.n	8003988 <HAL_TIM_IC_Start_IT+0x88>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003984:	b2db      	uxtb	r3, r3
 8003986:	e00b      	b.n	80039a0 <HAL_TIM_IC_Start_IT+0xa0>
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	2b08      	cmp	r3, #8
 800398c:	d104      	bne.n	8003998 <HAL_TIM_IC_Start_IT+0x98>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003994:	b2db      	uxtb	r3, r3
 8003996:	e003      	b.n	80039a0 <HAL_TIM_IC_Start_IT+0xa0>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80039a2:	7bbb      	ldrb	r3, [r7, #14]
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d102      	bne.n	80039ae <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80039a8:	7b7b      	ldrb	r3, [r7, #13]
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d001      	beq.n	80039b2 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e0d8      	b.n	8003b64 <HAL_TIM_IC_Start_IT+0x264>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d104      	bne.n	80039c2 <HAL_TIM_IC_Start_IT+0xc2>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2202      	movs	r2, #2
 80039bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039c0:	e023      	b.n	8003a0a <HAL_TIM_IC_Start_IT+0x10a>
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	2b04      	cmp	r3, #4
 80039c6:	d104      	bne.n	80039d2 <HAL_TIM_IC_Start_IT+0xd2>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2202      	movs	r2, #2
 80039cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039d0:	e01b      	b.n	8003a0a <HAL_TIM_IC_Start_IT+0x10a>
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	2b08      	cmp	r3, #8
 80039d6:	d104      	bne.n	80039e2 <HAL_TIM_IC_Start_IT+0xe2>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2202      	movs	r2, #2
 80039dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039e0:	e013      	b.n	8003a0a <HAL_TIM_IC_Start_IT+0x10a>
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	2b0c      	cmp	r3, #12
 80039e6:	d104      	bne.n	80039f2 <HAL_TIM_IC_Start_IT+0xf2>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2202      	movs	r2, #2
 80039ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80039f0:	e00b      	b.n	8003a0a <HAL_TIM_IC_Start_IT+0x10a>
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	2b10      	cmp	r3, #16
 80039f6:	d104      	bne.n	8003a02 <HAL_TIM_IC_Start_IT+0x102>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2202      	movs	r2, #2
 80039fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a00:	e003      	b.n	8003a0a <HAL_TIM_IC_Start_IT+0x10a>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2202      	movs	r2, #2
 8003a06:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d104      	bne.n	8003a1a <HAL_TIM_IC_Start_IT+0x11a>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2202      	movs	r2, #2
 8003a14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a18:	e013      	b.n	8003a42 <HAL_TIM_IC_Start_IT+0x142>
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	2b04      	cmp	r3, #4
 8003a1e:	d104      	bne.n	8003a2a <HAL_TIM_IC_Start_IT+0x12a>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2202      	movs	r2, #2
 8003a24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a28:	e00b      	b.n	8003a42 <HAL_TIM_IC_Start_IT+0x142>
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	2b08      	cmp	r3, #8
 8003a2e:	d104      	bne.n	8003a3a <HAL_TIM_IC_Start_IT+0x13a>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2202      	movs	r2, #2
 8003a34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003a38:	e003      	b.n	8003a42 <HAL_TIM_IC_Start_IT+0x142>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2202      	movs	r2, #2
 8003a3e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	2b0c      	cmp	r3, #12
 8003a46:	d841      	bhi.n	8003acc <HAL_TIM_IC_Start_IT+0x1cc>
 8003a48:	a201      	add	r2, pc, #4	; (adr r2, 8003a50 <HAL_TIM_IC_Start_IT+0x150>)
 8003a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a4e:	bf00      	nop
 8003a50:	08003a85 	.word	0x08003a85
 8003a54:	08003acd 	.word	0x08003acd
 8003a58:	08003acd 	.word	0x08003acd
 8003a5c:	08003acd 	.word	0x08003acd
 8003a60:	08003a97 	.word	0x08003a97
 8003a64:	08003acd 	.word	0x08003acd
 8003a68:	08003acd 	.word	0x08003acd
 8003a6c:	08003acd 	.word	0x08003acd
 8003a70:	08003aa9 	.word	0x08003aa9
 8003a74:	08003acd 	.word	0x08003acd
 8003a78:	08003acd 	.word	0x08003acd
 8003a7c:	08003acd 	.word	0x08003acd
 8003a80:	08003abb 	.word	0x08003abb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	68da      	ldr	r2, [r3, #12]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f042 0202 	orr.w	r2, r2, #2
 8003a92:	60da      	str	r2, [r3, #12]
      break;
 8003a94:	e01d      	b.n	8003ad2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	68da      	ldr	r2, [r3, #12]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f042 0204 	orr.w	r2, r2, #4
 8003aa4:	60da      	str	r2, [r3, #12]
      break;
 8003aa6:	e014      	b.n	8003ad2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	68da      	ldr	r2, [r3, #12]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f042 0208 	orr.w	r2, r2, #8
 8003ab6:	60da      	str	r2, [r3, #12]
      break;
 8003ab8:	e00b      	b.n	8003ad2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	68da      	ldr	r2, [r3, #12]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f042 0210 	orr.w	r2, r2, #16
 8003ac8:	60da      	str	r2, [r3, #12]
      break;
 8003aca:	e002      	b.n	8003ad2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	73fb      	strb	r3, [r7, #15]
      break;
 8003ad0:	bf00      	nop
  }

  if (status == HAL_OK)
 8003ad2:	7bfb      	ldrb	r3, [r7, #15]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d144      	bne.n	8003b62 <HAL_TIM_IC_Start_IT+0x262>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2201      	movs	r2, #1
 8003ade:	6839      	ldr	r1, [r7, #0]
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f000 f9a0 	bl	8003e26 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a20      	ldr	r2, [pc, #128]	; (8003b6c <HAL_TIM_IC_Start_IT+0x26c>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d018      	beq.n	8003b22 <HAL_TIM_IC_Start_IT+0x222>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003af8:	d013      	beq.n	8003b22 <HAL_TIM_IC_Start_IT+0x222>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a1c      	ldr	r2, [pc, #112]	; (8003b70 <HAL_TIM_IC_Start_IT+0x270>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d00e      	beq.n	8003b22 <HAL_TIM_IC_Start_IT+0x222>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a1a      	ldr	r2, [pc, #104]	; (8003b74 <HAL_TIM_IC_Start_IT+0x274>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d009      	beq.n	8003b22 <HAL_TIM_IC_Start_IT+0x222>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a19      	ldr	r2, [pc, #100]	; (8003b78 <HAL_TIM_IC_Start_IT+0x278>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d004      	beq.n	8003b22 <HAL_TIM_IC_Start_IT+0x222>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a17      	ldr	r2, [pc, #92]	; (8003b7c <HAL_TIM_IC_Start_IT+0x27c>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d115      	bne.n	8003b4e <HAL_TIM_IC_Start_IT+0x24e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	689a      	ldr	r2, [r3, #8]
 8003b28:	4b15      	ldr	r3, [pc, #84]	; (8003b80 <HAL_TIM_IC_Start_IT+0x280>)
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	2b06      	cmp	r3, #6
 8003b32:	d015      	beq.n	8003b60 <HAL_TIM_IC_Start_IT+0x260>
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b3a:	d011      	beq.n	8003b60 <HAL_TIM_IC_Start_IT+0x260>
      {
        __HAL_TIM_ENABLE(htim);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f042 0201 	orr.w	r2, r2, #1
 8003b4a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b4c:	e008      	b.n	8003b60 <HAL_TIM_IC_Start_IT+0x260>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f042 0201 	orr.w	r2, r2, #1
 8003b5c:	601a      	str	r2, [r3, #0]
 8003b5e:	e000      	b.n	8003b62 <HAL_TIM_IC_Start_IT+0x262>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b60:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8003b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3710      	adds	r7, #16
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	40012c00 	.word	0x40012c00
 8003b70:	40000400 	.word	0x40000400
 8003b74:	40000800 	.word	0x40000800
 8003b78:	40013400 	.word	0x40013400
 8003b7c:	40014000 	.word	0x40014000
 8003b80:	00010007 	.word	0x00010007

08003b84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b082      	sub	sp, #8
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	f003 0302 	and.w	r3, r3, #2
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d122      	bne.n	8003be0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	f003 0302 	and.w	r3, r3, #2
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	d11b      	bne.n	8003be0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f06f 0202 	mvn.w	r2, #2
 8003bb0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	699b      	ldr	r3, [r3, #24]
 8003bbe:	f003 0303 	and.w	r3, r3, #3
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d003      	beq.n	8003bce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 f90f 	bl	8003dea <HAL_TIM_IC_CaptureCallback>
 8003bcc:	e005      	b.n	8003bda <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f000 f901 	bl	8003dd6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f000 f912 	bl	8003dfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	691b      	ldr	r3, [r3, #16]
 8003be6:	f003 0304 	and.w	r3, r3, #4
 8003bea:	2b04      	cmp	r3, #4
 8003bec:	d122      	bne.n	8003c34 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	f003 0304 	and.w	r3, r3, #4
 8003bf8:	2b04      	cmp	r3, #4
 8003bfa:	d11b      	bne.n	8003c34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f06f 0204 	mvn.w	r2, #4
 8003c04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2202      	movs	r2, #2
 8003c0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	699b      	ldr	r3, [r3, #24]
 8003c12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d003      	beq.n	8003c22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 f8e5 	bl	8003dea <HAL_TIM_IC_CaptureCallback>
 8003c20:	e005      	b.n	8003c2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f000 f8d7 	bl	8003dd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f000 f8e8 	bl	8003dfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	f003 0308 	and.w	r3, r3, #8
 8003c3e:	2b08      	cmp	r3, #8
 8003c40:	d122      	bne.n	8003c88 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	f003 0308 	and.w	r3, r3, #8
 8003c4c:	2b08      	cmp	r3, #8
 8003c4e:	d11b      	bne.n	8003c88 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f06f 0208 	mvn.w	r2, #8
 8003c58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2204      	movs	r2, #4
 8003c5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	69db      	ldr	r3, [r3, #28]
 8003c66:	f003 0303 	and.w	r3, r3, #3
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d003      	beq.n	8003c76 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 f8bb 	bl	8003dea <HAL_TIM_IC_CaptureCallback>
 8003c74:	e005      	b.n	8003c82 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f000 f8ad 	bl	8003dd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f000 f8be 	bl	8003dfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	f003 0310 	and.w	r3, r3, #16
 8003c92:	2b10      	cmp	r3, #16
 8003c94:	d122      	bne.n	8003cdc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	f003 0310 	and.w	r3, r3, #16
 8003ca0:	2b10      	cmp	r3, #16
 8003ca2:	d11b      	bne.n	8003cdc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f06f 0210 	mvn.w	r2, #16
 8003cac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2208      	movs	r2, #8
 8003cb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	69db      	ldr	r3, [r3, #28]
 8003cba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d003      	beq.n	8003cca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f000 f891 	bl	8003dea <HAL_TIM_IC_CaptureCallback>
 8003cc8:	e005      	b.n	8003cd6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 f883 	bl	8003dd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f000 f894 	bl	8003dfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	f003 0301 	and.w	r3, r3, #1
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d10e      	bne.n	8003d08 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	f003 0301 	and.w	r3, r3, #1
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d107      	bne.n	8003d08 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f06f 0201 	mvn.w	r2, #1
 8003d00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 f85d 	bl	8003dc2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d12:	2b80      	cmp	r3, #128	; 0x80
 8003d14:	d10e      	bne.n	8003d34 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d20:	2b80      	cmp	r3, #128	; 0x80
 8003d22:	d107      	bne.n	8003d34 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f000 f8a8 	bl	8003e84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d42:	d10e      	bne.n	8003d62 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d4e:	2b80      	cmp	r3, #128	; 0x80
 8003d50:	d107      	bne.n	8003d62 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003d5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f000 f89b 	bl	8003e98 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	691b      	ldr	r3, [r3, #16]
 8003d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d6c:	2b40      	cmp	r3, #64	; 0x40
 8003d6e:	d10e      	bne.n	8003d8e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d7a:	2b40      	cmp	r3, #64	; 0x40
 8003d7c:	d107      	bne.n	8003d8e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f000 f842 	bl	8003e12 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	691b      	ldr	r3, [r3, #16]
 8003d94:	f003 0320 	and.w	r3, r3, #32
 8003d98:	2b20      	cmp	r3, #32
 8003d9a:	d10e      	bne.n	8003dba <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	f003 0320 	and.w	r3, r3, #32
 8003da6:	2b20      	cmp	r3, #32
 8003da8:	d107      	bne.n	8003dba <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f06f 0220 	mvn.w	r2, #32
 8003db2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f000 f85b 	bl	8003e70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003dba:	bf00      	nop
 8003dbc:	3708      	adds	r7, #8
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}

08003dc2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003dc2:	b480      	push	{r7}
 8003dc4:	b083      	sub	sp, #12
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003dca:	bf00      	nop
 8003dcc:	370c      	adds	r7, #12
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr

08003dd6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003dd6:	b480      	push	{r7}
 8003dd8:	b083      	sub	sp, #12
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003dde:	bf00      	nop
 8003de0:	370c      	adds	r7, #12
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr

08003dea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003dea:	b480      	push	{r7}
 8003dec:	b083      	sub	sp, #12
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003df2:	bf00      	nop
 8003df4:	370c      	adds	r7, #12
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr

08003dfe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003dfe:	b480      	push	{r7}
 8003e00:	b083      	sub	sp, #12
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e06:	bf00      	nop
 8003e08:	370c      	adds	r7, #12
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr

08003e12 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e12:	b480      	push	{r7}
 8003e14:	b083      	sub	sp, #12
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e1a:	bf00      	nop
 8003e1c:	370c      	adds	r7, #12
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr

08003e26 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e26:	b480      	push	{r7}
 8003e28:	b087      	sub	sp, #28
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	60f8      	str	r0, [r7, #12]
 8003e2e:	60b9      	str	r1, [r7, #8]
 8003e30:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	f003 031f 	and.w	r3, r3, #31
 8003e38:	2201      	movs	r2, #1
 8003e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6a1a      	ldr	r2, [r3, #32]
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	43db      	mvns	r3, r3
 8003e48:	401a      	ands	r2, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6a1a      	ldr	r2, [r3, #32]
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	f003 031f 	and.w	r3, r3, #31
 8003e58:	6879      	ldr	r1, [r7, #4]
 8003e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e5e:	431a      	orrs	r2, r3
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	621a      	str	r2, [r3, #32]
}
 8003e64:	bf00      	nop
 8003e66:	371c      	adds	r7, #28
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr

08003e70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e78:	bf00      	nop
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr

08003e84 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e8c:	bf00      	nop
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003ea0:	bf00      	nop
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b085      	sub	sp, #20
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003eb4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003eb8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003ec0:	b29a      	uxth	r2, r3
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	43db      	mvns	r3, r3
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	4013      	ands	r3, r2
 8003ecc:	b29a      	uxth	r2, r3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3714      	adds	r7, #20
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr

08003ee2 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	f107 0014 	add.w	r0, r7, #20
 8003ef0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	370c      	adds	r7, #12
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	b004      	add	sp, #16
 8003f22:	4770      	bx	lr

08003f24 <siprintf>:
 8003f24:	b40e      	push	{r1, r2, r3}
 8003f26:	b500      	push	{lr}
 8003f28:	b09c      	sub	sp, #112	; 0x70
 8003f2a:	ab1d      	add	r3, sp, #116	; 0x74
 8003f2c:	9002      	str	r0, [sp, #8]
 8003f2e:	9006      	str	r0, [sp, #24]
 8003f30:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003f34:	4809      	ldr	r0, [pc, #36]	; (8003f5c <siprintf+0x38>)
 8003f36:	9107      	str	r1, [sp, #28]
 8003f38:	9104      	str	r1, [sp, #16]
 8003f3a:	4909      	ldr	r1, [pc, #36]	; (8003f60 <siprintf+0x3c>)
 8003f3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f40:	9105      	str	r1, [sp, #20]
 8003f42:	6800      	ldr	r0, [r0, #0]
 8003f44:	9301      	str	r3, [sp, #4]
 8003f46:	a902      	add	r1, sp, #8
 8003f48:	f000 f992 	bl	8004270 <_svfiprintf_r>
 8003f4c:	9b02      	ldr	r3, [sp, #8]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	701a      	strb	r2, [r3, #0]
 8003f52:	b01c      	add	sp, #112	; 0x70
 8003f54:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f58:	b003      	add	sp, #12
 8003f5a:	4770      	bx	lr
 8003f5c:	20000090 	.word	0x20000090
 8003f60:	ffff0208 	.word	0xffff0208

08003f64 <memset>:
 8003f64:	4402      	add	r2, r0
 8003f66:	4603      	mov	r3, r0
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d100      	bne.n	8003f6e <memset+0xa>
 8003f6c:	4770      	bx	lr
 8003f6e:	f803 1b01 	strb.w	r1, [r3], #1
 8003f72:	e7f9      	b.n	8003f68 <memset+0x4>

08003f74 <__errno>:
 8003f74:	4b01      	ldr	r3, [pc, #4]	; (8003f7c <__errno+0x8>)
 8003f76:	6818      	ldr	r0, [r3, #0]
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	20000090 	.word	0x20000090

08003f80 <__libc_init_array>:
 8003f80:	b570      	push	{r4, r5, r6, lr}
 8003f82:	4d0d      	ldr	r5, [pc, #52]	; (8003fb8 <__libc_init_array+0x38>)
 8003f84:	4c0d      	ldr	r4, [pc, #52]	; (8003fbc <__libc_init_array+0x3c>)
 8003f86:	1b64      	subs	r4, r4, r5
 8003f88:	10a4      	asrs	r4, r4, #2
 8003f8a:	2600      	movs	r6, #0
 8003f8c:	42a6      	cmp	r6, r4
 8003f8e:	d109      	bne.n	8003fa4 <__libc_init_array+0x24>
 8003f90:	4d0b      	ldr	r5, [pc, #44]	; (8003fc0 <__libc_init_array+0x40>)
 8003f92:	4c0c      	ldr	r4, [pc, #48]	; (8003fc4 <__libc_init_array+0x44>)
 8003f94:	f000 fc6a 	bl	800486c <_init>
 8003f98:	1b64      	subs	r4, r4, r5
 8003f9a:	10a4      	asrs	r4, r4, #2
 8003f9c:	2600      	movs	r6, #0
 8003f9e:	42a6      	cmp	r6, r4
 8003fa0:	d105      	bne.n	8003fae <__libc_init_array+0x2e>
 8003fa2:	bd70      	pop	{r4, r5, r6, pc}
 8003fa4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fa8:	4798      	blx	r3
 8003faa:	3601      	adds	r6, #1
 8003fac:	e7ee      	b.n	8003f8c <__libc_init_array+0xc>
 8003fae:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fb2:	4798      	blx	r3
 8003fb4:	3601      	adds	r6, #1
 8003fb6:	e7f2      	b.n	8003f9e <__libc_init_array+0x1e>
 8003fb8:	08004918 	.word	0x08004918
 8003fbc:	08004918 	.word	0x08004918
 8003fc0:	08004918 	.word	0x08004918
 8003fc4:	0800491c 	.word	0x0800491c

08003fc8 <__retarget_lock_acquire_recursive>:
 8003fc8:	4770      	bx	lr

08003fca <__retarget_lock_release_recursive>:
 8003fca:	4770      	bx	lr

08003fcc <_free_r>:
 8003fcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003fce:	2900      	cmp	r1, #0
 8003fd0:	d044      	beq.n	800405c <_free_r+0x90>
 8003fd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003fd6:	9001      	str	r0, [sp, #4]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	f1a1 0404 	sub.w	r4, r1, #4
 8003fde:	bfb8      	it	lt
 8003fe0:	18e4      	addlt	r4, r4, r3
 8003fe2:	f000 f8df 	bl	80041a4 <__malloc_lock>
 8003fe6:	4a1e      	ldr	r2, [pc, #120]	; (8004060 <_free_r+0x94>)
 8003fe8:	9801      	ldr	r0, [sp, #4]
 8003fea:	6813      	ldr	r3, [r2, #0]
 8003fec:	b933      	cbnz	r3, 8003ffc <_free_r+0x30>
 8003fee:	6063      	str	r3, [r4, #4]
 8003ff0:	6014      	str	r4, [r2, #0]
 8003ff2:	b003      	add	sp, #12
 8003ff4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003ff8:	f000 b8da 	b.w	80041b0 <__malloc_unlock>
 8003ffc:	42a3      	cmp	r3, r4
 8003ffe:	d908      	bls.n	8004012 <_free_r+0x46>
 8004000:	6825      	ldr	r5, [r4, #0]
 8004002:	1961      	adds	r1, r4, r5
 8004004:	428b      	cmp	r3, r1
 8004006:	bf01      	itttt	eq
 8004008:	6819      	ldreq	r1, [r3, #0]
 800400a:	685b      	ldreq	r3, [r3, #4]
 800400c:	1949      	addeq	r1, r1, r5
 800400e:	6021      	streq	r1, [r4, #0]
 8004010:	e7ed      	b.n	8003fee <_free_r+0x22>
 8004012:	461a      	mov	r2, r3
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	b10b      	cbz	r3, 800401c <_free_r+0x50>
 8004018:	42a3      	cmp	r3, r4
 800401a:	d9fa      	bls.n	8004012 <_free_r+0x46>
 800401c:	6811      	ldr	r1, [r2, #0]
 800401e:	1855      	adds	r5, r2, r1
 8004020:	42a5      	cmp	r5, r4
 8004022:	d10b      	bne.n	800403c <_free_r+0x70>
 8004024:	6824      	ldr	r4, [r4, #0]
 8004026:	4421      	add	r1, r4
 8004028:	1854      	adds	r4, r2, r1
 800402a:	42a3      	cmp	r3, r4
 800402c:	6011      	str	r1, [r2, #0]
 800402e:	d1e0      	bne.n	8003ff2 <_free_r+0x26>
 8004030:	681c      	ldr	r4, [r3, #0]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	6053      	str	r3, [r2, #4]
 8004036:	440c      	add	r4, r1
 8004038:	6014      	str	r4, [r2, #0]
 800403a:	e7da      	b.n	8003ff2 <_free_r+0x26>
 800403c:	d902      	bls.n	8004044 <_free_r+0x78>
 800403e:	230c      	movs	r3, #12
 8004040:	6003      	str	r3, [r0, #0]
 8004042:	e7d6      	b.n	8003ff2 <_free_r+0x26>
 8004044:	6825      	ldr	r5, [r4, #0]
 8004046:	1961      	adds	r1, r4, r5
 8004048:	428b      	cmp	r3, r1
 800404a:	bf04      	itt	eq
 800404c:	6819      	ldreq	r1, [r3, #0]
 800404e:	685b      	ldreq	r3, [r3, #4]
 8004050:	6063      	str	r3, [r4, #4]
 8004052:	bf04      	itt	eq
 8004054:	1949      	addeq	r1, r1, r5
 8004056:	6021      	streq	r1, [r4, #0]
 8004058:	6054      	str	r4, [r2, #4]
 800405a:	e7ca      	b.n	8003ff2 <_free_r+0x26>
 800405c:	b003      	add	sp, #12
 800405e:	bd30      	pop	{r4, r5, pc}
 8004060:	20000634 	.word	0x20000634

08004064 <sbrk_aligned>:
 8004064:	b570      	push	{r4, r5, r6, lr}
 8004066:	4e0e      	ldr	r6, [pc, #56]	; (80040a0 <sbrk_aligned+0x3c>)
 8004068:	460c      	mov	r4, r1
 800406a:	6831      	ldr	r1, [r6, #0]
 800406c:	4605      	mov	r5, r0
 800406e:	b911      	cbnz	r1, 8004076 <sbrk_aligned+0x12>
 8004070:	f000 fba6 	bl	80047c0 <_sbrk_r>
 8004074:	6030      	str	r0, [r6, #0]
 8004076:	4621      	mov	r1, r4
 8004078:	4628      	mov	r0, r5
 800407a:	f000 fba1 	bl	80047c0 <_sbrk_r>
 800407e:	1c43      	adds	r3, r0, #1
 8004080:	d00a      	beq.n	8004098 <sbrk_aligned+0x34>
 8004082:	1cc4      	adds	r4, r0, #3
 8004084:	f024 0403 	bic.w	r4, r4, #3
 8004088:	42a0      	cmp	r0, r4
 800408a:	d007      	beq.n	800409c <sbrk_aligned+0x38>
 800408c:	1a21      	subs	r1, r4, r0
 800408e:	4628      	mov	r0, r5
 8004090:	f000 fb96 	bl	80047c0 <_sbrk_r>
 8004094:	3001      	adds	r0, #1
 8004096:	d101      	bne.n	800409c <sbrk_aligned+0x38>
 8004098:	f04f 34ff 	mov.w	r4, #4294967295
 800409c:	4620      	mov	r0, r4
 800409e:	bd70      	pop	{r4, r5, r6, pc}
 80040a0:	20000638 	.word	0x20000638

080040a4 <_malloc_r>:
 80040a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80040a8:	1ccd      	adds	r5, r1, #3
 80040aa:	f025 0503 	bic.w	r5, r5, #3
 80040ae:	3508      	adds	r5, #8
 80040b0:	2d0c      	cmp	r5, #12
 80040b2:	bf38      	it	cc
 80040b4:	250c      	movcc	r5, #12
 80040b6:	2d00      	cmp	r5, #0
 80040b8:	4607      	mov	r7, r0
 80040ba:	db01      	blt.n	80040c0 <_malloc_r+0x1c>
 80040bc:	42a9      	cmp	r1, r5
 80040be:	d905      	bls.n	80040cc <_malloc_r+0x28>
 80040c0:	230c      	movs	r3, #12
 80040c2:	603b      	str	r3, [r7, #0]
 80040c4:	2600      	movs	r6, #0
 80040c6:	4630      	mov	r0, r6
 80040c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80040cc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80041a0 <_malloc_r+0xfc>
 80040d0:	f000 f868 	bl	80041a4 <__malloc_lock>
 80040d4:	f8d8 3000 	ldr.w	r3, [r8]
 80040d8:	461c      	mov	r4, r3
 80040da:	bb5c      	cbnz	r4, 8004134 <_malloc_r+0x90>
 80040dc:	4629      	mov	r1, r5
 80040de:	4638      	mov	r0, r7
 80040e0:	f7ff ffc0 	bl	8004064 <sbrk_aligned>
 80040e4:	1c43      	adds	r3, r0, #1
 80040e6:	4604      	mov	r4, r0
 80040e8:	d155      	bne.n	8004196 <_malloc_r+0xf2>
 80040ea:	f8d8 4000 	ldr.w	r4, [r8]
 80040ee:	4626      	mov	r6, r4
 80040f0:	2e00      	cmp	r6, #0
 80040f2:	d145      	bne.n	8004180 <_malloc_r+0xdc>
 80040f4:	2c00      	cmp	r4, #0
 80040f6:	d048      	beq.n	800418a <_malloc_r+0xe6>
 80040f8:	6823      	ldr	r3, [r4, #0]
 80040fa:	4631      	mov	r1, r6
 80040fc:	4638      	mov	r0, r7
 80040fe:	eb04 0903 	add.w	r9, r4, r3
 8004102:	f000 fb5d 	bl	80047c0 <_sbrk_r>
 8004106:	4581      	cmp	r9, r0
 8004108:	d13f      	bne.n	800418a <_malloc_r+0xe6>
 800410a:	6821      	ldr	r1, [r4, #0]
 800410c:	1a6d      	subs	r5, r5, r1
 800410e:	4629      	mov	r1, r5
 8004110:	4638      	mov	r0, r7
 8004112:	f7ff ffa7 	bl	8004064 <sbrk_aligned>
 8004116:	3001      	adds	r0, #1
 8004118:	d037      	beq.n	800418a <_malloc_r+0xe6>
 800411a:	6823      	ldr	r3, [r4, #0]
 800411c:	442b      	add	r3, r5
 800411e:	6023      	str	r3, [r4, #0]
 8004120:	f8d8 3000 	ldr.w	r3, [r8]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d038      	beq.n	800419a <_malloc_r+0xf6>
 8004128:	685a      	ldr	r2, [r3, #4]
 800412a:	42a2      	cmp	r2, r4
 800412c:	d12b      	bne.n	8004186 <_malloc_r+0xe2>
 800412e:	2200      	movs	r2, #0
 8004130:	605a      	str	r2, [r3, #4]
 8004132:	e00f      	b.n	8004154 <_malloc_r+0xb0>
 8004134:	6822      	ldr	r2, [r4, #0]
 8004136:	1b52      	subs	r2, r2, r5
 8004138:	d41f      	bmi.n	800417a <_malloc_r+0xd6>
 800413a:	2a0b      	cmp	r2, #11
 800413c:	d917      	bls.n	800416e <_malloc_r+0xca>
 800413e:	1961      	adds	r1, r4, r5
 8004140:	42a3      	cmp	r3, r4
 8004142:	6025      	str	r5, [r4, #0]
 8004144:	bf18      	it	ne
 8004146:	6059      	strne	r1, [r3, #4]
 8004148:	6863      	ldr	r3, [r4, #4]
 800414a:	bf08      	it	eq
 800414c:	f8c8 1000 	streq.w	r1, [r8]
 8004150:	5162      	str	r2, [r4, r5]
 8004152:	604b      	str	r3, [r1, #4]
 8004154:	4638      	mov	r0, r7
 8004156:	f104 060b 	add.w	r6, r4, #11
 800415a:	f000 f829 	bl	80041b0 <__malloc_unlock>
 800415e:	f026 0607 	bic.w	r6, r6, #7
 8004162:	1d23      	adds	r3, r4, #4
 8004164:	1af2      	subs	r2, r6, r3
 8004166:	d0ae      	beq.n	80040c6 <_malloc_r+0x22>
 8004168:	1b9b      	subs	r3, r3, r6
 800416a:	50a3      	str	r3, [r4, r2]
 800416c:	e7ab      	b.n	80040c6 <_malloc_r+0x22>
 800416e:	42a3      	cmp	r3, r4
 8004170:	6862      	ldr	r2, [r4, #4]
 8004172:	d1dd      	bne.n	8004130 <_malloc_r+0x8c>
 8004174:	f8c8 2000 	str.w	r2, [r8]
 8004178:	e7ec      	b.n	8004154 <_malloc_r+0xb0>
 800417a:	4623      	mov	r3, r4
 800417c:	6864      	ldr	r4, [r4, #4]
 800417e:	e7ac      	b.n	80040da <_malloc_r+0x36>
 8004180:	4634      	mov	r4, r6
 8004182:	6876      	ldr	r6, [r6, #4]
 8004184:	e7b4      	b.n	80040f0 <_malloc_r+0x4c>
 8004186:	4613      	mov	r3, r2
 8004188:	e7cc      	b.n	8004124 <_malloc_r+0x80>
 800418a:	230c      	movs	r3, #12
 800418c:	603b      	str	r3, [r7, #0]
 800418e:	4638      	mov	r0, r7
 8004190:	f000 f80e 	bl	80041b0 <__malloc_unlock>
 8004194:	e797      	b.n	80040c6 <_malloc_r+0x22>
 8004196:	6025      	str	r5, [r4, #0]
 8004198:	e7dc      	b.n	8004154 <_malloc_r+0xb0>
 800419a:	605b      	str	r3, [r3, #4]
 800419c:	deff      	udf	#255	; 0xff
 800419e:	bf00      	nop
 80041a0:	20000634 	.word	0x20000634

080041a4 <__malloc_lock>:
 80041a4:	4801      	ldr	r0, [pc, #4]	; (80041ac <__malloc_lock+0x8>)
 80041a6:	f7ff bf0f 	b.w	8003fc8 <__retarget_lock_acquire_recursive>
 80041aa:	bf00      	nop
 80041ac:	20000630 	.word	0x20000630

080041b0 <__malloc_unlock>:
 80041b0:	4801      	ldr	r0, [pc, #4]	; (80041b8 <__malloc_unlock+0x8>)
 80041b2:	f7ff bf0a 	b.w	8003fca <__retarget_lock_release_recursive>
 80041b6:	bf00      	nop
 80041b8:	20000630 	.word	0x20000630

080041bc <__ssputs_r>:
 80041bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041c0:	688e      	ldr	r6, [r1, #8]
 80041c2:	461f      	mov	r7, r3
 80041c4:	42be      	cmp	r6, r7
 80041c6:	680b      	ldr	r3, [r1, #0]
 80041c8:	4682      	mov	sl, r0
 80041ca:	460c      	mov	r4, r1
 80041cc:	4690      	mov	r8, r2
 80041ce:	d82c      	bhi.n	800422a <__ssputs_r+0x6e>
 80041d0:	898a      	ldrh	r2, [r1, #12]
 80041d2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80041d6:	d026      	beq.n	8004226 <__ssputs_r+0x6a>
 80041d8:	6965      	ldr	r5, [r4, #20]
 80041da:	6909      	ldr	r1, [r1, #16]
 80041dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80041e0:	eba3 0901 	sub.w	r9, r3, r1
 80041e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80041e8:	1c7b      	adds	r3, r7, #1
 80041ea:	444b      	add	r3, r9
 80041ec:	106d      	asrs	r5, r5, #1
 80041ee:	429d      	cmp	r5, r3
 80041f0:	bf38      	it	cc
 80041f2:	461d      	movcc	r5, r3
 80041f4:	0553      	lsls	r3, r2, #21
 80041f6:	d527      	bpl.n	8004248 <__ssputs_r+0x8c>
 80041f8:	4629      	mov	r1, r5
 80041fa:	f7ff ff53 	bl	80040a4 <_malloc_r>
 80041fe:	4606      	mov	r6, r0
 8004200:	b360      	cbz	r0, 800425c <__ssputs_r+0xa0>
 8004202:	6921      	ldr	r1, [r4, #16]
 8004204:	464a      	mov	r2, r9
 8004206:	f000 faeb 	bl	80047e0 <memcpy>
 800420a:	89a3      	ldrh	r3, [r4, #12]
 800420c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004210:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004214:	81a3      	strh	r3, [r4, #12]
 8004216:	6126      	str	r6, [r4, #16]
 8004218:	6165      	str	r5, [r4, #20]
 800421a:	444e      	add	r6, r9
 800421c:	eba5 0509 	sub.w	r5, r5, r9
 8004220:	6026      	str	r6, [r4, #0]
 8004222:	60a5      	str	r5, [r4, #8]
 8004224:	463e      	mov	r6, r7
 8004226:	42be      	cmp	r6, r7
 8004228:	d900      	bls.n	800422c <__ssputs_r+0x70>
 800422a:	463e      	mov	r6, r7
 800422c:	6820      	ldr	r0, [r4, #0]
 800422e:	4632      	mov	r2, r6
 8004230:	4641      	mov	r1, r8
 8004232:	f000 faab 	bl	800478c <memmove>
 8004236:	68a3      	ldr	r3, [r4, #8]
 8004238:	1b9b      	subs	r3, r3, r6
 800423a:	60a3      	str	r3, [r4, #8]
 800423c:	6823      	ldr	r3, [r4, #0]
 800423e:	4433      	add	r3, r6
 8004240:	6023      	str	r3, [r4, #0]
 8004242:	2000      	movs	r0, #0
 8004244:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004248:	462a      	mov	r2, r5
 800424a:	f000 fad7 	bl	80047fc <_realloc_r>
 800424e:	4606      	mov	r6, r0
 8004250:	2800      	cmp	r0, #0
 8004252:	d1e0      	bne.n	8004216 <__ssputs_r+0x5a>
 8004254:	6921      	ldr	r1, [r4, #16]
 8004256:	4650      	mov	r0, sl
 8004258:	f7ff feb8 	bl	8003fcc <_free_r>
 800425c:	230c      	movs	r3, #12
 800425e:	f8ca 3000 	str.w	r3, [sl]
 8004262:	89a3      	ldrh	r3, [r4, #12]
 8004264:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004268:	81a3      	strh	r3, [r4, #12]
 800426a:	f04f 30ff 	mov.w	r0, #4294967295
 800426e:	e7e9      	b.n	8004244 <__ssputs_r+0x88>

08004270 <_svfiprintf_r>:
 8004270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004274:	4698      	mov	r8, r3
 8004276:	898b      	ldrh	r3, [r1, #12]
 8004278:	061b      	lsls	r3, r3, #24
 800427a:	b09d      	sub	sp, #116	; 0x74
 800427c:	4607      	mov	r7, r0
 800427e:	460d      	mov	r5, r1
 8004280:	4614      	mov	r4, r2
 8004282:	d50e      	bpl.n	80042a2 <_svfiprintf_r+0x32>
 8004284:	690b      	ldr	r3, [r1, #16]
 8004286:	b963      	cbnz	r3, 80042a2 <_svfiprintf_r+0x32>
 8004288:	2140      	movs	r1, #64	; 0x40
 800428a:	f7ff ff0b 	bl	80040a4 <_malloc_r>
 800428e:	6028      	str	r0, [r5, #0]
 8004290:	6128      	str	r0, [r5, #16]
 8004292:	b920      	cbnz	r0, 800429e <_svfiprintf_r+0x2e>
 8004294:	230c      	movs	r3, #12
 8004296:	603b      	str	r3, [r7, #0]
 8004298:	f04f 30ff 	mov.w	r0, #4294967295
 800429c:	e0d0      	b.n	8004440 <_svfiprintf_r+0x1d0>
 800429e:	2340      	movs	r3, #64	; 0x40
 80042a0:	616b      	str	r3, [r5, #20]
 80042a2:	2300      	movs	r3, #0
 80042a4:	9309      	str	r3, [sp, #36]	; 0x24
 80042a6:	2320      	movs	r3, #32
 80042a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80042ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80042b0:	2330      	movs	r3, #48	; 0x30
 80042b2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004458 <_svfiprintf_r+0x1e8>
 80042b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80042ba:	f04f 0901 	mov.w	r9, #1
 80042be:	4623      	mov	r3, r4
 80042c0:	469a      	mov	sl, r3
 80042c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80042c6:	b10a      	cbz	r2, 80042cc <_svfiprintf_r+0x5c>
 80042c8:	2a25      	cmp	r2, #37	; 0x25
 80042ca:	d1f9      	bne.n	80042c0 <_svfiprintf_r+0x50>
 80042cc:	ebba 0b04 	subs.w	fp, sl, r4
 80042d0:	d00b      	beq.n	80042ea <_svfiprintf_r+0x7a>
 80042d2:	465b      	mov	r3, fp
 80042d4:	4622      	mov	r2, r4
 80042d6:	4629      	mov	r1, r5
 80042d8:	4638      	mov	r0, r7
 80042da:	f7ff ff6f 	bl	80041bc <__ssputs_r>
 80042de:	3001      	adds	r0, #1
 80042e0:	f000 80a9 	beq.w	8004436 <_svfiprintf_r+0x1c6>
 80042e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80042e6:	445a      	add	r2, fp
 80042e8:	9209      	str	r2, [sp, #36]	; 0x24
 80042ea:	f89a 3000 	ldrb.w	r3, [sl]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	f000 80a1 	beq.w	8004436 <_svfiprintf_r+0x1c6>
 80042f4:	2300      	movs	r3, #0
 80042f6:	f04f 32ff 	mov.w	r2, #4294967295
 80042fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80042fe:	f10a 0a01 	add.w	sl, sl, #1
 8004302:	9304      	str	r3, [sp, #16]
 8004304:	9307      	str	r3, [sp, #28]
 8004306:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800430a:	931a      	str	r3, [sp, #104]	; 0x68
 800430c:	4654      	mov	r4, sl
 800430e:	2205      	movs	r2, #5
 8004310:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004314:	4850      	ldr	r0, [pc, #320]	; (8004458 <_svfiprintf_r+0x1e8>)
 8004316:	f7fb ff5b 	bl	80001d0 <memchr>
 800431a:	9a04      	ldr	r2, [sp, #16]
 800431c:	b9d8      	cbnz	r0, 8004356 <_svfiprintf_r+0xe6>
 800431e:	06d0      	lsls	r0, r2, #27
 8004320:	bf44      	itt	mi
 8004322:	2320      	movmi	r3, #32
 8004324:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004328:	0711      	lsls	r1, r2, #28
 800432a:	bf44      	itt	mi
 800432c:	232b      	movmi	r3, #43	; 0x2b
 800432e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004332:	f89a 3000 	ldrb.w	r3, [sl]
 8004336:	2b2a      	cmp	r3, #42	; 0x2a
 8004338:	d015      	beq.n	8004366 <_svfiprintf_r+0xf6>
 800433a:	9a07      	ldr	r2, [sp, #28]
 800433c:	4654      	mov	r4, sl
 800433e:	2000      	movs	r0, #0
 8004340:	f04f 0c0a 	mov.w	ip, #10
 8004344:	4621      	mov	r1, r4
 8004346:	f811 3b01 	ldrb.w	r3, [r1], #1
 800434a:	3b30      	subs	r3, #48	; 0x30
 800434c:	2b09      	cmp	r3, #9
 800434e:	d94d      	bls.n	80043ec <_svfiprintf_r+0x17c>
 8004350:	b1b0      	cbz	r0, 8004380 <_svfiprintf_r+0x110>
 8004352:	9207      	str	r2, [sp, #28]
 8004354:	e014      	b.n	8004380 <_svfiprintf_r+0x110>
 8004356:	eba0 0308 	sub.w	r3, r0, r8
 800435a:	fa09 f303 	lsl.w	r3, r9, r3
 800435e:	4313      	orrs	r3, r2
 8004360:	9304      	str	r3, [sp, #16]
 8004362:	46a2      	mov	sl, r4
 8004364:	e7d2      	b.n	800430c <_svfiprintf_r+0x9c>
 8004366:	9b03      	ldr	r3, [sp, #12]
 8004368:	1d19      	adds	r1, r3, #4
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	9103      	str	r1, [sp, #12]
 800436e:	2b00      	cmp	r3, #0
 8004370:	bfbb      	ittet	lt
 8004372:	425b      	neglt	r3, r3
 8004374:	f042 0202 	orrlt.w	r2, r2, #2
 8004378:	9307      	strge	r3, [sp, #28]
 800437a:	9307      	strlt	r3, [sp, #28]
 800437c:	bfb8      	it	lt
 800437e:	9204      	strlt	r2, [sp, #16]
 8004380:	7823      	ldrb	r3, [r4, #0]
 8004382:	2b2e      	cmp	r3, #46	; 0x2e
 8004384:	d10c      	bne.n	80043a0 <_svfiprintf_r+0x130>
 8004386:	7863      	ldrb	r3, [r4, #1]
 8004388:	2b2a      	cmp	r3, #42	; 0x2a
 800438a:	d134      	bne.n	80043f6 <_svfiprintf_r+0x186>
 800438c:	9b03      	ldr	r3, [sp, #12]
 800438e:	1d1a      	adds	r2, r3, #4
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	9203      	str	r2, [sp, #12]
 8004394:	2b00      	cmp	r3, #0
 8004396:	bfb8      	it	lt
 8004398:	f04f 33ff 	movlt.w	r3, #4294967295
 800439c:	3402      	adds	r4, #2
 800439e:	9305      	str	r3, [sp, #20]
 80043a0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004468 <_svfiprintf_r+0x1f8>
 80043a4:	7821      	ldrb	r1, [r4, #0]
 80043a6:	2203      	movs	r2, #3
 80043a8:	4650      	mov	r0, sl
 80043aa:	f7fb ff11 	bl	80001d0 <memchr>
 80043ae:	b138      	cbz	r0, 80043c0 <_svfiprintf_r+0x150>
 80043b0:	9b04      	ldr	r3, [sp, #16]
 80043b2:	eba0 000a 	sub.w	r0, r0, sl
 80043b6:	2240      	movs	r2, #64	; 0x40
 80043b8:	4082      	lsls	r2, r0
 80043ba:	4313      	orrs	r3, r2
 80043bc:	3401      	adds	r4, #1
 80043be:	9304      	str	r3, [sp, #16]
 80043c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043c4:	4825      	ldr	r0, [pc, #148]	; (800445c <_svfiprintf_r+0x1ec>)
 80043c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80043ca:	2206      	movs	r2, #6
 80043cc:	f7fb ff00 	bl	80001d0 <memchr>
 80043d0:	2800      	cmp	r0, #0
 80043d2:	d038      	beq.n	8004446 <_svfiprintf_r+0x1d6>
 80043d4:	4b22      	ldr	r3, [pc, #136]	; (8004460 <_svfiprintf_r+0x1f0>)
 80043d6:	bb1b      	cbnz	r3, 8004420 <_svfiprintf_r+0x1b0>
 80043d8:	9b03      	ldr	r3, [sp, #12]
 80043da:	3307      	adds	r3, #7
 80043dc:	f023 0307 	bic.w	r3, r3, #7
 80043e0:	3308      	adds	r3, #8
 80043e2:	9303      	str	r3, [sp, #12]
 80043e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043e6:	4433      	add	r3, r6
 80043e8:	9309      	str	r3, [sp, #36]	; 0x24
 80043ea:	e768      	b.n	80042be <_svfiprintf_r+0x4e>
 80043ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80043f0:	460c      	mov	r4, r1
 80043f2:	2001      	movs	r0, #1
 80043f4:	e7a6      	b.n	8004344 <_svfiprintf_r+0xd4>
 80043f6:	2300      	movs	r3, #0
 80043f8:	3401      	adds	r4, #1
 80043fa:	9305      	str	r3, [sp, #20]
 80043fc:	4619      	mov	r1, r3
 80043fe:	f04f 0c0a 	mov.w	ip, #10
 8004402:	4620      	mov	r0, r4
 8004404:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004408:	3a30      	subs	r2, #48	; 0x30
 800440a:	2a09      	cmp	r2, #9
 800440c:	d903      	bls.n	8004416 <_svfiprintf_r+0x1a6>
 800440e:	2b00      	cmp	r3, #0
 8004410:	d0c6      	beq.n	80043a0 <_svfiprintf_r+0x130>
 8004412:	9105      	str	r1, [sp, #20]
 8004414:	e7c4      	b.n	80043a0 <_svfiprintf_r+0x130>
 8004416:	fb0c 2101 	mla	r1, ip, r1, r2
 800441a:	4604      	mov	r4, r0
 800441c:	2301      	movs	r3, #1
 800441e:	e7f0      	b.n	8004402 <_svfiprintf_r+0x192>
 8004420:	ab03      	add	r3, sp, #12
 8004422:	9300      	str	r3, [sp, #0]
 8004424:	462a      	mov	r2, r5
 8004426:	4b0f      	ldr	r3, [pc, #60]	; (8004464 <_svfiprintf_r+0x1f4>)
 8004428:	a904      	add	r1, sp, #16
 800442a:	4638      	mov	r0, r7
 800442c:	f3af 8000 	nop.w
 8004430:	1c42      	adds	r2, r0, #1
 8004432:	4606      	mov	r6, r0
 8004434:	d1d6      	bne.n	80043e4 <_svfiprintf_r+0x174>
 8004436:	89ab      	ldrh	r3, [r5, #12]
 8004438:	065b      	lsls	r3, r3, #25
 800443a:	f53f af2d 	bmi.w	8004298 <_svfiprintf_r+0x28>
 800443e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004440:	b01d      	add	sp, #116	; 0x74
 8004442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004446:	ab03      	add	r3, sp, #12
 8004448:	9300      	str	r3, [sp, #0]
 800444a:	462a      	mov	r2, r5
 800444c:	4b05      	ldr	r3, [pc, #20]	; (8004464 <_svfiprintf_r+0x1f4>)
 800444e:	a904      	add	r1, sp, #16
 8004450:	4638      	mov	r0, r7
 8004452:	f000 f879 	bl	8004548 <_printf_i>
 8004456:	e7eb      	b.n	8004430 <_svfiprintf_r+0x1c0>
 8004458:	080048e4 	.word	0x080048e4
 800445c:	080048ee 	.word	0x080048ee
 8004460:	00000000 	.word	0x00000000
 8004464:	080041bd 	.word	0x080041bd
 8004468:	080048ea 	.word	0x080048ea

0800446c <_printf_common>:
 800446c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004470:	4616      	mov	r6, r2
 8004472:	4699      	mov	r9, r3
 8004474:	688a      	ldr	r2, [r1, #8]
 8004476:	690b      	ldr	r3, [r1, #16]
 8004478:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800447c:	4293      	cmp	r3, r2
 800447e:	bfb8      	it	lt
 8004480:	4613      	movlt	r3, r2
 8004482:	6033      	str	r3, [r6, #0]
 8004484:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004488:	4607      	mov	r7, r0
 800448a:	460c      	mov	r4, r1
 800448c:	b10a      	cbz	r2, 8004492 <_printf_common+0x26>
 800448e:	3301      	adds	r3, #1
 8004490:	6033      	str	r3, [r6, #0]
 8004492:	6823      	ldr	r3, [r4, #0]
 8004494:	0699      	lsls	r1, r3, #26
 8004496:	bf42      	ittt	mi
 8004498:	6833      	ldrmi	r3, [r6, #0]
 800449a:	3302      	addmi	r3, #2
 800449c:	6033      	strmi	r3, [r6, #0]
 800449e:	6825      	ldr	r5, [r4, #0]
 80044a0:	f015 0506 	ands.w	r5, r5, #6
 80044a4:	d106      	bne.n	80044b4 <_printf_common+0x48>
 80044a6:	f104 0a19 	add.w	sl, r4, #25
 80044aa:	68e3      	ldr	r3, [r4, #12]
 80044ac:	6832      	ldr	r2, [r6, #0]
 80044ae:	1a9b      	subs	r3, r3, r2
 80044b0:	42ab      	cmp	r3, r5
 80044b2:	dc26      	bgt.n	8004502 <_printf_common+0x96>
 80044b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80044b8:	1e13      	subs	r3, r2, #0
 80044ba:	6822      	ldr	r2, [r4, #0]
 80044bc:	bf18      	it	ne
 80044be:	2301      	movne	r3, #1
 80044c0:	0692      	lsls	r2, r2, #26
 80044c2:	d42b      	bmi.n	800451c <_printf_common+0xb0>
 80044c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80044c8:	4649      	mov	r1, r9
 80044ca:	4638      	mov	r0, r7
 80044cc:	47c0      	blx	r8
 80044ce:	3001      	adds	r0, #1
 80044d0:	d01e      	beq.n	8004510 <_printf_common+0xa4>
 80044d2:	6823      	ldr	r3, [r4, #0]
 80044d4:	6922      	ldr	r2, [r4, #16]
 80044d6:	f003 0306 	and.w	r3, r3, #6
 80044da:	2b04      	cmp	r3, #4
 80044dc:	bf02      	ittt	eq
 80044de:	68e5      	ldreq	r5, [r4, #12]
 80044e0:	6833      	ldreq	r3, [r6, #0]
 80044e2:	1aed      	subeq	r5, r5, r3
 80044e4:	68a3      	ldr	r3, [r4, #8]
 80044e6:	bf0c      	ite	eq
 80044e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80044ec:	2500      	movne	r5, #0
 80044ee:	4293      	cmp	r3, r2
 80044f0:	bfc4      	itt	gt
 80044f2:	1a9b      	subgt	r3, r3, r2
 80044f4:	18ed      	addgt	r5, r5, r3
 80044f6:	2600      	movs	r6, #0
 80044f8:	341a      	adds	r4, #26
 80044fa:	42b5      	cmp	r5, r6
 80044fc:	d11a      	bne.n	8004534 <_printf_common+0xc8>
 80044fe:	2000      	movs	r0, #0
 8004500:	e008      	b.n	8004514 <_printf_common+0xa8>
 8004502:	2301      	movs	r3, #1
 8004504:	4652      	mov	r2, sl
 8004506:	4649      	mov	r1, r9
 8004508:	4638      	mov	r0, r7
 800450a:	47c0      	blx	r8
 800450c:	3001      	adds	r0, #1
 800450e:	d103      	bne.n	8004518 <_printf_common+0xac>
 8004510:	f04f 30ff 	mov.w	r0, #4294967295
 8004514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004518:	3501      	adds	r5, #1
 800451a:	e7c6      	b.n	80044aa <_printf_common+0x3e>
 800451c:	18e1      	adds	r1, r4, r3
 800451e:	1c5a      	adds	r2, r3, #1
 8004520:	2030      	movs	r0, #48	; 0x30
 8004522:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004526:	4422      	add	r2, r4
 8004528:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800452c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004530:	3302      	adds	r3, #2
 8004532:	e7c7      	b.n	80044c4 <_printf_common+0x58>
 8004534:	2301      	movs	r3, #1
 8004536:	4622      	mov	r2, r4
 8004538:	4649      	mov	r1, r9
 800453a:	4638      	mov	r0, r7
 800453c:	47c0      	blx	r8
 800453e:	3001      	adds	r0, #1
 8004540:	d0e6      	beq.n	8004510 <_printf_common+0xa4>
 8004542:	3601      	adds	r6, #1
 8004544:	e7d9      	b.n	80044fa <_printf_common+0x8e>
	...

08004548 <_printf_i>:
 8004548:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800454c:	7e0f      	ldrb	r7, [r1, #24]
 800454e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004550:	2f78      	cmp	r7, #120	; 0x78
 8004552:	4691      	mov	r9, r2
 8004554:	4680      	mov	r8, r0
 8004556:	460c      	mov	r4, r1
 8004558:	469a      	mov	sl, r3
 800455a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800455e:	d807      	bhi.n	8004570 <_printf_i+0x28>
 8004560:	2f62      	cmp	r7, #98	; 0x62
 8004562:	d80a      	bhi.n	800457a <_printf_i+0x32>
 8004564:	2f00      	cmp	r7, #0
 8004566:	f000 80d4 	beq.w	8004712 <_printf_i+0x1ca>
 800456a:	2f58      	cmp	r7, #88	; 0x58
 800456c:	f000 80c0 	beq.w	80046f0 <_printf_i+0x1a8>
 8004570:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004574:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004578:	e03a      	b.n	80045f0 <_printf_i+0xa8>
 800457a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800457e:	2b15      	cmp	r3, #21
 8004580:	d8f6      	bhi.n	8004570 <_printf_i+0x28>
 8004582:	a101      	add	r1, pc, #4	; (adr r1, 8004588 <_printf_i+0x40>)
 8004584:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004588:	080045e1 	.word	0x080045e1
 800458c:	080045f5 	.word	0x080045f5
 8004590:	08004571 	.word	0x08004571
 8004594:	08004571 	.word	0x08004571
 8004598:	08004571 	.word	0x08004571
 800459c:	08004571 	.word	0x08004571
 80045a0:	080045f5 	.word	0x080045f5
 80045a4:	08004571 	.word	0x08004571
 80045a8:	08004571 	.word	0x08004571
 80045ac:	08004571 	.word	0x08004571
 80045b0:	08004571 	.word	0x08004571
 80045b4:	080046f9 	.word	0x080046f9
 80045b8:	08004621 	.word	0x08004621
 80045bc:	080046b3 	.word	0x080046b3
 80045c0:	08004571 	.word	0x08004571
 80045c4:	08004571 	.word	0x08004571
 80045c8:	0800471b 	.word	0x0800471b
 80045cc:	08004571 	.word	0x08004571
 80045d0:	08004621 	.word	0x08004621
 80045d4:	08004571 	.word	0x08004571
 80045d8:	08004571 	.word	0x08004571
 80045dc:	080046bb 	.word	0x080046bb
 80045e0:	682b      	ldr	r3, [r5, #0]
 80045e2:	1d1a      	adds	r2, r3, #4
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	602a      	str	r2, [r5, #0]
 80045e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80045ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80045f0:	2301      	movs	r3, #1
 80045f2:	e09f      	b.n	8004734 <_printf_i+0x1ec>
 80045f4:	6820      	ldr	r0, [r4, #0]
 80045f6:	682b      	ldr	r3, [r5, #0]
 80045f8:	0607      	lsls	r7, r0, #24
 80045fa:	f103 0104 	add.w	r1, r3, #4
 80045fe:	6029      	str	r1, [r5, #0]
 8004600:	d501      	bpl.n	8004606 <_printf_i+0xbe>
 8004602:	681e      	ldr	r6, [r3, #0]
 8004604:	e003      	b.n	800460e <_printf_i+0xc6>
 8004606:	0646      	lsls	r6, r0, #25
 8004608:	d5fb      	bpl.n	8004602 <_printf_i+0xba>
 800460a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800460e:	2e00      	cmp	r6, #0
 8004610:	da03      	bge.n	800461a <_printf_i+0xd2>
 8004612:	232d      	movs	r3, #45	; 0x2d
 8004614:	4276      	negs	r6, r6
 8004616:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800461a:	485a      	ldr	r0, [pc, #360]	; (8004784 <_printf_i+0x23c>)
 800461c:	230a      	movs	r3, #10
 800461e:	e012      	b.n	8004646 <_printf_i+0xfe>
 8004620:	682b      	ldr	r3, [r5, #0]
 8004622:	6820      	ldr	r0, [r4, #0]
 8004624:	1d19      	adds	r1, r3, #4
 8004626:	6029      	str	r1, [r5, #0]
 8004628:	0605      	lsls	r5, r0, #24
 800462a:	d501      	bpl.n	8004630 <_printf_i+0xe8>
 800462c:	681e      	ldr	r6, [r3, #0]
 800462e:	e002      	b.n	8004636 <_printf_i+0xee>
 8004630:	0641      	lsls	r1, r0, #25
 8004632:	d5fb      	bpl.n	800462c <_printf_i+0xe4>
 8004634:	881e      	ldrh	r6, [r3, #0]
 8004636:	4853      	ldr	r0, [pc, #332]	; (8004784 <_printf_i+0x23c>)
 8004638:	2f6f      	cmp	r7, #111	; 0x6f
 800463a:	bf0c      	ite	eq
 800463c:	2308      	moveq	r3, #8
 800463e:	230a      	movne	r3, #10
 8004640:	2100      	movs	r1, #0
 8004642:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004646:	6865      	ldr	r5, [r4, #4]
 8004648:	60a5      	str	r5, [r4, #8]
 800464a:	2d00      	cmp	r5, #0
 800464c:	bfa2      	ittt	ge
 800464e:	6821      	ldrge	r1, [r4, #0]
 8004650:	f021 0104 	bicge.w	r1, r1, #4
 8004654:	6021      	strge	r1, [r4, #0]
 8004656:	b90e      	cbnz	r6, 800465c <_printf_i+0x114>
 8004658:	2d00      	cmp	r5, #0
 800465a:	d04b      	beq.n	80046f4 <_printf_i+0x1ac>
 800465c:	4615      	mov	r5, r2
 800465e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004662:	fb03 6711 	mls	r7, r3, r1, r6
 8004666:	5dc7      	ldrb	r7, [r0, r7]
 8004668:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800466c:	4637      	mov	r7, r6
 800466e:	42bb      	cmp	r3, r7
 8004670:	460e      	mov	r6, r1
 8004672:	d9f4      	bls.n	800465e <_printf_i+0x116>
 8004674:	2b08      	cmp	r3, #8
 8004676:	d10b      	bne.n	8004690 <_printf_i+0x148>
 8004678:	6823      	ldr	r3, [r4, #0]
 800467a:	07de      	lsls	r6, r3, #31
 800467c:	d508      	bpl.n	8004690 <_printf_i+0x148>
 800467e:	6923      	ldr	r3, [r4, #16]
 8004680:	6861      	ldr	r1, [r4, #4]
 8004682:	4299      	cmp	r1, r3
 8004684:	bfde      	ittt	le
 8004686:	2330      	movle	r3, #48	; 0x30
 8004688:	f805 3c01 	strble.w	r3, [r5, #-1]
 800468c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004690:	1b52      	subs	r2, r2, r5
 8004692:	6122      	str	r2, [r4, #16]
 8004694:	f8cd a000 	str.w	sl, [sp]
 8004698:	464b      	mov	r3, r9
 800469a:	aa03      	add	r2, sp, #12
 800469c:	4621      	mov	r1, r4
 800469e:	4640      	mov	r0, r8
 80046a0:	f7ff fee4 	bl	800446c <_printf_common>
 80046a4:	3001      	adds	r0, #1
 80046a6:	d14a      	bne.n	800473e <_printf_i+0x1f6>
 80046a8:	f04f 30ff 	mov.w	r0, #4294967295
 80046ac:	b004      	add	sp, #16
 80046ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046b2:	6823      	ldr	r3, [r4, #0]
 80046b4:	f043 0320 	orr.w	r3, r3, #32
 80046b8:	6023      	str	r3, [r4, #0]
 80046ba:	4833      	ldr	r0, [pc, #204]	; (8004788 <_printf_i+0x240>)
 80046bc:	2778      	movs	r7, #120	; 0x78
 80046be:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80046c2:	6823      	ldr	r3, [r4, #0]
 80046c4:	6829      	ldr	r1, [r5, #0]
 80046c6:	061f      	lsls	r7, r3, #24
 80046c8:	f851 6b04 	ldr.w	r6, [r1], #4
 80046cc:	d402      	bmi.n	80046d4 <_printf_i+0x18c>
 80046ce:	065f      	lsls	r7, r3, #25
 80046d0:	bf48      	it	mi
 80046d2:	b2b6      	uxthmi	r6, r6
 80046d4:	07df      	lsls	r7, r3, #31
 80046d6:	bf48      	it	mi
 80046d8:	f043 0320 	orrmi.w	r3, r3, #32
 80046dc:	6029      	str	r1, [r5, #0]
 80046de:	bf48      	it	mi
 80046e0:	6023      	strmi	r3, [r4, #0]
 80046e2:	b91e      	cbnz	r6, 80046ec <_printf_i+0x1a4>
 80046e4:	6823      	ldr	r3, [r4, #0]
 80046e6:	f023 0320 	bic.w	r3, r3, #32
 80046ea:	6023      	str	r3, [r4, #0]
 80046ec:	2310      	movs	r3, #16
 80046ee:	e7a7      	b.n	8004640 <_printf_i+0xf8>
 80046f0:	4824      	ldr	r0, [pc, #144]	; (8004784 <_printf_i+0x23c>)
 80046f2:	e7e4      	b.n	80046be <_printf_i+0x176>
 80046f4:	4615      	mov	r5, r2
 80046f6:	e7bd      	b.n	8004674 <_printf_i+0x12c>
 80046f8:	682b      	ldr	r3, [r5, #0]
 80046fa:	6826      	ldr	r6, [r4, #0]
 80046fc:	6961      	ldr	r1, [r4, #20]
 80046fe:	1d18      	adds	r0, r3, #4
 8004700:	6028      	str	r0, [r5, #0]
 8004702:	0635      	lsls	r5, r6, #24
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	d501      	bpl.n	800470c <_printf_i+0x1c4>
 8004708:	6019      	str	r1, [r3, #0]
 800470a:	e002      	b.n	8004712 <_printf_i+0x1ca>
 800470c:	0670      	lsls	r0, r6, #25
 800470e:	d5fb      	bpl.n	8004708 <_printf_i+0x1c0>
 8004710:	8019      	strh	r1, [r3, #0]
 8004712:	2300      	movs	r3, #0
 8004714:	6123      	str	r3, [r4, #16]
 8004716:	4615      	mov	r5, r2
 8004718:	e7bc      	b.n	8004694 <_printf_i+0x14c>
 800471a:	682b      	ldr	r3, [r5, #0]
 800471c:	1d1a      	adds	r2, r3, #4
 800471e:	602a      	str	r2, [r5, #0]
 8004720:	681d      	ldr	r5, [r3, #0]
 8004722:	6862      	ldr	r2, [r4, #4]
 8004724:	2100      	movs	r1, #0
 8004726:	4628      	mov	r0, r5
 8004728:	f7fb fd52 	bl	80001d0 <memchr>
 800472c:	b108      	cbz	r0, 8004732 <_printf_i+0x1ea>
 800472e:	1b40      	subs	r0, r0, r5
 8004730:	6060      	str	r0, [r4, #4]
 8004732:	6863      	ldr	r3, [r4, #4]
 8004734:	6123      	str	r3, [r4, #16]
 8004736:	2300      	movs	r3, #0
 8004738:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800473c:	e7aa      	b.n	8004694 <_printf_i+0x14c>
 800473e:	6923      	ldr	r3, [r4, #16]
 8004740:	462a      	mov	r2, r5
 8004742:	4649      	mov	r1, r9
 8004744:	4640      	mov	r0, r8
 8004746:	47d0      	blx	sl
 8004748:	3001      	adds	r0, #1
 800474a:	d0ad      	beq.n	80046a8 <_printf_i+0x160>
 800474c:	6823      	ldr	r3, [r4, #0]
 800474e:	079b      	lsls	r3, r3, #30
 8004750:	d413      	bmi.n	800477a <_printf_i+0x232>
 8004752:	68e0      	ldr	r0, [r4, #12]
 8004754:	9b03      	ldr	r3, [sp, #12]
 8004756:	4298      	cmp	r0, r3
 8004758:	bfb8      	it	lt
 800475a:	4618      	movlt	r0, r3
 800475c:	e7a6      	b.n	80046ac <_printf_i+0x164>
 800475e:	2301      	movs	r3, #1
 8004760:	4632      	mov	r2, r6
 8004762:	4649      	mov	r1, r9
 8004764:	4640      	mov	r0, r8
 8004766:	47d0      	blx	sl
 8004768:	3001      	adds	r0, #1
 800476a:	d09d      	beq.n	80046a8 <_printf_i+0x160>
 800476c:	3501      	adds	r5, #1
 800476e:	68e3      	ldr	r3, [r4, #12]
 8004770:	9903      	ldr	r1, [sp, #12]
 8004772:	1a5b      	subs	r3, r3, r1
 8004774:	42ab      	cmp	r3, r5
 8004776:	dcf2      	bgt.n	800475e <_printf_i+0x216>
 8004778:	e7eb      	b.n	8004752 <_printf_i+0x20a>
 800477a:	2500      	movs	r5, #0
 800477c:	f104 0619 	add.w	r6, r4, #25
 8004780:	e7f5      	b.n	800476e <_printf_i+0x226>
 8004782:	bf00      	nop
 8004784:	080048f5 	.word	0x080048f5
 8004788:	08004906 	.word	0x08004906

0800478c <memmove>:
 800478c:	4288      	cmp	r0, r1
 800478e:	b510      	push	{r4, lr}
 8004790:	eb01 0402 	add.w	r4, r1, r2
 8004794:	d902      	bls.n	800479c <memmove+0x10>
 8004796:	4284      	cmp	r4, r0
 8004798:	4623      	mov	r3, r4
 800479a:	d807      	bhi.n	80047ac <memmove+0x20>
 800479c:	1e43      	subs	r3, r0, #1
 800479e:	42a1      	cmp	r1, r4
 80047a0:	d008      	beq.n	80047b4 <memmove+0x28>
 80047a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80047a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80047aa:	e7f8      	b.n	800479e <memmove+0x12>
 80047ac:	4402      	add	r2, r0
 80047ae:	4601      	mov	r1, r0
 80047b0:	428a      	cmp	r2, r1
 80047b2:	d100      	bne.n	80047b6 <memmove+0x2a>
 80047b4:	bd10      	pop	{r4, pc}
 80047b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80047ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80047be:	e7f7      	b.n	80047b0 <memmove+0x24>

080047c0 <_sbrk_r>:
 80047c0:	b538      	push	{r3, r4, r5, lr}
 80047c2:	4d06      	ldr	r5, [pc, #24]	; (80047dc <_sbrk_r+0x1c>)
 80047c4:	2300      	movs	r3, #0
 80047c6:	4604      	mov	r4, r0
 80047c8:	4608      	mov	r0, r1
 80047ca:	602b      	str	r3, [r5, #0]
 80047cc:	f7fc f9c4 	bl	8000b58 <_sbrk>
 80047d0:	1c43      	adds	r3, r0, #1
 80047d2:	d102      	bne.n	80047da <_sbrk_r+0x1a>
 80047d4:	682b      	ldr	r3, [r5, #0]
 80047d6:	b103      	cbz	r3, 80047da <_sbrk_r+0x1a>
 80047d8:	6023      	str	r3, [r4, #0]
 80047da:	bd38      	pop	{r3, r4, r5, pc}
 80047dc:	2000062c 	.word	0x2000062c

080047e0 <memcpy>:
 80047e0:	440a      	add	r2, r1
 80047e2:	4291      	cmp	r1, r2
 80047e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80047e8:	d100      	bne.n	80047ec <memcpy+0xc>
 80047ea:	4770      	bx	lr
 80047ec:	b510      	push	{r4, lr}
 80047ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80047f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80047f6:	4291      	cmp	r1, r2
 80047f8:	d1f9      	bne.n	80047ee <memcpy+0xe>
 80047fa:	bd10      	pop	{r4, pc}

080047fc <_realloc_r>:
 80047fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004800:	4680      	mov	r8, r0
 8004802:	4614      	mov	r4, r2
 8004804:	460e      	mov	r6, r1
 8004806:	b921      	cbnz	r1, 8004812 <_realloc_r+0x16>
 8004808:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800480c:	4611      	mov	r1, r2
 800480e:	f7ff bc49 	b.w	80040a4 <_malloc_r>
 8004812:	b92a      	cbnz	r2, 8004820 <_realloc_r+0x24>
 8004814:	f7ff fbda 	bl	8003fcc <_free_r>
 8004818:	4625      	mov	r5, r4
 800481a:	4628      	mov	r0, r5
 800481c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004820:	f000 f81b 	bl	800485a <_malloc_usable_size_r>
 8004824:	4284      	cmp	r4, r0
 8004826:	4607      	mov	r7, r0
 8004828:	d802      	bhi.n	8004830 <_realloc_r+0x34>
 800482a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800482e:	d812      	bhi.n	8004856 <_realloc_r+0x5a>
 8004830:	4621      	mov	r1, r4
 8004832:	4640      	mov	r0, r8
 8004834:	f7ff fc36 	bl	80040a4 <_malloc_r>
 8004838:	4605      	mov	r5, r0
 800483a:	2800      	cmp	r0, #0
 800483c:	d0ed      	beq.n	800481a <_realloc_r+0x1e>
 800483e:	42bc      	cmp	r4, r7
 8004840:	4622      	mov	r2, r4
 8004842:	4631      	mov	r1, r6
 8004844:	bf28      	it	cs
 8004846:	463a      	movcs	r2, r7
 8004848:	f7ff ffca 	bl	80047e0 <memcpy>
 800484c:	4631      	mov	r1, r6
 800484e:	4640      	mov	r0, r8
 8004850:	f7ff fbbc 	bl	8003fcc <_free_r>
 8004854:	e7e1      	b.n	800481a <_realloc_r+0x1e>
 8004856:	4635      	mov	r5, r6
 8004858:	e7df      	b.n	800481a <_realloc_r+0x1e>

0800485a <_malloc_usable_size_r>:
 800485a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800485e:	1f18      	subs	r0, r3, #4
 8004860:	2b00      	cmp	r3, #0
 8004862:	bfbc      	itt	lt
 8004864:	580b      	ldrlt	r3, [r1, r0]
 8004866:	18c0      	addlt	r0, r0, r3
 8004868:	4770      	bx	lr
	...

0800486c <_init>:
 800486c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800486e:	bf00      	nop
 8004870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004872:	bc08      	pop	{r3}
 8004874:	469e      	mov	lr, r3
 8004876:	4770      	bx	lr

08004878 <_fini>:
 8004878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800487a:	bf00      	nop
 800487c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800487e:	bc08      	pop	{r3}
 8004880:	469e      	mov	lr, r3
 8004882:	4770      	bx	lr
