
final_project2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005988  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e4  08005b18  08005b18  00015b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005cfc  08005cfc  000200a0  2**0
                  CONTENTS
  4 .ARM          00000000  08005cfc  08005cfc  000200a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005cfc  08005cfc  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005cfc  08005cfc  00015cfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d00  08005d00  00015d00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  08005d04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200a0  2**0
                  CONTENTS
 10 .bss          00000e4c  200000a0  200000a0  000200a0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000eec  20000eec  000200a0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00013933  00000000  00000000  00020113  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002d9a  00000000  00000000  00033a46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001270  00000000  00000000  000367e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000e4d  00000000  00000000  00037a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001f82a  00000000  00000000  0003889d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001754b  00000000  00000000  000580c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ba905  00000000  00000000  0006f612  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000056d0  00000000  00000000  00129f18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  0012f5e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a0 	.word	0x200000a0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005b00 	.word	0x08005b00

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a4 	.word	0x200000a4
 80001cc:	08005b00 	.word	0x08005b00

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <button>:
#define DEFAULT_SHOTS 10
#define DEFAULT_SCORE 10
#define DEFAULT_DIST 100


bool button(void){
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
	if ((GPIOA->IDR & 0x01) == 1){
 8000284:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000288:	691b      	ldr	r3, [r3, #16]
 800028a:	f003 0301 	and.w	r3, r3, #1
 800028e:	2b01      	cmp	r3, #1
 8000290:	d101      	bne.n	8000296 <button+0x16>
		return true;
 8000292:	2301      	movs	r3, #1
 8000294:	e000      	b.n	8000298 <button+0x18>
	}
	return false;
 8000296:	2300      	movs	r3, #0
}
 8000298:	4618      	mov	r0, r3
 800029a:	46bd      	mov	sp, r7
 800029c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a0:	4770      	bx	lr

080002a2 <setPlayer>:

Player* setPlayer(Game* gamePtr, uint8_t p_index){ //p_index = 0 for player 1, p_index = 1 for player 2, p_index = -1 for whos turn it is
 80002a2:	b480      	push	{r7}
 80002a4:	b085      	sub	sp, #20
 80002a6:	af00      	add	r7, sp, #0
 80002a8:	6078      	str	r0, [r7, #4]
 80002aa:	460b      	mov	r3, r1
 80002ac:	70fb      	strb	r3, [r7, #3]
    Player* player = NULL;
 80002ae:	2300      	movs	r3, #0
 80002b0:	60fb      	str	r3, [r7, #12]

    //if p_index = -1, then we want this function to output the player whos turn it is
    //otherwise we can specify which player we want to output with p_index
    if((p_index == 0)||(p_index == -1 && (gamePtr->turn==0))||gamePtr->mode > 0){
 80002b2:	78fb      	ldrb	r3, [r7, #3]
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d004      	beq.n	80002c2 <setPlayer+0x20>
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	dd03      	ble.n	80002ca <setPlayer+0x28>
        player = gamePtr->p1;
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	60fb      	str	r3, [r7, #12]
 80002c8:	e005      	b.n	80002d6 <setPlayer+0x34>
    }

    //we only want to select player 2 based off the turn if it is a two player mode
    else if((p_index == 1)||((p_index == -1 && gamePtr->turn==1)&&(gamePtr->mode < 0))){
 80002ca:	78fb      	ldrb	r3, [r7, #3]
 80002cc:	2b01      	cmp	r3, #1
 80002ce:	d102      	bne.n	80002d6 <setPlayer+0x34>
        player = gamePtr->p2;
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	685b      	ldr	r3, [r3, #4]
 80002d4:	60fb      	str	r3, [r7, #12]
    }

    return player;
 80002d6:	68fb      	ldr	r3, [r7, #12]
}
 80002d8:	4618      	mov	r0, r3
 80002da:	3714      	adds	r7, #20
 80002dc:	46bd      	mov	sp, r7
 80002de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e2:	4770      	bx	lr

080002e4 <score>:
    Player* player = setPlayer(gamePtr, p_index);

    return player->score;
}

void score(Game* gamePtr) {
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b084      	sub	sp, #16
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
    Player* player = setPlayer(gamePtr, -1);
 80002ec:	21ff      	movs	r1, #255	; 0xff
 80002ee:	6878      	ldr	r0, [r7, #4]
 80002f0:	f7ff ffd7 	bl	80002a2 <setPlayer>
 80002f4:	60f8      	str	r0, [r7, #12]

    player->score += 1;
 80002f6:	68fb      	ldr	r3, [r7, #12]
 80002f8:	781b      	ldrb	r3, [r3, #0]
 80002fa:	3301      	adds	r3, #1
 80002fc:	b2da      	uxtb	r2, r3
 80002fe:	68fb      	ldr	r3, [r7, #12]
 8000300:	701a      	strb	r2, [r3, #0]
    player->tot_dist += player->shot_dist;
 8000302:	68fb      	ldr	r3, [r7, #12]
 8000304:	685b      	ldr	r3, [r3, #4]
 8000306:	68fa      	ldr	r2, [r7, #12]
 8000308:	7892      	ldrb	r2, [r2, #2]
 800030a:	441a      	add	r2, r3
 800030c:	68fb      	ldr	r3, [r7, #12]
 800030e:	605a      	str	r2, [r3, #4]

    if(player->score > player->pb_score){
 8000310:	68fb      	ldr	r3, [r7, #12]
 8000312:	781a      	ldrb	r2, [r3, #0]
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	7a1b      	ldrb	r3, [r3, #8]
 8000318:	429a      	cmp	r2, r3
 800031a:	d903      	bls.n	8000324 <score+0x40>
        player->pb_score = player->score;
 800031c:	68fb      	ldr	r3, [r7, #12]
 800031e:	781a      	ldrb	r2, [r3, #0]
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	721a      	strb	r2, [r3, #8]
    }

    if(player->tot_dist > player->pb_tot_dist){
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	685a      	ldr	r2, [r3, #4]
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	68db      	ldr	r3, [r3, #12]
 800032c:	429a      	cmp	r2, r3
 800032e:	d903      	bls.n	8000338 <score+0x54>
        player->pb_tot_dist = player->tot_dist;
 8000330:	68fb      	ldr	r3, [r7, #12]
 8000332:	685a      	ldr	r2, [r3, #4]
 8000334:	68fb      	ldr	r3, [r7, #12]
 8000336:	60da      	str	r2, [r3, #12]

    }

    if(player->shot_dist > player->pb_shot_dist){
 8000338:	68fb      	ldr	r3, [r7, #12]
 800033a:	789a      	ldrb	r2, [r3, #2]
 800033c:	68fb      	ldr	r3, [r7, #12]
 800033e:	7a5b      	ldrb	r3, [r3, #9]
 8000340:	429a      	cmp	r2, r3
 8000342:	d903      	bls.n	800034c <score+0x68>
        player->pb_shot_dist = player->shot_dist;
 8000344:	68fb      	ldr	r3, [r7, #12]
 8000346:	789a      	ldrb	r2, [r3, #2]
 8000348:	68fb      	ldr	r3, [r7, #12]
 800034a:	725a      	strb	r2, [r3, #9]
    }

    updateScoreboard(gamePtr);
 800034c:	6878      	ldr	r0, [r7, #4]
 800034e:	f000 f85b 	bl	8000408 <updateScoreboard>
}
 8000352:	bf00      	nop
 8000354:	3710      	adds	r7, #16
 8000356:	46bd      	mov	sp, r7
 8000358:	bd80      	pop	{r7, pc}

0800035a <shotTaken>:

void shotTaken(Game* gamePtr){
 800035a:	b580      	push	{r7, lr}
 800035c:	b084      	sub	sp, #16
 800035e:	af00      	add	r7, sp, #0
 8000360:	6078      	str	r0, [r7, #4]
    Player* player = setPlayer(gamePtr, 0);
 8000362:	2100      	movs	r1, #0
 8000364:	6878      	ldr	r0, [r7, #4]
 8000366:	f7ff ff9c 	bl	80002a2 <setPlayer>
 800036a:	60f8      	str	r0, [r7, #12]
    //Player* player = setPlayer(gamePtr, -1);

    player->shots += 1;
 800036c:	68fb      	ldr	r3, [r7, #12]
 800036e:	785b      	ldrb	r3, [r3, #1]
 8000370:	3301      	adds	r3, #1
 8000372:	b2da      	uxtb	r2, r3
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	705a      	strb	r2, [r3, #1]
    updateScoreboard(gamePtr);
 8000378:	6878      	ldr	r0, [r7, #4]
 800037a:	f000 f845 	bl	8000408 <updateScoreboard>
}
 800037e:	bf00      	nop
 8000380:	3710      	adds	r7, #16
 8000382:	46bd      	mov	sp, r7
 8000384:	bd80      	pop	{r7, pc}
	...

08000388 <setDist>:
    }
    return result;
}


void setDist(Game* gamePtr, uint8_t player_num){
 8000388:	b580      	push	{r7, lr}
 800038a:	b0a4      	sub	sp, #144	; 0x90
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
 8000390:	460b      	mov	r3, r1
 8000392:	70fb      	strb	r3, [r7, #3]
	//        SerialOutputString(string_to_send, &USART1_PORT);
	//    }
	//    SerialOutputString("D", &USART1_PORT);

////////////////////////////
    Player* target_player = setPlayer(gamePtr, player_num);
 8000394:	78fb      	ldrb	r3, [r7, #3]
 8000396:	4619      	mov	r1, r3
 8000398:	6878      	ldr	r0, [r7, #4]
 800039a:	f7ff ff82 	bl	80002a2 <setPlayer>
 800039e:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
    uint8_t distance;

    uint8_t outputStr[128];

    while(!button()){
 80003a2:	e015      	b.n	80003d0 <setDist+0x48>
        distance = get_distance();
 80003a4:	f000 f98e 	bl	80006c4 <get_distance>
 80003a8:	4603      	mov	r3, r0
 80003aa:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
        sprintf(outputStr, "S%hu\n", distance);
 80003ae:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 80003b2:	f107 0308 	add.w	r3, r7, #8
 80003b6:	4911      	ldr	r1, [pc, #68]	; (80003fc <setDist+0x74>)
 80003b8:	4618      	mov	r0, r3
 80003ba:	f004 fa2b 	bl	8004814 <siprintf>
        SerialOut(outputStr, &USART1_PORT);
 80003be:	f107 0308 	add.w	r3, r7, #8
 80003c2:	490f      	ldr	r1, [pc, #60]	; (8000400 <setDist+0x78>)
 80003c4:	4618      	mov	r0, r3
 80003c6:	f000 fdb9 	bl	8000f3c <SerialOut>
        HAL_Delay(100);
 80003ca:	2064      	movs	r0, #100	; 0x64
 80003cc:	f001 f914 	bl	80015f8 <HAL_Delay>
    while(!button()){
 80003d0:	f7ff ff56 	bl	8000280 <button>
 80003d4:	4603      	mov	r3, r0
 80003d6:	f083 0301 	eor.w	r3, r3, #1
 80003da:	b2db      	uxtb	r3, r3
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d1e1      	bne.n	80003a4 <setDist+0x1c>
    }

    SerialOut("D\n", &USART1_PORT);
 80003e0:	4907      	ldr	r1, [pc, #28]	; (8000400 <setDist+0x78>)
 80003e2:	4808      	ldr	r0, [pc, #32]	; (8000404 <setDist+0x7c>)
 80003e4:	f000 fdaa 	bl	8000f3c <SerialOut>
    target_player->shot_dist = distance;
 80003e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80003ec:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 80003f0:	709a      	strb	r2, [r3, #2]
    //When the GPIO button on the STM32 is pressed:
        //stop taking distance measurements
        //output "D" via serial
        //player->shot_dist = <last distance to be output>
        //return from function
}
 80003f2:	bf00      	nop
 80003f4:	3790      	adds	r7, #144	; 0x90
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	08005b18 	.word	0x08005b18
 8000400:	20000004 	.word	0x20000004
 8000404:	08005b20 	.word	0x08005b20

08000408 <updateScoreboard>:

    return result;

}

void updateScoreboard(Game* game){
 8000408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800040a:	b0d3      	sub	sp, #332	; 0x14c
 800040c:	af0c      	add	r7, sp, #48	; 0x30
 800040e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000412:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000416:	6018      	str	r0, [r3, #0]
    uint8_t packet[PACKET_SIZE];

    sprintf(packet, "%hu,%hu,%lu,%hu,%hu,%lu,%hu,%hu,%lu,%hu,%hu,%lu,%hu\n", game->p1->score, game->p1->shots, game->p1->tot_dist, game->p1->pb_score, game->p1->pb_shot_dist, game->p1->pb_tot_dist, game->p2->score, game->p2->shots, game->p2->tot_dist, game->p2->pb_score, game->p2->pb_shot_dist, game->p2->pb_tot_dist, game->turn);
 8000418:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800041c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	781b      	ldrb	r3, [r3, #0]
 8000426:	469c      	mov	ip, r3
 8000428:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800042c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	785b      	ldrb	r3, [r3, #1]
 8000436:	469e      	mov	lr, r3
 8000438:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800043c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	685a      	ldr	r2, [r3, #4]
 8000446:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800044a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	7a1b      	ldrb	r3, [r3, #8]
 8000454:	461e      	mov	r6, r3
 8000456:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800045a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	7a5b      	ldrb	r3, [r3, #9]
 8000464:	613b      	str	r3, [r7, #16]
 8000466:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800046a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	68d9      	ldr	r1, [r3, #12]
 8000474:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000478:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	685b      	ldr	r3, [r3, #4]
 8000480:	781b      	ldrb	r3, [r3, #0]
 8000482:	60fb      	str	r3, [r7, #12]
 8000484:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000488:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	685b      	ldr	r3, [r3, #4]
 8000490:	785b      	ldrb	r3, [r3, #1]
 8000492:	60bb      	str	r3, [r7, #8]
 8000494:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000498:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	685b      	ldr	r3, [r3, #4]
 80004a0:	6858      	ldr	r0, [r3, #4]
 80004a2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80004a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	685b      	ldr	r3, [r3, #4]
 80004ae:	7a1b      	ldrb	r3, [r3, #8]
 80004b0:	607b      	str	r3, [r7, #4]
 80004b2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80004b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	685b      	ldr	r3, [r3, #4]
 80004be:	7a5b      	ldrb	r3, [r3, #9]
 80004c0:	603b      	str	r3, [r7, #0]
 80004c2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80004c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	685b      	ldr	r3, [r3, #4]
 80004ce:	68dc      	ldr	r4, [r3, #12]
 80004d0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80004d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	7a5b      	ldrb	r3, [r3, #9]
 80004dc:	f107 0518 	add.w	r5, r7, #24
 80004e0:	930a      	str	r3, [sp, #40]	; 0x28
 80004e2:	9409      	str	r4, [sp, #36]	; 0x24
 80004e4:	683c      	ldr	r4, [r7, #0]
 80004e6:	9408      	str	r4, [sp, #32]
 80004e8:	687c      	ldr	r4, [r7, #4]
 80004ea:	9407      	str	r4, [sp, #28]
 80004ec:	9006      	str	r0, [sp, #24]
 80004ee:	68b8      	ldr	r0, [r7, #8]
 80004f0:	9005      	str	r0, [sp, #20]
 80004f2:	68f8      	ldr	r0, [r7, #12]
 80004f4:	9004      	str	r0, [sp, #16]
 80004f6:	9103      	str	r1, [sp, #12]
 80004f8:	693b      	ldr	r3, [r7, #16]
 80004fa:	9302      	str	r3, [sp, #8]
 80004fc:	9601      	str	r6, [sp, #4]
 80004fe:	9200      	str	r2, [sp, #0]
 8000500:	4673      	mov	r3, lr
 8000502:	4662      	mov	r2, ip
 8000504:	4907      	ldr	r1, [pc, #28]	; (8000524 <updateScoreboard+0x11c>)
 8000506:	4628      	mov	r0, r5
 8000508:	f004 f984 	bl	8004814 <siprintf>

    SerialOut(packet, &USART1_PORT);
 800050c:	f107 0318 	add.w	r3, r7, #24
 8000510:	4905      	ldr	r1, [pc, #20]	; (8000528 <updateScoreboard+0x120>)
 8000512:	4618      	mov	r0, r3
 8000514:	f000 fd12 	bl	8000f3c <SerialOut>
}
 8000518:	bf00      	nop
 800051a:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 800051e:	46bd      	mov	sp, r7
 8000520:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000522:	bf00      	nop
 8000524:	08005b24 	.word	0x08005b24
 8000528:	20000004 	.word	0x20000004

0800052c <set_end_conds>:

uint8_t end_conds[4] = {0, 0, 0, 0}; //{<which condition to end game (0 = never end. 1 = shots, 2 = score, 3 = distance)>, <max_shots>, <max_score>, <max_tot_dist>}
bool end_conds_set = false; //have the end conditions been set by the user? (Either manually or via gameMode selection)

void set_end_conds(uint8_t data[BUFFER_SIZE], int size){
 800052c:	b580      	push	{r7, lr}
 800052e:	b084      	sub	sp, #16
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
 8000534:	6039      	str	r1, [r7, #0]
    uint8_t cond, val;
    sscanf(data, "%d:%d", &cond, &val);
 8000536:	f107 030e 	add.w	r3, r7, #14
 800053a:	f107 020f 	add.w	r2, r7, #15
 800053e:	490b      	ldr	r1, [pc, #44]	; (800056c <set_end_conds+0x40>)
 8000540:	6878      	ldr	r0, [r7, #4]
 8000542:	f004 f987 	bl	8004854 <siscanf>

    if(cond != 0){
 8000546:	7bfb      	ldrb	r3, [r7, #15]
 8000548:	2b00      	cmp	r3, #0
 800054a:	d007      	beq.n	800055c <set_end_conds+0x30>
        end_conds[cond] = val;
 800054c:	7bfb      	ldrb	r3, [r7, #15]
 800054e:	461a      	mov	r2, r3
 8000550:	7bb9      	ldrb	r1, [r7, #14]
 8000552:	4b07      	ldr	r3, [pc, #28]	; (8000570 <set_end_conds+0x44>)
 8000554:	5499      	strb	r1, [r3, r2]
        end_conds[0] = cond;
 8000556:	7bfa      	ldrb	r2, [r7, #15]
 8000558:	4b05      	ldr	r3, [pc, #20]	; (8000570 <set_end_conds+0x44>)
 800055a:	701a      	strb	r2, [r3, #0]
    }

    end_conds_set = true;
 800055c:	4b05      	ldr	r3, [pc, #20]	; (8000574 <set_end_conds+0x48>)
 800055e:	2201      	movs	r2, #1
 8000560:	701a      	strb	r2, [r3, #0]
}
 8000562:	bf00      	nop
 8000564:	3710      	adds	r7, #16
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	08005b5c 	.word	0x08005b5c
 8000570:	200000bc 	.word	0x200000bc
 8000574:	200000c0 	.word	0x200000c0

08000578 <gameLoop>:
        askCont = true;
    }
    contSet = true;
}

void gameLoop(unsigned char gamemode){
 8000578:	b580      	push	{r7, lr}
 800057a:	b08e      	sub	sp, #56	; 0x38
 800057c:	af00      	add	r7, sp, #0
 800057e:	4603      	mov	r3, r0
 8000580:	71fb      	strb	r3, [r7, #7]
    Player p1 = {0, 0, 0, 0, 0, 0, 0};
 8000582:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	605a      	str	r2, [r3, #4]
 800058c:	609a      	str	r2, [r3, #8]
 800058e:	60da      	str	r2, [r3, #12]
    Player p2 = {0, 0, 0, 0, 0, 0, 0};
 8000590:	f107 0314 	add.w	r3, r7, #20
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]
    Game gameState;
    gameState.mode = gamemode;
 800059e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005a2:	743b      	strb	r3, [r7, #16]
    gameState.p1 = &p1;
 80005a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005a8:	60bb      	str	r3, [r7, #8]
    gameState.p2 = &p2;
 80005aa:	f107 0314 	add.w	r3, r7, #20
 80005ae:	60fb      	str	r3, [r7, #12]
    gameState.turn = 0;
 80005b0:	2300      	movs	r3, #0
 80005b2:	747b      	strb	r3, [r7, #17]

    Game* gamePtr = &gameState;
 80005b4:	f107 0308 	add.w	r3, r7, #8
 80005b8:	637b      	str	r3, [r7, #52]	; 0x34

    if(abs(gamemode)==3){
 80005ba:	79fb      	ldrb	r3, [r7, #7]
 80005bc:	2b03      	cmp	r3, #3
 80005be:	d10f      	bne.n	80005e0 <gameLoop+0x68>
        demonstrate = &set_end_conds;
 80005c0:	4b3a      	ldr	r3, [pc, #232]	; (80006ac <gameLoop+0x134>)
 80005c2:	4a3b      	ldr	r2, [pc, #236]	; (80006b0 <gameLoop+0x138>)
 80005c4:	601a      	str	r2, [r3, #0]
        SerialOut("R", &USART1_PORT);
 80005c6:	493b      	ldr	r1, [pc, #236]	; (80006b4 <gameLoop+0x13c>)
 80005c8:	483b      	ldr	r0, [pc, #236]	; (80006b8 <gameLoop+0x140>)
 80005ca:	f000 fcb7 	bl	8000f3c <SerialOut>
        while(!end_conds_set){}
 80005ce:	bf00      	nop
 80005d0:	4b3a      	ldr	r3, [pc, #232]	; (80006bc <gameLoop+0x144>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	f083 0301 	eor.w	r3, r3, #1
 80005d8:	b2db      	uxtb	r3, r3
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d1f8      	bne.n	80005d0 <gameLoop+0x58>
 80005de:	e008      	b.n	80005f2 <gameLoop+0x7a>
    }

    else{
        end_conds[1] = DEFAULT_SHOTS;
 80005e0:	4b37      	ldr	r3, [pc, #220]	; (80006c0 <gameLoop+0x148>)
 80005e2:	220a      	movs	r2, #10
 80005e4:	705a      	strb	r2, [r3, #1]
        end_conds[2] = DEFAULT_SCORE;
 80005e6:	4b36      	ldr	r3, [pc, #216]	; (80006c0 <gameLoop+0x148>)
 80005e8:	220a      	movs	r2, #10
 80005ea:	709a      	strb	r2, [r3, #2]
        end_conds[3] = DEFAULT_DIST;
 80005ec:	4b34      	ldr	r3, [pc, #208]	; (80006c0 <gameLoop+0x148>)
 80005ee:	2264      	movs	r2, #100	; 0x64
 80005f0:	70da      	strb	r2, [r3, #3]
    }

    if(gamemode == 1){
 80005f2:	79fb      	ldrb	r3, [r7, #7]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d102      	bne.n	80005fe <gameLoop+0x86>
        end_conds[0] = 1;
 80005f8:	4b31      	ldr	r3, [pc, #196]	; (80006c0 <gameLoop+0x148>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	701a      	strb	r2, [r3, #0]
    }

    if(gamemode == 2){
 80005fe:	79fb      	ldrb	r3, [r7, #7]
 8000600:	2b02      	cmp	r3, #2
 8000602:	d102      	bne.n	800060a <gameLoop+0x92>
        end_conds[0] = 0;
 8000604:	4b2e      	ldr	r3, [pc, #184]	; (80006c0 <gameLoop+0x148>)
 8000606:	2200      	movs	r2, #0
 8000608:	701a      	strb	r2, [r3, #0]

    if(gamemode == -2){
        end_conds[0] = 1;
    }

    while(!button()){}
 800060a:	bf00      	nop
 800060c:	f7ff fe38 	bl	8000280 <button>
 8000610:	4603      	mov	r3, r0
 8000612:	f083 0301 	eor.w	r3, r3, #1
 8000616:	b2db      	uxtb	r3, r3
 8000618:	2b00      	cmp	r3, #0
 800061a:	d1f7      	bne.n	800060c <gameLoop+0x94>
    while(button()){}
 800061c:	bf00      	nop
 800061e:	f7ff fe2f 	bl	8000280 <button>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d1fa      	bne.n	800061e <gameLoop+0xa6>

    if(gamemode > 0){
 8000628:	79fb      	ldrb	r3, [r7, #7]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d03b      	beq.n	80006a6 <gameLoop+0x12e>
        while(true){
            gamePtr->turn = 0;
 800062e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000630:	2200      	movs	r2, #0
 8000632:	725a      	strb	r2, [r3, #9]

            if(gamemode == 1){
 8000634:	79fb      	ldrb	r3, [r7, #7]
 8000636:	2b01      	cmp	r3, #1
 8000638:	d104      	bne.n	8000644 <gameLoop+0xcc>
                setDist(gamePtr, 0);
 800063a:	2100      	movs	r1, #0
 800063c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800063e:	f7ff fea3 	bl	8000388 <setDist>
 8000642:	e006      	b.n	8000652 <gameLoop+0xda>
            }

            else if(gamemode == 2){
 8000644:	79fb      	ldrb	r3, [r7, #7]
 8000646:	2b02      	cmp	r3, #2
 8000648:	d103      	bne.n	8000652 <gameLoop+0xda>
                gamePtr->p1->shot_dist = 1;
 800064a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	2201      	movs	r2, #1
 8000650:	709a      	strb	r2, [r3, #2]
            }

            while(LDR()){}
 8000652:	bf00      	nop
 8000654:	f000 faea 	bl	8000c2c <LDR>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d1fa      	bne.n	8000654 <gameLoop+0xdc>

//            while(!endCondition(gamePtr, end_conds)){
            while(1){
                while(!LDR()){}
 800065e:	bf00      	nop
 8000660:	f000 fae4 	bl	8000c2c <LDR>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d0fa      	beq.n	8000660 <gameLoop+0xe8>
                shotTaken(gamePtr);
 800066a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800066c:	f7ff fe75 	bl	800035a <shotTaken>
                while(LDR()){
 8000670:	e013      	b.n	800069a <gameLoop+0x122>
                    if(button()){
 8000672:	f7ff fe05 	bl	8000280 <button>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d00e      	beq.n	800069a <gameLoop+0x122>
                        score(gamePtr);
 800067c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800067e:	f7ff fe31 	bl	80002e4 <score>
                        while(button()){}
 8000682:	bf00      	nop
 8000684:	f7ff fdfc 	bl	8000280 <button>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d1fa      	bne.n	8000684 <gameLoop+0x10c>
                        while(LDR()){}
 800068e:	bf00      	nop
 8000690:	f000 facc 	bl	8000c2c <LDR>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d1fa      	bne.n	8000690 <gameLoop+0x118>
                while(LDR()){
 800069a:	f000 fac7 	bl	8000c2c <LDR>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d1e6      	bne.n	8000672 <gameLoop+0xfa>
                while(!LDR()){}
 80006a4:	e7db      	b.n	800065e <gameLoop+0xe6>
            else{
                return;
            }
        }
    }
}
 80006a6:	3738      	adds	r7, #56	; 0x38
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	20000588 	.word	0x20000588
 80006b0:	0800052d 	.word	0x0800052d
 80006b4:	20000004 	.word	0x20000004
 80006b8:	08005b64 	.word	0x08005b64
 80006bc:	200000c0 	.word	0x200000c0
 80006c0:	200000bc 	.word	0x200000bc

080006c4 <get_distance>:
static void MX_SPI1_Init(void);
static void MX_USB_PCD_Init(void);
void initialise_ptu_i2c(I2C_HandleTypeDef *i2c);

// Function to get distance from LiDAR in millimeters
uint16_t get_distance(void) {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b086      	sub	sp, #24
 80006c8:	af04      	add	r7, sp, #16
    HAL_StatusTypeDef return_value = 0x00;
 80006ca:	2300      	movs	r3, #0
 80006cc:	717b      	strb	r3, [r7, #5]
    uint8_t lidar_value = 0x03;
 80006ce:	2303      	movs	r3, #3
 80006d0:	713b      	strb	r3, [r7, #4]
    uint8_t lidar_MSBa = 0x00;
 80006d2:	2300      	movs	r3, #0
 80006d4:	70fb      	strb	r3, [r7, #3]
    uint8_t lidar_LSBa = 0x00;
 80006d6:	2300      	movs	r3, #0
 80006d8:	70bb      	strb	r3, [r7, #2]
    volatile uint16_t lidar_distance = 0xff;
 80006da:	23ff      	movs	r3, #255	; 0xff
 80006dc:	803b      	strh	r3, [r7, #0]
    uint16_t timeout = 0;
 80006de:	2300      	movs	r3, #0
 80006e0:	80fb      	strh	r3, [r7, #6]

    // Command the LiDAR to perform a measurement
    return_value = HAL_I2C_Mem_Write(&hi2c1, LIDAR_WR, 0x00, 1, &lidar_value, 1, 100);
 80006e2:	2364      	movs	r3, #100	; 0x64
 80006e4:	9302      	str	r3, [sp, #8]
 80006e6:	2301      	movs	r3, #1
 80006e8:	9301      	str	r3, [sp, #4]
 80006ea:	1d3b      	adds	r3, r7, #4
 80006ec:	9300      	str	r3, [sp, #0]
 80006ee:	2301      	movs	r3, #1
 80006f0:	2200      	movs	r2, #0
 80006f2:	21c4      	movs	r1, #196	; 0xc4
 80006f4:	4826      	ldr	r0, [pc, #152]	; (8000790 <get_distance+0xcc>)
 80006f6:	f001 faab 	bl	8001c50 <HAL_I2C_Mem_Write>
 80006fa:	4603      	mov	r3, r0
 80006fc:	717b      	strb	r3, [r7, #5]

    // Wait for the LiDAR measurement to complete
    lidar_value = 0xff;
 80006fe:	23ff      	movs	r3, #255	; 0xff
 8000700:	713b      	strb	r3, [r7, #4]
    while ((lidar_value & 0x01) != 0x00) {
 8000702:	e038      	b.n	8000776 <get_distance+0xb2>
        // Read the status register to check if measurement is done
        return_value = HAL_I2C_Mem_Read(&hi2c1, LIDAR_RD, 0x01, 1, &lidar_value, 1, 100);
 8000704:	2364      	movs	r3, #100	; 0x64
 8000706:	9302      	str	r3, [sp, #8]
 8000708:	2301      	movs	r3, #1
 800070a:	9301      	str	r3, [sp, #4]
 800070c:	1d3b      	adds	r3, r7, #4
 800070e:	9300      	str	r3, [sp, #0]
 8000710:	2301      	movs	r3, #1
 8000712:	2201      	movs	r2, #1
 8000714:	21c5      	movs	r1, #197	; 0xc5
 8000716:	481e      	ldr	r0, [pc, #120]	; (8000790 <get_distance+0xcc>)
 8000718:	f001 fbae 	bl	8001e78 <HAL_I2C_Mem_Read>
 800071c:	4603      	mov	r3, r0
 800071e:	717b      	strb	r3, [r7, #5]

        // Read the measured distance from the LiDAR registers
        return_value = HAL_I2C_Mem_Read(&hi2c1, LIDAR_RD, 0x0f, 1, &lidar_MSBa, 1, 100);
 8000720:	2364      	movs	r3, #100	; 0x64
 8000722:	9302      	str	r3, [sp, #8]
 8000724:	2301      	movs	r3, #1
 8000726:	9301      	str	r3, [sp, #4]
 8000728:	1cfb      	adds	r3, r7, #3
 800072a:	9300      	str	r3, [sp, #0]
 800072c:	2301      	movs	r3, #1
 800072e:	220f      	movs	r2, #15
 8000730:	21c5      	movs	r1, #197	; 0xc5
 8000732:	4817      	ldr	r0, [pc, #92]	; (8000790 <get_distance+0xcc>)
 8000734:	f001 fba0 	bl	8001e78 <HAL_I2C_Mem_Read>
 8000738:	4603      	mov	r3, r0
 800073a:	717b      	strb	r3, [r7, #5]
        return_value = HAL_I2C_Mem_Read(&hi2c1, LIDAR_RD, 0x10, 1, &lidar_LSBa, 1, 100);
 800073c:	2364      	movs	r3, #100	; 0x64
 800073e:	9302      	str	r3, [sp, #8]
 8000740:	2301      	movs	r3, #1
 8000742:	9301      	str	r3, [sp, #4]
 8000744:	1cbb      	adds	r3, r7, #2
 8000746:	9300      	str	r3, [sp, #0]
 8000748:	2301      	movs	r3, #1
 800074a:	2210      	movs	r2, #16
 800074c:	21c5      	movs	r1, #197	; 0xc5
 800074e:	4810      	ldr	r0, [pc, #64]	; (8000790 <get_distance+0xcc>)
 8000750:	f001 fb92 	bl	8001e78 <HAL_I2C_Mem_Read>
 8000754:	4603      	mov	r3, r0
 8000756:	717b      	strb	r3, [r7, #5]
        // Combine the MSB and LSB to form the distance in mm
        lidar_distance = ((lidar_MSBa << 8) | lidar_LSBa);
 8000758:	78fb      	ldrb	r3, [r7, #3]
 800075a:	021b      	lsls	r3, r3, #8
 800075c:	b21a      	sxth	r2, r3
 800075e:	78bb      	ldrb	r3, [r7, #2]
 8000760:	b21b      	sxth	r3, r3
 8000762:	4313      	orrs	r3, r2
 8000764:	b21b      	sxth	r3, r3
 8000766:	b29b      	uxth	r3, r3
 8000768:	803b      	strh	r3, [r7, #0]
        timeout += 1;
 800076a:	88fb      	ldrh	r3, [r7, #6]
 800076c:	3301      	adds	r3, #1
 800076e:	80fb      	strh	r3, [r7, #6]
        if (timeout > 0xff) {
 8000770:	88fb      	ldrh	r3, [r7, #6]
 8000772:	2bff      	cmp	r3, #255	; 0xff
 8000774:	d805      	bhi.n	8000782 <get_distance+0xbe>
    while ((lidar_value & 0x01) != 0x00) {
 8000776:	793b      	ldrb	r3, [r7, #4]
 8000778:	f003 0301 	and.w	r3, r3, #1
 800077c:	2b00      	cmp	r3, #0
 800077e:	d1c1      	bne.n	8000704 <get_distance+0x40>
 8000780:	e000      	b.n	8000784 <get_distance+0xc0>
            break;
 8000782:	bf00      	nop
        }
    }

    return lidar_distance;
 8000784:	883b      	ldrh	r3, [r7, #0]
 8000786:	b29b      	uxth	r3, r3
}
 8000788:	4618      	mov	r0, r3
 800078a:	3708      	adds	r7, #8
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	200000c4 	.word	0x200000c4

08000794 <initLidar>:

void initLidar(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b086      	sub	sp, #24
 8000798:	af04      	add	r7, sp, #16

	HAL_StatusTypeDef return_value = 0x00;
 800079a:	2300      	movs	r3, #0
 800079c:	71fb      	strb	r3, [r7, #7]


  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800079e:	f000 fec5 	bl	800152c <HAL_Init>

  /* Configure the system clock */
	SystemClock_Config();
 80007a2:	f000 f82b 	bl	80007fc <SystemClock_Config>


	/* Initialize all configured peripherals */
	MX_GPIO_Init(); // Initialize GPIO pins.
 80007a6:	f000 f92d 	bl	8000a04 <MX_GPIO_Init>
	MX_I2C1_Init(); // Initialize I2C1.
 80007aa:	f000 f88b 	bl	80008c4 <MX_I2C1_Init>
	MX_SPI1_Init(); // Initialize SPI1.
 80007ae:	f000 f8c9 	bl	8000944 <MX_SPI1_Init>
	MX_USB_PCD_Init(); // Initialize USB.
 80007b2:	f000 f905 	bl	80009c0 <MX_USB_PCD_Init>



	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1); // Start input capture on TIM1 Channel 1.
 80007b6:	2100      	movs	r1, #0
 80007b8:	480e      	ldr	r0, [pc, #56]	; (80007f4 <initLidar+0x60>)
 80007ba:	f003 fd19 	bl	80041f0 <HAL_TIM_IC_Start_IT>


	initialise_ptu_i2c(&hi2c1); // Initialize PTU communication over I2C.
 80007be:	480e      	ldr	r0, [pc, #56]	; (80007f8 <initLidar+0x64>)
 80007c0:	f000 f99e 	bl	8000b00 <initialise_ptu_i2c>


	// reset lidar board
	uint8_t reset_value = 0x00;
 80007c4:	2300      	movs	r3, #0
 80007c6:	71bb      	strb	r3, [r7, #6]
	return_value = HAL_I2C_Mem_Write(&hi2c1, LIDAR_WR, 0x00, 1, &reset_value, 1, 10);
 80007c8:	230a      	movs	r3, #10
 80007ca:	9302      	str	r3, [sp, #8]
 80007cc:	2301      	movs	r3, #1
 80007ce:	9301      	str	r3, [sp, #4]
 80007d0:	1dbb      	adds	r3, r7, #6
 80007d2:	9300      	str	r3, [sp, #0]
 80007d4:	2301      	movs	r3, #1
 80007d6:	2200      	movs	r2, #0
 80007d8:	21c4      	movs	r1, #196	; 0xc4
 80007da:	4807      	ldr	r0, [pc, #28]	; (80007f8 <initLidar+0x64>)
 80007dc:	f001 fa38 	bl	8001c50 <HAL_I2C_Mem_Write>
 80007e0:	4603      	mov	r3, r0
 80007e2:	71fb      	strb	r3, [r7, #7]

	// delay for initialisation of the lidar
	HAL_Delay(100);
 80007e4:	2064      	movs	r0, #100	; 0x64
 80007e6:	f000 ff07 	bl	80015f8 <HAL_Delay>
}
 80007ea:	bf00      	nop
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	2000017c 	.word	0x2000017c
 80007f8:	200000c4 	.word	0x200000c4

080007fc <SystemClock_Config>:




void SystemClock_Config(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b09e      	sub	sp, #120	; 0x78
 8000800:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000802:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000806:	2228      	movs	r2, #40	; 0x28
 8000808:	2100      	movs	r1, #0
 800080a:	4618      	mov	r0, r3
 800080c:	f004 f850 	bl	80048b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000810:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]
 800081c:	60da      	str	r2, [r3, #12]
 800081e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000820:	463b      	mov	r3, r7
 8000822:	223c      	movs	r2, #60	; 0x3c
 8000824:	2100      	movs	r1, #0
 8000826:	4618      	mov	r0, r3
 8000828:	f004 f842 	bl	80048b0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800082c:	2303      	movs	r3, #3
 800082e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000830:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000834:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000836:	2300      	movs	r3, #0
 8000838:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800083a:	2301      	movs	r3, #1
 800083c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800083e:	2310      	movs	r3, #16
 8000840:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000842:	2302      	movs	r3, #2
 8000844:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000846:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800084a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800084c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000850:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000852:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000856:	4618      	mov	r0, r3
 8000858:	f002 f84a 	bl	80028f0 <HAL_RCC_OscConfig>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000862:	f000 f96a 	bl	8000b3a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000866:	230f      	movs	r3, #15
 8000868:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800086a:	2302      	movs	r3, #2
 800086c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800086e:	2300      	movs	r3, #0
 8000870:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000872:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000876:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000878:	2300      	movs	r3, #0
 800087a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800087c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000880:	2101      	movs	r1, #1
 8000882:	4618      	mov	r0, r3
 8000884:	f003 f872 	bl	800396c <HAL_RCC_ClockConfig>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800088e:	f000 f954 	bl	8000b3a <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1
 8000892:	4b0b      	ldr	r3, [pc, #44]	; (80008c0 <SystemClock_Config+0xc4>)
 8000894:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000896:	2300      	movs	r3, #0
 8000898:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 800089a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800089e:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80008a0:	2300      	movs	r3, #0
 80008a2:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008a4:	463b      	mov	r3, r7
 80008a6:	4618      	mov	r0, r3
 80008a8:	f003 fa46 	bl	8003d38 <HAL_RCCEx_PeriphCLKConfig>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80008b2:	f000 f942 	bl	8000b3a <Error_Handler>
  }
}
 80008b6:	bf00      	nop
 80008b8:	3778      	adds	r7, #120	; 0x78
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	00021020 	.word	0x00021020

080008c4 <MX_I2C1_Init>:

static void MX_I2C1_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  hi2c1.Instance = I2C1;
 80008c8:	4b1b      	ldr	r3, [pc, #108]	; (8000938 <MX_I2C1_Init+0x74>)
 80008ca:	4a1c      	ldr	r2, [pc, #112]	; (800093c <MX_I2C1_Init+0x78>)
 80008cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80008ce:	4b1a      	ldr	r3, [pc, #104]	; (8000938 <MX_I2C1_Init+0x74>)
 80008d0:	4a1b      	ldr	r2, [pc, #108]	; (8000940 <MX_I2C1_Init+0x7c>)
 80008d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008d4:	4b18      	ldr	r3, [pc, #96]	; (8000938 <MX_I2C1_Init+0x74>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008da:	4b17      	ldr	r3, [pc, #92]	; (8000938 <MX_I2C1_Init+0x74>)
 80008dc:	2201      	movs	r2, #1
 80008de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008e0:	4b15      	ldr	r3, [pc, #84]	; (8000938 <MX_I2C1_Init+0x74>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008e6:	4b14      	ldr	r3, [pc, #80]	; (8000938 <MX_I2C1_Init+0x74>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008ec:	4b12      	ldr	r3, [pc, #72]	; (8000938 <MX_I2C1_Init+0x74>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008f2:	4b11      	ldr	r3, [pc, #68]	; (8000938 <MX_I2C1_Init+0x74>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008f8:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <MX_I2C1_Init+0x74>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008fe:	480e      	ldr	r0, [pc, #56]	; (8000938 <MX_I2C1_Init+0x74>)
 8000900:	f001 f916 	bl	8001b30 <HAL_I2C_Init>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800090a:	f000 f916 	bl	8000b3a <Error_Handler>
  }

  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800090e:	2100      	movs	r1, #0
 8000910:	4809      	ldr	r0, [pc, #36]	; (8000938 <MX_I2C1_Init+0x74>)
 8000912:	f001 fe83 	bl	800261c <HAL_I2CEx_ConfigAnalogFilter>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800091c:	f000 f90d 	bl	8000b3a <Error_Handler>
  }

  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000920:	2100      	movs	r1, #0
 8000922:	4805      	ldr	r0, [pc, #20]	; (8000938 <MX_I2C1_Init+0x74>)
 8000924:	f001 fec5 	bl	80026b2 <HAL_I2CEx_ConfigDigitalFilter>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800092e:	f000 f904 	bl	8000b3a <Error_Handler>
  }

}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	200000c4 	.word	0x200000c4
 800093c:	40005400 	.word	0x40005400
 8000940:	2000090e 	.word	0x2000090e

08000944 <MX_SPI1_Init>:

static void MX_SPI1_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  hspi1.Instance = SPI1;
 8000948:	4b1b      	ldr	r3, [pc, #108]	; (80009b8 <MX_SPI1_Init+0x74>)
 800094a:	4a1c      	ldr	r2, [pc, #112]	; (80009bc <MX_SPI1_Init+0x78>)
 800094c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800094e:	4b1a      	ldr	r3, [pc, #104]	; (80009b8 <MX_SPI1_Init+0x74>)
 8000950:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000954:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000956:	4b18      	ldr	r3, [pc, #96]	; (80009b8 <MX_SPI1_Init+0x74>)
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800095c:	4b16      	ldr	r3, [pc, #88]	; (80009b8 <MX_SPI1_Init+0x74>)
 800095e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000962:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000964:	4b14      	ldr	r3, [pc, #80]	; (80009b8 <MX_SPI1_Init+0x74>)
 8000966:	2200      	movs	r2, #0
 8000968:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800096a:	4b13      	ldr	r3, [pc, #76]	; (80009b8 <MX_SPI1_Init+0x74>)
 800096c:	2200      	movs	r2, #0
 800096e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000970:	4b11      	ldr	r3, [pc, #68]	; (80009b8 <MX_SPI1_Init+0x74>)
 8000972:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000976:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000978:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <MX_SPI1_Init+0x74>)
 800097a:	2208      	movs	r2, #8
 800097c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800097e:	4b0e      	ldr	r3, [pc, #56]	; (80009b8 <MX_SPI1_Init+0x74>)
 8000980:	2200      	movs	r2, #0
 8000982:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000984:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <MX_SPI1_Init+0x74>)
 8000986:	2200      	movs	r2, #0
 8000988:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800098a:	4b0b      	ldr	r3, [pc, #44]	; (80009b8 <MX_SPI1_Init+0x74>)
 800098c:	2200      	movs	r2, #0
 800098e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000990:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <MX_SPI1_Init+0x74>)
 8000992:	2207      	movs	r2, #7
 8000994:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000996:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <MX_SPI1_Init+0x74>)
 8000998:	2200      	movs	r2, #0
 800099a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800099c:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <MX_SPI1_Init+0x74>)
 800099e:	2208      	movs	r2, #8
 80009a0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009a2:	4805      	ldr	r0, [pc, #20]	; (80009b8 <MX_SPI1_Init+0x74>)
 80009a4:	f003 fb78 	bl	8004098 <HAL_SPI_Init>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80009ae:	f000 f8c4 	bl	8000b3a <Error_Handler>
  }
}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	20000118 	.word	0x20000118
 80009bc:	40013000 	.word	0x40013000

080009c0 <MX_USB_PCD_Init>:


static void MX_USB_PCD_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  hpcd_USB_FS.Instance = USB;
 80009c4:	4b0d      	ldr	r3, [pc, #52]	; (80009fc <MX_USB_PCD_Init+0x3c>)
 80009c6:	4a0e      	ldr	r2, [pc, #56]	; (8000a00 <MX_USB_PCD_Init+0x40>)
 80009c8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80009ca:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <MX_USB_PCD_Init+0x3c>)
 80009cc:	2208      	movs	r2, #8
 80009ce:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80009d0:	4b0a      	ldr	r3, [pc, #40]	; (80009fc <MX_USB_PCD_Init+0x3c>)
 80009d2:	2202      	movs	r2, #2
 80009d4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009d6:	4b09      	ldr	r3, [pc, #36]	; (80009fc <MX_USB_PCD_Init+0x3c>)
 80009d8:	2202      	movs	r2, #2
 80009da:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80009dc:	4b07      	ldr	r3, [pc, #28]	; (80009fc <MX_USB_PCD_Init+0x3c>)
 80009de:	2200      	movs	r2, #0
 80009e0:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80009e2:	4b06      	ldr	r3, [pc, #24]	; (80009fc <MX_USB_PCD_Init+0x3c>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80009e8:	4804      	ldr	r0, [pc, #16]	; (80009fc <MX_USB_PCD_Init+0x3c>)
 80009ea:	f001 feae 	bl	800274a <HAL_PCD_Init>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 80009f4:	f000 f8a1 	bl	8000b3a <Error_Handler>
  }

}
 80009f8:	bf00      	nop
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	20000214 	.word	0x20000214
 8000a00:	40005c00 	.word	0x40005c00

08000a04 <MX_GPIO_Init>:


static void MX_GPIO_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b08a      	sub	sp, #40	; 0x28
 8000a08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0a:	f107 0314 	add.w	r3, r7, #20
 8000a0e:	2200      	movs	r2, #0
 8000a10:	601a      	str	r2, [r3, #0]
 8000a12:	605a      	str	r2, [r3, #4]
 8000a14:	609a      	str	r2, [r3, #8]
 8000a16:	60da      	str	r2, [r3, #12]
 8000a18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a1a:	4b37      	ldr	r3, [pc, #220]	; (8000af8 <MX_GPIO_Init+0xf4>)
 8000a1c:	695b      	ldr	r3, [r3, #20]
 8000a1e:	4a36      	ldr	r2, [pc, #216]	; (8000af8 <MX_GPIO_Init+0xf4>)
 8000a20:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a24:	6153      	str	r3, [r2, #20]
 8000a26:	4b34      	ldr	r3, [pc, #208]	; (8000af8 <MX_GPIO_Init+0xf4>)
 8000a28:	695b      	ldr	r3, [r3, #20]
 8000a2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a2e:	613b      	str	r3, [r7, #16]
 8000a30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a32:	4b31      	ldr	r3, [pc, #196]	; (8000af8 <MX_GPIO_Init+0xf4>)
 8000a34:	695b      	ldr	r3, [r3, #20]
 8000a36:	4a30      	ldr	r2, [pc, #192]	; (8000af8 <MX_GPIO_Init+0xf4>)
 8000a38:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000a3c:	6153      	str	r3, [r2, #20]
 8000a3e:	4b2e      	ldr	r3, [pc, #184]	; (8000af8 <MX_GPIO_Init+0xf4>)
 8000a40:	695b      	ldr	r3, [r3, #20]
 8000a42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a4a:	4b2b      	ldr	r3, [pc, #172]	; (8000af8 <MX_GPIO_Init+0xf4>)
 8000a4c:	695b      	ldr	r3, [r3, #20]
 8000a4e:	4a2a      	ldr	r2, [pc, #168]	; (8000af8 <MX_GPIO_Init+0xf4>)
 8000a50:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a54:	6153      	str	r3, [r2, #20]
 8000a56:	4b28      	ldr	r3, [pc, #160]	; (8000af8 <MX_GPIO_Init+0xf4>)
 8000a58:	695b      	ldr	r3, [r3, #20]
 8000a5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a5e:	60bb      	str	r3, [r7, #8]
 8000a60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a62:	4b25      	ldr	r3, [pc, #148]	; (8000af8 <MX_GPIO_Init+0xf4>)
 8000a64:	695b      	ldr	r3, [r3, #20]
 8000a66:	4a24      	ldr	r2, [pc, #144]	; (8000af8 <MX_GPIO_Init+0xf4>)
 8000a68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a6c:	6153      	str	r3, [r2, #20]
 8000a6e:	4b22      	ldr	r3, [pc, #136]	; (8000af8 <MX_GPIO_Init+0xf4>)
 8000a70:	695b      	ldr	r3, [r3, #20]
 8000a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a7a:	4b1f      	ldr	r3, [pc, #124]	; (8000af8 <MX_GPIO_Init+0xf4>)
 8000a7c:	695b      	ldr	r3, [r3, #20]
 8000a7e:	4a1e      	ldr	r2, [pc, #120]	; (8000af8 <MX_GPIO_Init+0xf4>)
 8000a80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a84:	6153      	str	r3, [r2, #20]
 8000a86:	4b1c      	ldr	r3, [pc, #112]	; (8000af8 <MX_GPIO_Init+0xf4>)
 8000a88:	695b      	ldr	r3, [r3, #20]
 8000a8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a8e:	603b      	str	r3, [r7, #0]
 8000a90:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000a92:	2200      	movs	r2, #0
 8000a94:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000a98:	4818      	ldr	r0, [pc, #96]	; (8000afc <MX_GPIO_Init+0xf8>)
 8000a9a:	f001 f831 	bl	8001b00 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8000a9e:	2337      	movs	r3, #55	; 0x37
 8000aa0:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000aa2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000aa6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000aac:	f107 0314 	add.w	r3, r7, #20
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4812      	ldr	r0, [pc, #72]	; (8000afc <MX_GPIO_Init+0xf8>)
 8000ab4:	f000 feaa 	bl	800180c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000ab8:	f64f 7308 	movw	r3, #65288	; 0xff08
 8000abc:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000aca:	f107 0314 	add.w	r3, r7, #20
 8000ace:	4619      	mov	r1, r3
 8000ad0:	480a      	ldr	r0, [pc, #40]	; (8000afc <MX_GPIO_Init+0xf8>)
 8000ad2:	f000 fe9b 	bl	800180c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ada:	2300      	movs	r3, #0
 8000adc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ae2:	f107 0314 	add.w	r3, r7, #20
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aec:	f000 fe8e 	bl	800180c <HAL_GPIO_Init>

}
 8000af0:	bf00      	nop
 8000af2:	3728      	adds	r7, #40	; 0x28
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	40021000 	.word	0x40021000
 8000afc:	48001000 	.word	0x48001000

08000b00 <initialise_ptu_i2c>:

void initialise_ptu_i2c(I2C_HandleTypeDef *i2c) {
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b088      	sub	sp, #32
 8000b04:	af04      	add	r7, sp, #16
 8000b06:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef return_value = 0x00;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	73fb      	strb	r3, [r7, #15]

	uint8_t reg_1 = 0b00001111;
 8000b0c:	230f      	movs	r3, #15
 8000b0e:	73bb      	strb	r3, [r7, #14]

	// reset lidar board
	uint8_t reset_value = 0x00;
 8000b10:	2300      	movs	r3, #0
 8000b12:	737b      	strb	r3, [r7, #13]
	return_value = HAL_I2C_Mem_Write(i2c, LIDAR_WR, 0x00, 1, &reset_value, 1, 10);
 8000b14:	230a      	movs	r3, #10
 8000b16:	9302      	str	r3, [sp, #8]
 8000b18:	2301      	movs	r3, #1
 8000b1a:	9301      	str	r3, [sp, #4]
 8000b1c:	f107 030d 	add.w	r3, r7, #13
 8000b20:	9300      	str	r3, [sp, #0]
 8000b22:	2301      	movs	r3, #1
 8000b24:	2200      	movs	r2, #0
 8000b26:	21c4      	movs	r1, #196	; 0xc4
 8000b28:	6878      	ldr	r0, [r7, #4]
 8000b2a:	f001 f891 	bl	8001c50 <HAL_I2C_Mem_Write>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	73fb      	strb	r3, [r7, #15]
}
 8000b32:	bf00      	nop
 8000b34:	3710      	adds	r7, #16
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <Error_Handler>:


void Error_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b3e:	b672      	cpsid	i
}
 8000b40:	bf00      	nop
	__disable_irq();
	while (1)
 8000b42:	e7fe      	b.n	8000b42 <Error_Handler+0x8>

08000b44 <enable_clocks>:
void (*inpDetect)(); //what to do when input is detected
void (*received)(); //what to do once string is terminated
void (*demonstrate)(); //how to show that the string has been input

// enable the clocks for desired peripherals (GPIOA, C and E)
void enable_clocks() {
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 8000b48:	4b05      	ldr	r3, [pc, #20]	; (8000b60 <enable_clocks+0x1c>)
 8000b4a:	695b      	ldr	r3, [r3, #20]
 8000b4c:	4a04      	ldr	r2, [pc, #16]	; (8000b60 <enable_clocks+0x1c>)
 8000b4e:	f443 1328 	orr.w	r3, r3, #2752512	; 0x2a0000
 8000b52:	6153      	str	r3, [r2, #20]
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	40021000 	.word	0x40021000

08000b64 <initialise_board>:


// initialise the discovery board I/O (just outputs: inputs are selected by default)
void initialise_board() {
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
	// get a pointer to the second half word of the MODER register (for outputs pe8-15)
	uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 8000b6a:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <initialise_board+0x20>)
 8000b6c:	607b      	str	r3, [r7, #4]
	*led_output_registers = 0x5555;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	f245 5255 	movw	r2, #21845	; 0x5555
 8000b74:	801a      	strh	r2, [r3, #0]
}
 8000b76:	bf00      	nop
 8000b78:	370c      	adds	r7, #12
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	48001002 	.word	0x48001002

08000b88 <setup_gpio_PA6_INPUT>:

void setup_gpio_PA6_INPUT() {
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
    RCC->AHBENR |= RCC_AHBENR_GPIOAEN;  // Enable GPIOA clock
 8000b8c:	4b0d      	ldr	r3, [pc, #52]	; (8000bc4 <setup_gpio_PA6_INPUT+0x3c>)
 8000b8e:	695b      	ldr	r3, [r3, #20]
 8000b90:	4a0c      	ldr	r2, [pc, #48]	; (8000bc4 <setup_gpio_PA6_INPUT+0x3c>)
 8000b92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b96:	6153      	str	r3, [r2, #20]

    // Configure PA6 as input
    GPIOA->MODER &= ~(0x3 << (6 * 2));  // Clear mode bits for PA6 to set it as input
 8000b98:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000ba2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000ba6:	6013      	str	r3, [r2, #0]

    // No need to configure OTYPER for input mode
    // No need to configure OSPEEDR for input mode
    // Configure PUPDR as needed (e.g., no pull-up/pull-down, pull-up, or pull-down)
    GPIOA->PUPDR &= ~(0x3 << (6 * 2));  // Ensure no pull-up or pull-down
 8000ba8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000bac:	68db      	ldr	r3, [r3, #12]
 8000bae:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000bb2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000bb6:	60d3      	str	r3, [r2, #12]
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	40021000 	.word	0x40021000

08000bc8 <gameModeFind>:
	return button();
}

int gamemode = 1;

void gameModeFind(uint8_t data[BUFFER_SIZE], int size){
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
 8000bd0:	6039      	str	r1, [r7, #0]
	gamemode = data[0] - 49;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	3b31      	subs	r3, #49	; 0x31
 8000bd8:	4a03      	ldr	r2, [pc, #12]	; (8000be8 <gameModeFind+0x20>)
 8000bda:	6013      	str	r3, [r2, #0]
}
 8000bdc:	bf00      	nop
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	20000000 	.word	0x20000000

08000bec <Init_PA4>:

void Init_PA4(){
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN; // Probably isn't needed as clocks will already be initialised i assume
 8000bf0:	4b0d      	ldr	r3, [pc, #52]	; (8000c28 <Init_PA4+0x3c>)
 8000bf2:	695b      	ldr	r3, [r3, #20]
 8000bf4:	4a0c      	ldr	r2, [pc, #48]	; (8000c28 <Init_PA4+0x3c>)
 8000bf6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bfa:	6153      	str	r3, [r2, #20]
	GPIOA->MODER &= ~(GPIO_MODER_MODER4); // Clear PA4
 8000bfc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000c06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000c0a:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPDR4); // Clear pupdr
 8000c0c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c10:	68db      	ldr	r3, [r3, #12]
 8000c12:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000c16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000c1a:	60d3      	str	r3, [r2, #12]
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	40021000 	.word	0x40021000

08000c2c <LDR>:

bool LDR(void) {
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
    // Check if PA6 input is high
    if (GPIOA->IDR & (1 << 4)) {
 8000c30:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c34:	691b      	ldr	r3, [r3, #16]
 8000c36:	f003 0310 	and.w	r3, r3, #16
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <LDR+0x16>
        return true;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	e000      	b.n	8000c44 <LDR+0x18>
    }
    else {
        return false;
 8000c42:	2300      	movs	r3, #0
    }
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
	...

08000c50 <main>:
//	}
//	return false;
//}

int main(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b0a0      	sub	sp, #128	; 0x80
 8000c54:	af00      	add	r7, sp, #0

	uint8_t string_to_send[64] = "INTT\n";
 8000c56:	4a2d      	ldr	r2, [pc, #180]	; (8000d0c <main+0xbc>)
 8000c58:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c5c:	6810      	ldr	r0, [r2, #0]
 8000c5e:	6018      	str	r0, [r3, #0]
 8000c60:	8892      	ldrh	r2, [r2, #4]
 8000c62:	809a      	strh	r2, [r3, #4]
 8000c64:	f107 0346 	add.w	r3, r7, #70	; 0x46
 8000c68:	223a      	movs	r2, #58	; 0x3a
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f003 fe1f 	bl	80048b0 <memset>
	uint8_t ready_string[64] = "R\n";
 8000c72:	f640 2352 	movw	r3, #2642	; 0xa52
 8000c76:	603b      	str	r3, [r7, #0]
 8000c78:	1d3b      	adds	r3, r7, #4
 8000c7a:	223c      	movs	r2, #60	; 0x3c
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f003 fe16 	bl	80048b0 <memset>

	enable_clocks();
 8000c84:	f7ff ff5e 	bl	8000b44 <enable_clocks>
	initialise_board();
 8000c88:	f7ff ff6c 	bl	8000b64 <initialise_board>

	SerialInitialise(BAUD_115200, &USART1_PORT, &finished_transmission);
 8000c8c:	4a20      	ldr	r2, [pc, #128]	; (8000d10 <main+0xc0>)
 8000c8e:	4921      	ldr	r1, [pc, #132]	; (8000d14 <main+0xc4>)
 8000c90:	2004      	movs	r0, #4
 8000c92:	f000 f897 	bl	8000dc4 <SerialInitialise>
	enable_USART_interrupt();
 8000c96:	f000 fa6b 	bl	8001170 <enable_USART_interrupt>

	initLidar();
 8000c9a:	f7ff fd7b 	bl	8000794 <initLidar>

	setup_gpio_PA6_INPUT();
 8000c9e:	f7ff ff73 	bl	8000b88 <setup_gpio_PA6_INPUT>

	Init_PA4();
 8000ca2:	f7ff ffa3 	bl	8000bec <Init_PA4>


	inpDetect = &SerialInput; //what to do when input is detected
 8000ca6:	4b1c      	ldr	r3, [pc, #112]	; (8000d18 <main+0xc8>)
 8000ca8:	4a1c      	ldr	r2, [pc, #112]	; (8000d1c <main+0xcc>)
 8000caa:	601a      	str	r2, [r3, #0]
	received = &DoubleBuffer; //what to do once string is terminated
 8000cac:	4b1c      	ldr	r3, [pc, #112]	; (8000d20 <main+0xd0>)
 8000cae:	4a1d      	ldr	r2, [pc, #116]	; (8000d24 <main+0xd4>)
 8000cb0:	601a      	str	r2, [r3, #0]
	demonstrate = &gameModeFind;
 8000cb2:	4b1d      	ldr	r3, [pc, #116]	; (8000d28 <main+0xd8>)
 8000cb4:	4a1d      	ldr	r2, [pc, #116]	; (8000d2c <main+0xdc>)
 8000cb6:	601a      	str	r2, [r3, #0]

	while(!gamemode){}
 8000cb8:	bf00      	nop
 8000cba:	4b1d      	ldr	r3, [pc, #116]	; (8000d30 <main+0xe0>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d0fb      	beq.n	8000cba <main+0x6a>

	//signed char gamemode = 1;

	while(!button()){}
 8000cc2:	bf00      	nop
 8000cc4:	f7ff fadc 	bl	8000280 <button>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	f083 0301 	eor.w	r3, r3, #1
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d1f7      	bne.n	8000cc4 <main+0x74>
	while(button()){}
 8000cd4:	bf00      	nop
 8000cd6:	f7ff fad3 	bl	8000280 <button>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d1fa      	bne.n	8000cd6 <main+0x86>

	SerialOut(string_to_send, &USART1_PORT);
 8000ce0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ce4:	490b      	ldr	r1, [pc, #44]	; (8000d14 <main+0xc4>)
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f000 f928 	bl	8000f3c <SerialOut>

	SerialOut(ready_string, &USART1_PORT);
 8000cec:	463b      	mov	r3, r7
 8000cee:	4909      	ldr	r1, [pc, #36]	; (8000d14 <main+0xc4>)
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f000 f923 	bl	8000f3c <SerialOut>
//            }
//
//        }
//    }

	gameLoop(gamemode);
 8000cf6:	4b0e      	ldr	r3, [pc, #56]	; (8000d30 <main+0xe0>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff fc3b 	bl	8000578 <gameLoop>
 8000d02:	2300      	movs	r3, #0
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	3780      	adds	r7, #128	; 0x80
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	08005b68 	.word	0x08005b68
 8000d10:	08000ead 	.word	0x08000ead
 8000d14:	20000004 	.word	0x20000004
 8000d18:	20000580 	.word	0x20000580
 8000d1c:	08000fed 	.word	0x08000fed
 8000d20:	20000584 	.word	0x20000584
 8000d24:	080010b1 	.word	0x080010b1
 8000d28:	20000588 	.word	0x20000588
 8000d2c:	08000bc9 	.word	0x08000bc9
 8000d30:	20000000 	.word	0x20000000

08000d34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	db0b      	blt.n	8000d5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d46:	79fb      	ldrb	r3, [r7, #7]
 8000d48:	f003 021f 	and.w	r2, r3, #31
 8000d4c:	4907      	ldr	r1, [pc, #28]	; (8000d6c <__NVIC_EnableIRQ+0x38>)
 8000d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d52:	095b      	lsrs	r3, r3, #5
 8000d54:	2001      	movs	r0, #1
 8000d56:	fa00 f202 	lsl.w	r2, r0, r2
 8000d5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d5e:	bf00      	nop
 8000d60:	370c      	adds	r7, #12
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	e000e100 	.word	0xe000e100

08000d70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	6039      	str	r1, [r7, #0]
 8000d7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	db0a      	blt.n	8000d9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	b2da      	uxtb	r2, r3
 8000d88:	490c      	ldr	r1, [pc, #48]	; (8000dbc <__NVIC_SetPriority+0x4c>)
 8000d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8e:	0112      	lsls	r2, r2, #4
 8000d90:	b2d2      	uxtb	r2, r2
 8000d92:	440b      	add	r3, r1
 8000d94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d98:	e00a      	b.n	8000db0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	b2da      	uxtb	r2, r3
 8000d9e:	4908      	ldr	r1, [pc, #32]	; (8000dc0 <__NVIC_SetPriority+0x50>)
 8000da0:	79fb      	ldrb	r3, [r7, #7]
 8000da2:	f003 030f 	and.w	r3, r3, #15
 8000da6:	3b04      	subs	r3, #4
 8000da8:	0112      	lsls	r2, r2, #4
 8000daa:	b2d2      	uxtb	r2, r2
 8000dac:	440b      	add	r3, r1
 8000dae:	761a      	strb	r2, [r3, #24]
}
 8000db0:	bf00      	nop
 8000db2:	370c      	adds	r7, #12
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	e000e100 	.word	0xe000e100
 8000dc0:	e000ed00 	.word	0xe000ed00

08000dc4 <SerialInitialise>:
		0x77};


// InitialiseSerial - Initialise the serial port
// Input: baudRate is from an enumerated set
void SerialInitialise(uint32_t baudRate, SerialPort *serial_port, void (*completion_function)(uint32_t)) {
 8000dc4:	b480      	push	{r7}
 8000dc6:	b087      	sub	sp, #28
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	60f8      	str	r0, [r7, #12]
 8000dcc:	60b9      	str	r1, [r7, #8]
 8000dce:	607a      	str	r2, [r7, #4]

	serial_port->completion_function = completion_function;
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	687a      	ldr	r2, [r7, #4]
 8000dd4:	63da      	str	r2, [r3, #60]	; 0x3c

	// enable clock power, system configuration clock and GPIOC
	// common to all UARTs
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000dd6:	4b34      	ldr	r3, [pc, #208]	; (8000ea8 <SerialInitialise+0xe4>)
 8000dd8:	69db      	ldr	r3, [r3, #28]
 8000dda:	4a33      	ldr	r2, [pc, #204]	; (8000ea8 <SerialInitialise+0xe4>)
 8000ddc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000de0:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000de2:	4b31      	ldr	r3, [pc, #196]	; (8000ea8 <SerialInitialise+0xe4>)
 8000de4:	699b      	ldr	r3, [r3, #24]
 8000de6:	4a30      	ldr	r2, [pc, #192]	; (8000ea8 <SerialInitialise+0xe4>)
 8000de8:	f043 0301 	orr.w	r3, r3, #1
 8000dec:	6193      	str	r3, [r2, #24]

	switch(serial_port->SerialPortGPIO) {
 8000dee:	68bb      	ldr	r3, [r7, #8]
 8000df0:	6a1b      	ldr	r3, [r3, #32]
 8000df2:	2b02      	cmp	r3, #2
 8000df4:	d106      	bne.n	8000e04 <SerialInitialise+0x40>
	case SERIAL_GPIO_C:
		RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 8000df6:	4b2c      	ldr	r3, [pc, #176]	; (8000ea8 <SerialInitialise+0xe4>)
 8000df8:	695b      	ldr	r3, [r3, #20]
 8000dfa:	4a2b      	ldr	r2, [pc, #172]	; (8000ea8 <SerialInitialise+0xe4>)
 8000dfc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e00:	6153      	str	r3, [r2, #20]
		break;
 8000e02:	e000      	b.n	8000e06 <SerialInitialise+0x42>
	default:
		break;
 8000e04:	bf00      	nop
	}

	// set pin mode
	*(serial_port->SerialPinModeRegister) = serial_port->SerialPinModeValue;
 8000e06:	68bb      	ldr	r3, [r7, #8]
 8000e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e0a:	68ba      	ldr	r2, [r7, #8]
 8000e0c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000e0e:	601a      	str	r2, [r3, #0]

	// enable high speed clock for GPIOC
	*(serial_port->SerialPinSpeedRegister) = serial_port->SerialPinSpeedValue;
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e14:	68ba      	ldr	r2, [r7, #8]
 8000e16:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000e18:	601a      	str	r2, [r3, #0]

	// set alternate function to enable USART to an external pin
	*(serial_port->SerialPinAlternatePinRegister) = serial_port->SerialPinAlternatePinValue;
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e1e:	68ba      	ldr	r2, [r7, #8]
 8000e20:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 8000e24:	b2d2      	uxtb	r2, r2
 8000e26:	701a      	strb	r2, [r3, #0]

	*(serial_port->TimerEnableRegister) |= serial_port->TimerEnableMask;
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	69d9      	ldr	r1, [r3, #28]
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	699b      	ldr	r3, [r3, #24]
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	699b      	ldr	r3, [r3, #24]
 8000e36:	430a      	orrs	r2, r1
 8000e38:	601a      	str	r2, [r3, #0]

	uint16_t *baud_rate_config = ((uint16_t*)serial_port->BaudRate); // only 16 bits used!
 8000e3a:	68bb      	ldr	r3, [r7, #8]
 8000e3c:	689b      	ldr	r3, [r3, #8]
 8000e3e:	617b      	str	r3, [r7, #20]

	// Baud rate calculation from datasheet
	switch(baudRate){
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	2b04      	cmp	r3, #4
 8000e44:	d821      	bhi.n	8000e8a <SerialInitialise+0xc6>
 8000e46:	a201      	add	r2, pc, #4	; (adr r2, 8000e4c <SerialInitialise+0x88>)
 8000e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e4c:	08000e61 	.word	0x08000e61
 8000e50:	08000e69 	.word	0x08000e69
 8000e54:	08000e71 	.word	0x08000e71
 8000e58:	08000e79 	.word	0x08000e79
 8000e5c:	08000e81 	.word	0x08000e81
	case BAUD_9600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	2246      	movs	r2, #70	; 0x46
 8000e64:	801a      	strh	r2, [r3, #0]
		break;
 8000e66:	e010      	b.n	8000e8a <SerialInitialise+0xc6>
	case BAUD_19200:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	2246      	movs	r2, #70	; 0x46
 8000e6c:	801a      	strh	r2, [r3, #0]
		break;
 8000e6e:	e00c      	b.n	8000e8a <SerialInitialise+0xc6>
	case BAUD_38400:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	2246      	movs	r2, #70	; 0x46
 8000e74:	801a      	strh	r2, [r3, #0]
		break;
 8000e76:	e008      	b.n	8000e8a <SerialInitialise+0xc6>
	case BAUD_57600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	2246      	movs	r2, #70	; 0x46
 8000e7c:	801a      	strh	r2, [r3, #0]
		break;
 8000e7e:	e004      	b.n	8000e8a <SerialInitialise+0xc6>
	case BAUD_115200:
		*baud_rate_config = 0x46 * 0x06;  // 115200 at 8MHz
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8000e86:	801a      	strh	r2, [r3, #0]
		//*baud_rate_config = 0x46;
		break;
 8000e88:	bf00      	nop
	}


	// enable serial port for tx and rx
	*(serial_port->ControlRegister1) |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 8000e8a:	68bb      	ldr	r3, [r7, #8]
 8000e8c:	68db      	ldr	r3, [r3, #12]
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	f042 020d 	orr.w	r2, r2, #13
 8000e98:	601a      	str	r2, [r3, #0]
}
 8000e9a:	bf00      	nop
 8000e9c:	371c      	adds	r7, #28
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	40021000 	.word	0x40021000

08000eac <finished_transmission>:
uint8_t outStr[OUT_BUFFER_SIZE] = {'\0'}; //initialise the array which stores the string/s to be sent via serial
int offset = 0;
SerialPort *out_serial = NULL;
uint8_t strNum = 0; //num of strings waiting to be sent

void finished_transmission(uint32_t bytes_sent) {
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
	// This function will be called after a transmission is complete

	volatile uint32_t test = 0;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	60fb      	str	r3, [r7, #12]
	// make a very simple delay
	for (volatile uint32_t i = 0; i < 0x8ffff; i++) {
 8000eb8:	2300      	movs	r3, #0
 8000eba:	60bb      	str	r3, [r7, #8]
 8000ebc:	e002      	b.n	8000ec4 <finished_transmission+0x18>
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	60bb      	str	r3, [r7, #8]
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	4a05      	ldr	r2, [pc, #20]	; (8000edc <finished_transmission+0x30>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d9f8      	bls.n	8000ebe <finished_transmission+0x12>
		// waste time !
	}
}
 8000ecc:	bf00      	nop
 8000ece:	bf00      	nop
 8000ed0:	3714      	adds	r7, #20
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	0008fffe 	.word	0x0008fffe

08000ee0 <SerialOut_IRQ>:

void SerialOut_IRQ() {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
	if(out_serial == NULL) {
 8000ee4:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <SerialOut_IRQ+0x4c>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d01d      	beq.n	8000f28 <SerialOut_IRQ+0x48>
		return;
	}

	if(outStr[offset]) { //check there is a character to send (not '\0')
 8000eec:	4b10      	ldr	r3, [pc, #64]	; (8000f30 <SerialOut_IRQ+0x50>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a10      	ldr	r2, [pc, #64]	; (8000f34 <SerialOut_IRQ+0x54>)
 8000ef2:	5cd3      	ldrb	r3, [r2, r3]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d00e      	beq.n	8000f16 <SerialOut_IRQ+0x36>
		out_serial->UART->TDR = outStr[offset]; //send character to serial output register
 8000ef8:	4b0d      	ldr	r3, [pc, #52]	; (8000f30 <SerialOut_IRQ+0x50>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a0d      	ldr	r2, [pc, #52]	; (8000f34 <SerialOut_IRQ+0x54>)
 8000efe:	5cd2      	ldrb	r2, [r2, r3]
 8000f00:	4b0a      	ldr	r3, [pc, #40]	; (8000f2c <SerialOut_IRQ+0x4c>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	b292      	uxth	r2, r2
 8000f08:	851a      	strh	r2, [r3, #40]	; 0x28
		offset++;
 8000f0a:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <SerialOut_IRQ+0x50>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	3301      	adds	r3, #1
 8000f10:	4a07      	ldr	r2, [pc, #28]	; (8000f30 <SerialOut_IRQ+0x50>)
 8000f12:	6013      	str	r3, [r2, #0]
 8000f14:	e009      	b.n	8000f2a <SerialOut_IRQ+0x4a>
	}

	else { //character to send is '\0' - end of string
		offset = 0;
 8000f16:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <SerialOut_IRQ+0x50>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
		strNum = 0; //no more strings waiting to be sent
 8000f1c:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <SerialOut_IRQ+0x58>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	701a      	strb	r2, [r3, #0]
		disable_tx_interrupt(); //disable the tx interrupt now that the string has been fully sent
 8000f22:	f000 f951 	bl	80011c8 <disable_tx_interrupt>
 8000f26:	e000      	b.n	8000f2a <SerialOut_IRQ+0x4a>
		return;
 8000f28:	bf00      	nop
	}
}
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	20000d90 	.word	0x20000d90
 8000f30:	20000d8c 	.word	0x20000d8c
 8000f34:	2000058c 	.word	0x2000058c
 8000f38:	20000d94 	.word	0x20000d94

08000f3c <SerialOut>:


void SerialOut(uint8_t *data, SerialPort *serial_port) {
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	6039      	str	r1, [r7, #0]
	if(strNum) {
 8000f46:	4b0e      	ldr	r3, [pc, #56]	; (8000f80 <SerialOut+0x44>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d004      	beq.n	8000f58 <SerialOut+0x1c>
		strcat(outStr, data); //if there is a string waiting to be sent, concatenate the new string onto the end of outStr
 8000f4e:	6879      	ldr	r1, [r7, #4]
 8000f50:	480c      	ldr	r0, [pc, #48]	; (8000f84 <SerialOut+0x48>)
 8000f52:	f003 fcb5 	bl	80048c0 <strcat>
 8000f56:	e008      	b.n	8000f6a <SerialOut+0x2e>
	}

	else {
		out_serial = serial_port; //define the serial port to output from
 8000f58:	4a0b      	ldr	r2, [pc, #44]	; (8000f88 <SerialOut+0x4c>)
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	6013      	str	r3, [r2, #0]
		strcpy(outStr, data); //copy data into the outStr array
 8000f5e:	6879      	ldr	r1, [r7, #4]
 8000f60:	4808      	ldr	r0, [pc, #32]	; (8000f84 <SerialOut+0x48>)
 8000f62:	f003 fce9 	bl	8004938 <strcpy>
		enable_tx_interrupt(); //enable the transmit empty interrupt
 8000f66:	f000 f91b 	bl	80011a0 <enable_tx_interrupt>
	}
	strNum++; //add one to the strNum to represent one more string waiting to send
 8000f6a:	4b05      	ldr	r3, [pc, #20]	; (8000f80 <SerialOut+0x44>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	3301      	adds	r3, #1
 8000f70:	b2da      	uxtb	r2, r3
 8000f72:	4b03      	ldr	r3, [pc, #12]	; (8000f80 <SerialOut+0x44>)
 8000f74:	701a      	strb	r2, [r3, #0]
}
 8000f76:	bf00      	nop
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	20000d94 	.word	0x20000d94
 8000f84:	2000058c 	.word	0x2000058c
 8000f88:	20000d90 	.word	0x20000d90

08000f8c <ClearInput>:


void ClearInput(SerialPort *serial_port) {
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
	serial_port->UART->ICR = (USART_ICR_FECF | USART_ICR_ORECF); //clear FE and ORE bits
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	220a      	movs	r2, #10
 8000f9a:	621a      	str	r2, [r3, #32]

    if((serial_port->UART->ISR & USART_ISR_FE)||(serial_port->UART->ISR & USART_ISR_ORE)) {
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	69db      	ldr	r3, [r3, #28]
 8000fa2:	f003 0302 	and.w	r3, r3, #2
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d106      	bne.n	8000fb8 <ClearInput+0x2c>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	69db      	ldr	r3, [r3, #28]
 8000fb0:	f003 0308 	and.w	r3, r3, #8
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d002      	beq.n	8000fbe <ClearInput+0x32>
    	ClearInput(serial_port); //if FE or ORE bits are still on, clear them again. Be careful of infinite looping here.
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f7ff ffe7 	bl	8000f8c <ClearInput>
    }
}
 8000fbe:	bf00      	nop
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <FullClear>:

void FullClear(SerialPort *serial_port) {
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b082      	sub	sp, #8
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
	ClearInput(serial_port);
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f7ff ffdc 	bl	8000f8c <ClearInput>
	serial_port->UART->RQR |= USART_RQR_RXFRQ; //clear RXNE bit
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	699a      	ldr	r2, [r3, #24]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f042 0208 	orr.w	r2, r2, #8
 8000fe2:	619a      	str	r2, [r3, #24]
}
 8000fe4:	bf00      	nop
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}

08000fec <SerialInput>:

int i = 0;
void SerialInput(uint8_t data[2][BUFFER_SIZE], SerialPort *serial_port) {
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	6039      	str	r1, [r7, #0]
	if(!i && (serial_port->UART->ISR & USART_ISR_FE)||(serial_port->UART->ISR & USART_ISR_ORE)) {
 8000ff6:	4b2c      	ldr	r3, [pc, #176]	; (80010a8 <SerialInput+0xbc>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d106      	bne.n	800100c <SerialInput+0x20>
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	69db      	ldr	r3, [r3, #28]
 8001004:	f003 0302 	and.w	r3, r3, #2
 8001008:	2b00      	cmp	r3, #0
 800100a:	d106      	bne.n	800101a <SerialInput+0x2e>
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	69db      	ldr	r3, [r3, #28]
 8001012:	f003 0308 	and.w	r3, r3, #8
 8001016:	2b00      	cmp	r3, #0
 8001018:	d002      	beq.n	8001020 <SerialInput+0x34>
    	ClearInput(serial_port); //reset ORE and FE bits
 800101a:	6838      	ldr	r0, [r7, #0]
 800101c:	f7ff ffb6 	bl	8000f8c <ClearInput>
    }

	if(i==BUFFER_SIZE-3) { //too many letters donny
 8001020:	4b21      	ldr	r3, [pc, #132]	; (80010a8 <SerialInput+0xbc>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2b3d      	cmp	r3, #61	; 0x3d
 8001026:	d105      	bne.n	8001034 <SerialInput+0x48>
		data[0][i] = '\r';
 8001028:	4b1f      	ldr	r3, [pc, #124]	; (80010a8 <SerialInput+0xbc>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	687a      	ldr	r2, [r7, #4]
 800102e:	210d      	movs	r1, #13
 8001030:	54d1      	strb	r1, [r2, r3]
 8001032:	e008      	b.n	8001046 <SerialInput+0x5a>
	}

	else {
		data[0][i] = serial_port->UART->RDR; //read character from receive register
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800103a:	b29a      	uxth	r2, r3
 800103c:	4b1a      	ldr	r3, [pc, #104]	; (80010a8 <SerialInput+0xbc>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	b2d1      	uxtb	r1, r2
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	54d1      	strb	r1, [r2, r3]
	}

	if(data[0][i] == '\r') { // putty sends \r when you press enter
 8001046:	4b18      	ldr	r3, [pc, #96]	; (80010a8 <SerialInput+0xbc>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	687a      	ldr	r2, [r7, #4]
 800104c:	5cd3      	ldrb	r3, [r2, r3]
 800104e:	2b0d      	cmp	r3, #13
 8001050:	d11e      	bne.n	8001090 <SerialInput+0xa4>
		data[0][i+1] = '\n';
 8001052:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <SerialInput+0xbc>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	3301      	adds	r3, #1
 8001058:	687a      	ldr	r2, [r7, #4]
 800105a:	210a      	movs	r1, #10
 800105c:	54d1      	strb	r1, [r2, r3]
		data[0][i+2] = '\0'; //null terminate string
 800105e:	4b12      	ldr	r3, [pc, #72]	; (80010a8 <SerialInput+0xbc>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	3302      	adds	r3, #2
 8001064:	687a      	ldr	r2, [r7, #4]
 8001066:	2100      	movs	r1, #0
 8001068:	54d1      	strb	r1, [r2, r3]
		if(received != NULL) {
 800106a:	4b10      	ldr	r3, [pc, #64]	; (80010ac <SerialInput+0xc0>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d007      	beq.n	8001082 <SerialInput+0x96>
			received(data[0], (i+3)); //callback function
 8001072:	4b0e      	ldr	r3, [pc, #56]	; (80010ac <SerialInput+0xc0>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a0c      	ldr	r2, [pc, #48]	; (80010a8 <SerialInput+0xbc>)
 8001078:	6812      	ldr	r2, [r2, #0]
 800107a:	3203      	adds	r2, #3
 800107c:	4611      	mov	r1, r2
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	4798      	blx	r3
		}
		FullClear(serial_port); //reset ORE, FE, and RXNE bits
 8001082:	6838      	ldr	r0, [r7, #0]
 8001084:	f7ff ff9f 	bl	8000fc6 <FullClear>
		i = 0;
 8001088:	4b07      	ldr	r3, [pc, #28]	; (80010a8 <SerialInput+0xbc>)
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
	}
	else {
		i++;
		ClearInput(serial_port);
	}
}
 800108e:	e007      	b.n	80010a0 <SerialInput+0xb4>
		i++;
 8001090:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <SerialInput+0xbc>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	3301      	adds	r3, #1
 8001096:	4a04      	ldr	r2, [pc, #16]	; (80010a8 <SerialInput+0xbc>)
 8001098:	6013      	str	r3, [r2, #0]
		ClearInput(serial_port);
 800109a:	6838      	ldr	r0, [r7, #0]
 800109c:	f7ff ff76 	bl	8000f8c <ClearInput>
}
 80010a0:	bf00      	nop
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	20000d98 	.word	0x20000d98
 80010ac:	20000584 	.word	0x20000584

080010b0 <DoubleBuffer>:

void DoubleBuffer(uint8_t data[BUFFER_SIZE], int NumChar) {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
	for(int j=0; j<NumChar; j++) {
 80010ba:	2300      	movs	r3, #0
 80010bc:	60fb      	str	r3, [r7, #12]
 80010be:	e00c      	b.n	80010da <DoubleBuffer+0x2a>
		inpStr[1][j] = data[j]; //transfer Kernel to User buffer
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	687a      	ldr	r2, [r7, #4]
 80010c4:	4413      	add	r3, r2
 80010c6:	7819      	ldrb	r1, [r3, #0]
 80010c8:	4a11      	ldr	r2, [pc, #68]	; (8001110 <DoubleBuffer+0x60>)
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	4413      	add	r3, r2
 80010ce:	3340      	adds	r3, #64	; 0x40
 80010d0:	460a      	mov	r2, r1
 80010d2:	701a      	strb	r2, [r3, #0]
	for(int j=0; j<NumChar; j++) {
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	3301      	adds	r3, #1
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	68fa      	ldr	r2, [r7, #12]
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	429a      	cmp	r2, r3
 80010e0:	dbee      	blt.n	80010c0 <DoubleBuffer+0x10>
	}

	memset(data, 0, sizeof(data)); //clear Kernel
 80010e2:	2204      	movs	r2, #4
 80010e4:	2100      	movs	r1, #0
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f003 fbe2 	bl	80048b0 <memset>
	memset(inpStr[0], 0, sizeof(inpStr[0])); //clear Kernel
 80010ec:	2240      	movs	r2, #64	; 0x40
 80010ee:	2100      	movs	r1, #0
 80010f0:	4807      	ldr	r0, [pc, #28]	; (8001110 <DoubleBuffer+0x60>)
 80010f2:	f003 fbdd 	bl	80048b0 <memset>

	if(demonstrate != NULL) {
 80010f6:	4b07      	ldr	r3, [pc, #28]	; (8001114 <DoubleBuffer+0x64>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d004      	beq.n	8001108 <DoubleBuffer+0x58>
		demonstrate(inpStr[1], NumChar); //if there is a demonstrate function defined, run it now
 80010fe:	4b05      	ldr	r3, [pc, #20]	; (8001114 <DoubleBuffer+0x64>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	6839      	ldr	r1, [r7, #0]
 8001104:	4804      	ldr	r0, [pc, #16]	; (8001118 <DoubleBuffer+0x68>)
 8001106:	4798      	blx	r3
	}
}
 8001108:	bf00      	nop
 800110a:	3710      	adds	r7, #16
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	20000500 	.word	0x20000500
 8001114:	20000588 	.word	0x20000588
 8001118:	20000540 	.word	0x20000540

0800111c <USART1_IRQHandler>:
	SerialOut(copy, &USART1_PORT);
	SerialOut(OutLen, &USART1_PORT);
}
//////////////////////////////////////////////////////////////////////////

void USART1_IRQHandler(void) {
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
	if (inpDetect != 0x00 && ((&USART1_PORT)->UART->ISR & USART_ISR_RXNE)) {
 8001120:	4b10      	ldr	r3, [pc, #64]	; (8001164 <USART1_IRQHandler+0x48>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d00b      	beq.n	8001140 <USART1_IRQHandler+0x24>
 8001128:	4b0f      	ldr	r3, [pc, #60]	; (8001168 <USART1_IRQHandler+0x4c>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	69db      	ldr	r3, [r3, #28]
 800112e:	f003 0320 	and.w	r3, r3, #32
 8001132:	2b00      	cmp	r3, #0
 8001134:	d004      	beq.n	8001140 <USART1_IRQHandler+0x24>
		inpDetect(inpStr, &USART1_PORT); //interrupt is for serial input
 8001136:	4b0b      	ldr	r3, [pc, #44]	; (8001164 <USART1_IRQHandler+0x48>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	490b      	ldr	r1, [pc, #44]	; (8001168 <USART1_IRQHandler+0x4c>)
 800113c:	480b      	ldr	r0, [pc, #44]	; (800116c <USART1_IRQHandler+0x50>)
 800113e:	4798      	blx	r3
	}

	if (((&USART1_PORT)->UART->ISR & USART_ISR_TXE)&&((&USART1_PORT)->UART->CR1 & USART_CR1_TXEIE)) {
 8001140:	4b09      	ldr	r3, [pc, #36]	; (8001168 <USART1_IRQHandler+0x4c>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	69db      	ldr	r3, [r3, #28]
 8001146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800114a:	2b00      	cmp	r3, #0
 800114c:	d008      	beq.n	8001160 <USART1_IRQHandler+0x44>
 800114e:	4b06      	ldr	r3, [pc, #24]	; (8001168 <USART1_IRQHandler+0x4c>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <USART1_IRQHandler+0x44>
		SerialOut_IRQ(); //interrupt is for serial output
 800115c:	f7ff fec0 	bl	8000ee0 <SerialOut_IRQ>
	}
}
 8001160:	bf00      	nop
 8001162:	bd80      	pop	{r7, pc}
 8001164:	20000580 	.word	0x20000580
 8001168:	20000004 	.word	0x20000004
 800116c:	20000500 	.word	0x20000500

08001170 <enable_USART_interrupt>:

void enable_USART_interrupt(void) {
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001174:	b672      	cpsid	i
}
 8001176:	bf00      	nop
	__disable_irq(); //disable interrupts while changes are made
	USART1->CR1 |= USART_CR1_RXNEIE;
 8001178:	4b08      	ldr	r3, [pc, #32]	; (800119c <enable_USART_interrupt+0x2c>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a07      	ldr	r2, [pc, #28]	; (800119c <enable_USART_interrupt+0x2c>)
 800117e:	f043 0320 	orr.w	r3, r3, #32
 8001182:	6013      	str	r3, [r2, #0]

	NVIC_SetPriority(USART1_IRQn, 1);
 8001184:	2101      	movs	r1, #1
 8001186:	2025      	movs	r0, #37	; 0x25
 8001188:	f7ff fdf2 	bl	8000d70 <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART1_IRQn);
 800118c:	2025      	movs	r0, #37	; 0x25
 800118e:	f7ff fdd1 	bl	8000d34 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8001192:	b662      	cpsie	i
}
 8001194:	bf00      	nop

	__enable_irq(); //reenable interrupts
}
 8001196:	bf00      	nop
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40013800 	.word	0x40013800

080011a0 <enable_tx_interrupt>:

void enable_tx_interrupt(void) {
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80011a4:	b672      	cpsid	i
}
 80011a6:	bf00      	nop
	__disable_irq();
	USART1->CR1 |= USART_CR1_TXEIE; //enable interrupt for TXE bit on
 80011a8:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <enable_tx_interrupt+0x24>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a05      	ldr	r2, [pc, #20]	; (80011c4 <enable_tx_interrupt+0x24>)
 80011ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011b2:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80011b4:	b662      	cpsie	i
}
 80011b6:	bf00      	nop
	__enable_irq();
}
 80011b8:	bf00      	nop
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	40013800 	.word	0x40013800

080011c8 <disable_tx_interrupt>:

void disable_tx_interrupt(void) {
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80011cc:	b672      	cpsid	i
}
 80011ce:	bf00      	nop
	__disable_irq();
	USART1->CR1 &= ~(USART_CR1_TXEIE);
 80011d0:	4b06      	ldr	r3, [pc, #24]	; (80011ec <disable_tx_interrupt+0x24>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a05      	ldr	r2, [pc, #20]	; (80011ec <disable_tx_interrupt+0x24>)
 80011d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80011da:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80011dc:	b662      	cpsie	i
}
 80011de:	bf00      	nop
	__enable_irq();
}
 80011e0:	bf00      	nop
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	40013800 	.word	0x40013800

080011f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011f6:	4b0f      	ldr	r3, [pc, #60]	; (8001234 <HAL_MspInit+0x44>)
 80011f8:	699b      	ldr	r3, [r3, #24]
 80011fa:	4a0e      	ldr	r2, [pc, #56]	; (8001234 <HAL_MspInit+0x44>)
 80011fc:	f043 0301 	orr.w	r3, r3, #1
 8001200:	6193      	str	r3, [r2, #24]
 8001202:	4b0c      	ldr	r3, [pc, #48]	; (8001234 <HAL_MspInit+0x44>)
 8001204:	699b      	ldr	r3, [r3, #24]
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	607b      	str	r3, [r7, #4]
 800120c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800120e:	4b09      	ldr	r3, [pc, #36]	; (8001234 <HAL_MspInit+0x44>)
 8001210:	69db      	ldr	r3, [r3, #28]
 8001212:	4a08      	ldr	r2, [pc, #32]	; (8001234 <HAL_MspInit+0x44>)
 8001214:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001218:	61d3      	str	r3, [r2, #28]
 800121a:	4b06      	ldr	r3, [pc, #24]	; (8001234 <HAL_MspInit+0x44>)
 800121c:	69db      	ldr	r3, [r3, #28]
 800121e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001222:	603b      	str	r3, [r7, #0]
 8001224:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001226:	2007      	movs	r0, #7
 8001228:	f000 fabc 	bl	80017a4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800122c:	bf00      	nop
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40021000 	.word	0x40021000

08001238 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b08a      	sub	sp, #40	; 0x28
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001240:	f107 0314 	add.w	r3, r7, #20
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
 800124e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a17      	ldr	r2, [pc, #92]	; (80012b4 <HAL_I2C_MspInit+0x7c>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d127      	bne.n	80012aa <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800125a:	4b17      	ldr	r3, [pc, #92]	; (80012b8 <HAL_I2C_MspInit+0x80>)
 800125c:	695b      	ldr	r3, [r3, #20]
 800125e:	4a16      	ldr	r2, [pc, #88]	; (80012b8 <HAL_I2C_MspInit+0x80>)
 8001260:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001264:	6153      	str	r3, [r2, #20]
 8001266:	4b14      	ldr	r3, [pc, #80]	; (80012b8 <HAL_I2C_MspInit+0x80>)
 8001268:	695b      	ldr	r3, [r3, #20]
 800126a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800126e:	613b      	str	r3, [r7, #16]
 8001270:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001272:	23c0      	movs	r3, #192	; 0xc0
 8001274:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001276:	2312      	movs	r3, #18
 8001278:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800127a:	2301      	movs	r3, #1
 800127c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800127e:	2303      	movs	r3, #3
 8001280:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001282:	2304      	movs	r3, #4
 8001284:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001286:	f107 0314 	add.w	r3, r7, #20
 800128a:	4619      	mov	r1, r3
 800128c:	480b      	ldr	r0, [pc, #44]	; (80012bc <HAL_I2C_MspInit+0x84>)
 800128e:	f000 fabd 	bl	800180c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001292:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <HAL_I2C_MspInit+0x80>)
 8001294:	69db      	ldr	r3, [r3, #28]
 8001296:	4a08      	ldr	r2, [pc, #32]	; (80012b8 <HAL_I2C_MspInit+0x80>)
 8001298:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800129c:	61d3      	str	r3, [r2, #28]
 800129e:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <HAL_I2C_MspInit+0x80>)
 80012a0:	69db      	ldr	r3, [r3, #28]
 80012a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80012aa:	bf00      	nop
 80012ac:	3728      	adds	r7, #40	; 0x28
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40005400 	.word	0x40005400
 80012b8:	40021000 	.word	0x40021000
 80012bc:	48000400 	.word	0x48000400

080012c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b08a      	sub	sp, #40	; 0x28
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c8:	f107 0314 	add.w	r3, r7, #20
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	60da      	str	r2, [r3, #12]
 80012d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a17      	ldr	r2, [pc, #92]	; (800133c <HAL_SPI_MspInit+0x7c>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d128      	bne.n	8001334 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012e2:	4b17      	ldr	r3, [pc, #92]	; (8001340 <HAL_SPI_MspInit+0x80>)
 80012e4:	699b      	ldr	r3, [r3, #24]
 80012e6:	4a16      	ldr	r2, [pc, #88]	; (8001340 <HAL_SPI_MspInit+0x80>)
 80012e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012ec:	6193      	str	r3, [r2, #24]
 80012ee:	4b14      	ldr	r3, [pc, #80]	; (8001340 <HAL_SPI_MspInit+0x80>)
 80012f0:	699b      	ldr	r3, [r3, #24]
 80012f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012f6:	613b      	str	r3, [r7, #16]
 80012f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fa:	4b11      	ldr	r3, [pc, #68]	; (8001340 <HAL_SPI_MspInit+0x80>)
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	4a10      	ldr	r2, [pc, #64]	; (8001340 <HAL_SPI_MspInit+0x80>)
 8001300:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001304:	6153      	str	r3, [r2, #20]
 8001306:	4b0e      	ldr	r3, [pc, #56]	; (8001340 <HAL_SPI_MspInit+0x80>)
 8001308:	695b      	ldr	r3, [r3, #20]
 800130a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8001312:	23e0      	movs	r3, #224	; 0xe0
 8001314:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001316:	2302      	movs	r3, #2
 8001318:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800131e:	2303      	movs	r3, #3
 8001320:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001322:	2305      	movs	r3, #5
 8001324:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001326:	f107 0314 	add.w	r3, r7, #20
 800132a:	4619      	mov	r1, r3
 800132c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001330:	f000 fa6c 	bl	800180c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001334:	bf00      	nop
 8001336:	3728      	adds	r7, #40	; 0x28
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40013000 	.word	0x40013000
 8001340:	40021000 	.word	0x40021000

08001344 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b08a      	sub	sp, #40	; 0x28
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134c:	f107 0314 	add.w	r3, r7, #20
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	60da      	str	r2, [r3, #12]
 800135a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a18      	ldr	r2, [pc, #96]	; (80013c4 <HAL_PCD_MspInit+0x80>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d129      	bne.n	80013ba <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001366:	4b18      	ldr	r3, [pc, #96]	; (80013c8 <HAL_PCD_MspInit+0x84>)
 8001368:	695b      	ldr	r3, [r3, #20]
 800136a:	4a17      	ldr	r2, [pc, #92]	; (80013c8 <HAL_PCD_MspInit+0x84>)
 800136c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001370:	6153      	str	r3, [r2, #20]
 8001372:	4b15      	ldr	r3, [pc, #84]	; (80013c8 <HAL_PCD_MspInit+0x84>)
 8001374:	695b      	ldr	r3, [r3, #20]
 8001376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800137a:	613b      	str	r3, [r7, #16]
 800137c:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 800137e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001382:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001384:	2302      	movs	r3, #2
 8001386:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001388:	2300      	movs	r3, #0
 800138a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800138c:	2303      	movs	r3, #3
 800138e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8001390:	230e      	movs	r3, #14
 8001392:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001394:	f107 0314 	add.w	r3, r7, #20
 8001398:	4619      	mov	r1, r3
 800139a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800139e:	f000 fa35 	bl	800180c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80013a2:	4b09      	ldr	r3, [pc, #36]	; (80013c8 <HAL_PCD_MspInit+0x84>)
 80013a4:	69db      	ldr	r3, [r3, #28]
 80013a6:	4a08      	ldr	r2, [pc, #32]	; (80013c8 <HAL_PCD_MspInit+0x84>)
 80013a8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80013ac:	61d3      	str	r3, [r2, #28]
 80013ae:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <HAL_PCD_MspInit+0x84>)
 80013b0:	69db      	ldr	r3, [r3, #28]
 80013b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80013ba:	bf00      	nop
 80013bc:	3728      	adds	r7, #40	; 0x28
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40005c00 	.word	0x40005c00
 80013c8:	40021000 	.word	0x40021000

080013cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013d0:	e7fe      	b.n	80013d0 <NMI_Handler+0x4>

080013d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013d2:	b480      	push	{r7}
 80013d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013d6:	e7fe      	b.n	80013d6 <HardFault_Handler+0x4>

080013d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013dc:	e7fe      	b.n	80013dc <MemManage_Handler+0x4>

080013de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013de:	b480      	push	{r7}
 80013e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013e2:	e7fe      	b.n	80013e2 <BusFault_Handler+0x4>

080013e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013e8:	e7fe      	b.n	80013e8 <UsageFault_Handler+0x4>

080013ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013ea:	b480      	push	{r7}
 80013ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013ee:	bf00      	nop
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013fc:	bf00      	nop
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr

08001406 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001406:	b480      	push	{r7}
 8001408:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800140a:	bf00      	nop
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001418:	f000 f8ce 	bl	80015b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800141c:	bf00      	nop
 800141e:	bd80      	pop	{r7, pc}

08001420 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001424:	4802      	ldr	r0, [pc, #8]	; (8001430 <TIM1_CC_IRQHandler+0x10>)
 8001426:	f003 f825 	bl	8004474 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	2000017c 	.word	0x2000017c

08001434 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001438:	4802      	ldr	r0, [pc, #8]	; (8001444 <TIM2_IRQHandler+0x10>)
 800143a:	f003 f81b 	bl	8004474 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	200001c8 	.word	0x200001c8

08001448 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001450:	4a14      	ldr	r2, [pc, #80]	; (80014a4 <_sbrk+0x5c>)
 8001452:	4b15      	ldr	r3, [pc, #84]	; (80014a8 <_sbrk+0x60>)
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800145c:	4b13      	ldr	r3, [pc, #76]	; (80014ac <_sbrk+0x64>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d102      	bne.n	800146a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001464:	4b11      	ldr	r3, [pc, #68]	; (80014ac <_sbrk+0x64>)
 8001466:	4a12      	ldr	r2, [pc, #72]	; (80014b0 <_sbrk+0x68>)
 8001468:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800146a:	4b10      	ldr	r3, [pc, #64]	; (80014ac <_sbrk+0x64>)
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4413      	add	r3, r2
 8001472:	693a      	ldr	r2, [r7, #16]
 8001474:	429a      	cmp	r2, r3
 8001476:	d207      	bcs.n	8001488 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001478:	f003 fa32 	bl	80048e0 <__errno>
 800147c:	4603      	mov	r3, r0
 800147e:	220c      	movs	r2, #12
 8001480:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001482:	f04f 33ff 	mov.w	r3, #4294967295
 8001486:	e009      	b.n	800149c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001488:	4b08      	ldr	r3, [pc, #32]	; (80014ac <_sbrk+0x64>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800148e:	4b07      	ldr	r3, [pc, #28]	; (80014ac <_sbrk+0x64>)
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4413      	add	r3, r2
 8001496:	4a05      	ldr	r2, [pc, #20]	; (80014ac <_sbrk+0x64>)
 8001498:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800149a:	68fb      	ldr	r3, [r7, #12]
}
 800149c:	4618      	mov	r0, r3
 800149e:	3718      	adds	r7, #24
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	2000a000 	.word	0x2000a000
 80014a8:	00000400 	.word	0x00000400
 80014ac:	20000d9c 	.word	0x20000d9c
 80014b0:	20000ef0 	.word	0x20000ef0

080014b4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014b8:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <SystemInit+0x20>)
 80014ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014be:	4a05      	ldr	r2, [pc, #20]	; (80014d4 <SystemInit+0x20>)
 80014c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014c8:	bf00      	nop
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	e000ed00 	.word	0xe000ed00

080014d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80014d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001510 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80014dc:	f7ff ffea 	bl	80014b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014e0:	480c      	ldr	r0, [pc, #48]	; (8001514 <LoopForever+0x6>)
  ldr r1, =_edata
 80014e2:	490d      	ldr	r1, [pc, #52]	; (8001518 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014e4:	4a0d      	ldr	r2, [pc, #52]	; (800151c <LoopForever+0xe>)
  movs r3, #0
 80014e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014e8:	e002      	b.n	80014f0 <LoopCopyDataInit>

080014ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ee:	3304      	adds	r3, #4

080014f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014f4:	d3f9      	bcc.n	80014ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014f6:	4a0a      	ldr	r2, [pc, #40]	; (8001520 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014f8:	4c0a      	ldr	r4, [pc, #40]	; (8001524 <LoopForever+0x16>)
  movs r3, #0
 80014fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014fc:	e001      	b.n	8001502 <LoopFillZerobss>

080014fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001500:	3204      	adds	r2, #4

08001502 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001502:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001504:	d3fb      	bcc.n	80014fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001506:	f003 f9f1 	bl	80048ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800150a:	f7ff fba1 	bl	8000c50 <main>

0800150e <LoopForever>:

LoopForever:
    b LoopForever
 800150e:	e7fe      	b.n	800150e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001510:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001514:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001518:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 800151c:	08005d04 	.word	0x08005d04
  ldr r2, =_sbss
 8001520:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8001524:	20000eec 	.word	0x20000eec

08001528 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001528:	e7fe      	b.n	8001528 <ADC1_2_IRQHandler>
	...

0800152c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001530:	4b08      	ldr	r3, [pc, #32]	; (8001554 <HAL_Init+0x28>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a07      	ldr	r2, [pc, #28]	; (8001554 <HAL_Init+0x28>)
 8001536:	f043 0310 	orr.w	r3, r3, #16
 800153a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800153c:	2003      	movs	r0, #3
 800153e:	f000 f931 	bl	80017a4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001542:	2000      	movs	r0, #0
 8001544:	f000 f808 	bl	8001558 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001548:	f7ff fe52 	bl	80011f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800154c:	2300      	movs	r3, #0
}
 800154e:	4618      	mov	r0, r3
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40022000 	.word	0x40022000

08001558 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001560:	4b12      	ldr	r3, [pc, #72]	; (80015ac <HAL_InitTick+0x54>)
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	4b12      	ldr	r3, [pc, #72]	; (80015b0 <HAL_InitTick+0x58>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	4619      	mov	r1, r3
 800156a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800156e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001572:	fbb2 f3f3 	udiv	r3, r2, r3
 8001576:	4618      	mov	r0, r3
 8001578:	f000 f93b 	bl	80017f2 <HAL_SYSTICK_Config>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e00e      	b.n	80015a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2b0f      	cmp	r3, #15
 800158a:	d80a      	bhi.n	80015a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800158c:	2200      	movs	r2, #0
 800158e:	6879      	ldr	r1, [r7, #4]
 8001590:	f04f 30ff 	mov.w	r0, #4294967295
 8001594:	f000 f911 	bl	80017ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001598:	4a06      	ldr	r2, [pc, #24]	; (80015b4 <HAL_InitTick+0x5c>)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800159e:	2300      	movs	r3, #0
 80015a0:	e000      	b.n	80015a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3708      	adds	r7, #8
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	20000044 	.word	0x20000044
 80015b0:	2000004c 	.word	0x2000004c
 80015b4:	20000048 	.word	0x20000048

080015b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015bc:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <HAL_IncTick+0x20>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	461a      	mov	r2, r3
 80015c2:	4b06      	ldr	r3, [pc, #24]	; (80015dc <HAL_IncTick+0x24>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4413      	add	r3, r2
 80015c8:	4a04      	ldr	r2, [pc, #16]	; (80015dc <HAL_IncTick+0x24>)
 80015ca:	6013      	str	r3, [r2, #0]
}
 80015cc:	bf00      	nop
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	2000004c 	.word	0x2000004c
 80015dc:	20000da0 	.word	0x20000da0

080015e0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  return uwTick;  
 80015e4:	4b03      	ldr	r3, [pc, #12]	; (80015f4 <HAL_GetTick+0x14>)
 80015e6:	681b      	ldr	r3, [r3, #0]
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	20000da0 	.word	0x20000da0

080015f8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001600:	f7ff ffee 	bl	80015e0 <HAL_GetTick>
 8001604:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001610:	d005      	beq.n	800161e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001612:	4b0a      	ldr	r3, [pc, #40]	; (800163c <HAL_Delay+0x44>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	461a      	mov	r2, r3
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	4413      	add	r3, r2
 800161c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800161e:	bf00      	nop
 8001620:	f7ff ffde 	bl	80015e0 <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	68fa      	ldr	r2, [r7, #12]
 800162c:	429a      	cmp	r2, r3
 800162e:	d8f7      	bhi.n	8001620 <HAL_Delay+0x28>
  {
  }
}
 8001630:	bf00      	nop
 8001632:	bf00      	nop
 8001634:	3710      	adds	r7, #16
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	2000004c 	.word	0x2000004c

08001640 <__NVIC_SetPriorityGrouping>:
{
 8001640:	b480      	push	{r7}
 8001642:	b085      	sub	sp, #20
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f003 0307 	and.w	r3, r3, #7
 800164e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001650:	4b0c      	ldr	r3, [pc, #48]	; (8001684 <__NVIC_SetPriorityGrouping+0x44>)
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001656:	68ba      	ldr	r2, [r7, #8]
 8001658:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800165c:	4013      	ands	r3, r2
 800165e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001668:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800166c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001670:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001672:	4a04      	ldr	r2, [pc, #16]	; (8001684 <__NVIC_SetPriorityGrouping+0x44>)
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	60d3      	str	r3, [r2, #12]
}
 8001678:	bf00      	nop
 800167a:	3714      	adds	r7, #20
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr
 8001684:	e000ed00 	.word	0xe000ed00

08001688 <__NVIC_GetPriorityGrouping>:
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800168c:	4b04      	ldr	r3, [pc, #16]	; (80016a0 <__NVIC_GetPriorityGrouping+0x18>)
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	0a1b      	lsrs	r3, r3, #8
 8001692:	f003 0307 	and.w	r3, r3, #7
}
 8001696:	4618      	mov	r0, r3
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr
 80016a0:	e000ed00 	.word	0xe000ed00

080016a4 <__NVIC_SetPriority>:
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	4603      	mov	r3, r0
 80016ac:	6039      	str	r1, [r7, #0]
 80016ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	db0a      	blt.n	80016ce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	b2da      	uxtb	r2, r3
 80016bc:	490c      	ldr	r1, [pc, #48]	; (80016f0 <__NVIC_SetPriority+0x4c>)
 80016be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c2:	0112      	lsls	r2, r2, #4
 80016c4:	b2d2      	uxtb	r2, r2
 80016c6:	440b      	add	r3, r1
 80016c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80016cc:	e00a      	b.n	80016e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	b2da      	uxtb	r2, r3
 80016d2:	4908      	ldr	r1, [pc, #32]	; (80016f4 <__NVIC_SetPriority+0x50>)
 80016d4:	79fb      	ldrb	r3, [r7, #7]
 80016d6:	f003 030f 	and.w	r3, r3, #15
 80016da:	3b04      	subs	r3, #4
 80016dc:	0112      	lsls	r2, r2, #4
 80016de:	b2d2      	uxtb	r2, r2
 80016e0:	440b      	add	r3, r1
 80016e2:	761a      	strb	r2, [r3, #24]
}
 80016e4:	bf00      	nop
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr
 80016f0:	e000e100 	.word	0xe000e100
 80016f4:	e000ed00 	.word	0xe000ed00

080016f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b089      	sub	sp, #36	; 0x24
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	60f8      	str	r0, [r7, #12]
 8001700:	60b9      	str	r1, [r7, #8]
 8001702:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	f003 0307 	and.w	r3, r3, #7
 800170a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	f1c3 0307 	rsb	r3, r3, #7
 8001712:	2b04      	cmp	r3, #4
 8001714:	bf28      	it	cs
 8001716:	2304      	movcs	r3, #4
 8001718:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	3304      	adds	r3, #4
 800171e:	2b06      	cmp	r3, #6
 8001720:	d902      	bls.n	8001728 <NVIC_EncodePriority+0x30>
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	3b03      	subs	r3, #3
 8001726:	e000      	b.n	800172a <NVIC_EncodePriority+0x32>
 8001728:	2300      	movs	r3, #0
 800172a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800172c:	f04f 32ff 	mov.w	r2, #4294967295
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	fa02 f303 	lsl.w	r3, r2, r3
 8001736:	43da      	mvns	r2, r3
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	401a      	ands	r2, r3
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001740:	f04f 31ff 	mov.w	r1, #4294967295
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	fa01 f303 	lsl.w	r3, r1, r3
 800174a:	43d9      	mvns	r1, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001750:	4313      	orrs	r3, r2
         );
}
 8001752:	4618      	mov	r0, r3
 8001754:	3724      	adds	r7, #36	; 0x24
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
	...

08001760 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	3b01      	subs	r3, #1
 800176c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001770:	d301      	bcc.n	8001776 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001772:	2301      	movs	r3, #1
 8001774:	e00f      	b.n	8001796 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001776:	4a0a      	ldr	r2, [pc, #40]	; (80017a0 <SysTick_Config+0x40>)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	3b01      	subs	r3, #1
 800177c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800177e:	210f      	movs	r1, #15
 8001780:	f04f 30ff 	mov.w	r0, #4294967295
 8001784:	f7ff ff8e 	bl	80016a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001788:	4b05      	ldr	r3, [pc, #20]	; (80017a0 <SysTick_Config+0x40>)
 800178a:	2200      	movs	r2, #0
 800178c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800178e:	4b04      	ldr	r3, [pc, #16]	; (80017a0 <SysTick_Config+0x40>)
 8001790:	2207      	movs	r2, #7
 8001792:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001794:	2300      	movs	r3, #0
}
 8001796:	4618      	mov	r0, r3
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	e000e010 	.word	0xe000e010

080017a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f7ff ff47 	bl	8001640 <__NVIC_SetPriorityGrouping>
}
 80017b2:	bf00      	nop
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b086      	sub	sp, #24
 80017be:	af00      	add	r7, sp, #0
 80017c0:	4603      	mov	r3, r0
 80017c2:	60b9      	str	r1, [r7, #8]
 80017c4:	607a      	str	r2, [r7, #4]
 80017c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017c8:	2300      	movs	r3, #0
 80017ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017cc:	f7ff ff5c 	bl	8001688 <__NVIC_GetPriorityGrouping>
 80017d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	68b9      	ldr	r1, [r7, #8]
 80017d6:	6978      	ldr	r0, [r7, #20]
 80017d8:	f7ff ff8e 	bl	80016f8 <NVIC_EncodePriority>
 80017dc:	4602      	mov	r2, r0
 80017de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017e2:	4611      	mov	r1, r2
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff ff5d 	bl	80016a4 <__NVIC_SetPriority>
}
 80017ea:	bf00      	nop
 80017ec:	3718      	adds	r7, #24
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b082      	sub	sp, #8
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f7ff ffb0 	bl	8001760 <SysTick_Config>
 8001800:	4603      	mov	r3, r0
}
 8001802:	4618      	mov	r0, r3
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
	...

0800180c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800180c:	b480      	push	{r7}
 800180e:	b087      	sub	sp, #28
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001816:	2300      	movs	r3, #0
 8001818:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800181a:	e154      	b.n	8001ac6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	2101      	movs	r1, #1
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	fa01 f303 	lsl.w	r3, r1, r3
 8001828:	4013      	ands	r3, r2
 800182a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2b00      	cmp	r3, #0
 8001830:	f000 8146 	beq.w	8001ac0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f003 0303 	and.w	r3, r3, #3
 800183c:	2b01      	cmp	r3, #1
 800183e:	d005      	beq.n	800184c <HAL_GPIO_Init+0x40>
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f003 0303 	and.w	r3, r3, #3
 8001848:	2b02      	cmp	r3, #2
 800184a:	d130      	bne.n	80018ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	005b      	lsls	r3, r3, #1
 8001856:	2203      	movs	r2, #3
 8001858:	fa02 f303 	lsl.w	r3, r2, r3
 800185c:	43db      	mvns	r3, r3
 800185e:	693a      	ldr	r2, [r7, #16]
 8001860:	4013      	ands	r3, r2
 8001862:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	68da      	ldr	r2, [r3, #12]
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	693a      	ldr	r2, [r7, #16]
 8001872:	4313      	orrs	r3, r2
 8001874:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	693a      	ldr	r2, [r7, #16]
 800187a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001882:	2201      	movs	r2, #1
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	fa02 f303 	lsl.w	r3, r2, r3
 800188a:	43db      	mvns	r3, r3
 800188c:	693a      	ldr	r2, [r7, #16]
 800188e:	4013      	ands	r3, r2
 8001890:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	091b      	lsrs	r3, r3, #4
 8001898:	f003 0201 	and.w	r2, r3, #1
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f003 0303 	and.w	r3, r3, #3
 80018b6:	2b03      	cmp	r3, #3
 80018b8:	d017      	beq.n	80018ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	2203      	movs	r2, #3
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	43db      	mvns	r3, r3
 80018cc:	693a      	ldr	r2, [r7, #16]
 80018ce:	4013      	ands	r3, r2
 80018d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	689a      	ldr	r2, [r3, #8]
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	fa02 f303 	lsl.w	r3, r2, r3
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f003 0303 	and.w	r3, r3, #3
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d123      	bne.n	800193e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	08da      	lsrs	r2, r3, #3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	3208      	adds	r2, #8
 80018fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001902:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	f003 0307 	and.w	r3, r3, #7
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	220f      	movs	r2, #15
 800190e:	fa02 f303 	lsl.w	r3, r2, r3
 8001912:	43db      	mvns	r3, r3
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	4013      	ands	r3, r2
 8001918:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	691a      	ldr	r2, [r3, #16]
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	f003 0307 	and.w	r3, r3, #7
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	4313      	orrs	r3, r2
 800192e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	08da      	lsrs	r2, r3, #3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	3208      	adds	r2, #8
 8001938:	6939      	ldr	r1, [r7, #16]
 800193a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	2203      	movs	r2, #3
 800194a:	fa02 f303 	lsl.w	r3, r2, r3
 800194e:	43db      	mvns	r3, r3
 8001950:	693a      	ldr	r2, [r7, #16]
 8001952:	4013      	ands	r3, r2
 8001954:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f003 0203 	and.w	r2, r3, #3
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	4313      	orrs	r3, r2
 800196a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800197a:	2b00      	cmp	r3, #0
 800197c:	f000 80a0 	beq.w	8001ac0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001980:	4b58      	ldr	r3, [pc, #352]	; (8001ae4 <HAL_GPIO_Init+0x2d8>)
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	4a57      	ldr	r2, [pc, #348]	; (8001ae4 <HAL_GPIO_Init+0x2d8>)
 8001986:	f043 0301 	orr.w	r3, r3, #1
 800198a:	6193      	str	r3, [r2, #24]
 800198c:	4b55      	ldr	r3, [pc, #340]	; (8001ae4 <HAL_GPIO_Init+0x2d8>)
 800198e:	699b      	ldr	r3, [r3, #24]
 8001990:	f003 0301 	and.w	r3, r3, #1
 8001994:	60bb      	str	r3, [r7, #8]
 8001996:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001998:	4a53      	ldr	r2, [pc, #332]	; (8001ae8 <HAL_GPIO_Init+0x2dc>)
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	089b      	lsrs	r3, r3, #2
 800199e:	3302      	adds	r3, #2
 80019a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	f003 0303 	and.w	r3, r3, #3
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	220f      	movs	r2, #15
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	43db      	mvns	r3, r3
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	4013      	ands	r3, r2
 80019ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80019c2:	d019      	beq.n	80019f8 <HAL_GPIO_Init+0x1ec>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	4a49      	ldr	r2, [pc, #292]	; (8001aec <HAL_GPIO_Init+0x2e0>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d013      	beq.n	80019f4 <HAL_GPIO_Init+0x1e8>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	4a48      	ldr	r2, [pc, #288]	; (8001af0 <HAL_GPIO_Init+0x2e4>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d00d      	beq.n	80019f0 <HAL_GPIO_Init+0x1e4>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	4a47      	ldr	r2, [pc, #284]	; (8001af4 <HAL_GPIO_Init+0x2e8>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d007      	beq.n	80019ec <HAL_GPIO_Init+0x1e0>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	4a46      	ldr	r2, [pc, #280]	; (8001af8 <HAL_GPIO_Init+0x2ec>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d101      	bne.n	80019e8 <HAL_GPIO_Init+0x1dc>
 80019e4:	2304      	movs	r3, #4
 80019e6:	e008      	b.n	80019fa <HAL_GPIO_Init+0x1ee>
 80019e8:	2305      	movs	r3, #5
 80019ea:	e006      	b.n	80019fa <HAL_GPIO_Init+0x1ee>
 80019ec:	2303      	movs	r3, #3
 80019ee:	e004      	b.n	80019fa <HAL_GPIO_Init+0x1ee>
 80019f0:	2302      	movs	r3, #2
 80019f2:	e002      	b.n	80019fa <HAL_GPIO_Init+0x1ee>
 80019f4:	2301      	movs	r3, #1
 80019f6:	e000      	b.n	80019fa <HAL_GPIO_Init+0x1ee>
 80019f8:	2300      	movs	r3, #0
 80019fa:	697a      	ldr	r2, [r7, #20]
 80019fc:	f002 0203 	and.w	r2, r2, #3
 8001a00:	0092      	lsls	r2, r2, #2
 8001a02:	4093      	lsls	r3, r2
 8001a04:	693a      	ldr	r2, [r7, #16]
 8001a06:	4313      	orrs	r3, r2
 8001a08:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a0a:	4937      	ldr	r1, [pc, #220]	; (8001ae8 <HAL_GPIO_Init+0x2dc>)
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	089b      	lsrs	r3, r3, #2
 8001a10:	3302      	adds	r3, #2
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a18:	4b38      	ldr	r3, [pc, #224]	; (8001afc <HAL_GPIO_Init+0x2f0>)
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	43db      	mvns	r3, r3
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	4013      	ands	r3, r2
 8001a26:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d003      	beq.n	8001a3c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001a34:	693a      	ldr	r2, [r7, #16]
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001a3c:	4a2f      	ldr	r2, [pc, #188]	; (8001afc <HAL_GPIO_Init+0x2f0>)
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a42:	4b2e      	ldr	r3, [pc, #184]	; (8001afc <HAL_GPIO_Init+0x2f0>)
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	43db      	mvns	r3, r3
 8001a4c:	693a      	ldr	r2, [r7, #16]
 8001a4e:	4013      	ands	r3, r2
 8001a50:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d003      	beq.n	8001a66 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001a66:	4a25      	ldr	r2, [pc, #148]	; (8001afc <HAL_GPIO_Init+0x2f0>)
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a6c:	4b23      	ldr	r3, [pc, #140]	; (8001afc <HAL_GPIO_Init+0x2f0>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	43db      	mvns	r3, r3
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	4013      	ands	r3, r2
 8001a7a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d003      	beq.n	8001a90 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001a88:	693a      	ldr	r2, [r7, #16]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001a90:	4a1a      	ldr	r2, [pc, #104]	; (8001afc <HAL_GPIO_Init+0x2f0>)
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a96:	4b19      	ldr	r3, [pc, #100]	; (8001afc <HAL_GPIO_Init+0x2f0>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	43db      	mvns	r3, r3
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d003      	beq.n	8001aba <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001aba:	4a10      	ldr	r2, [pc, #64]	; (8001afc <HAL_GPIO_Init+0x2f0>)
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	fa22 f303 	lsr.w	r3, r2, r3
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	f47f aea3 	bne.w	800181c <HAL_GPIO_Init+0x10>
  }
}
 8001ad6:	bf00      	nop
 8001ad8:	bf00      	nop
 8001ada:	371c      	adds	r7, #28
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	40010000 	.word	0x40010000
 8001aec:	48000400 	.word	0x48000400
 8001af0:	48000800 	.word	0x48000800
 8001af4:	48000c00 	.word	0x48000c00
 8001af8:	48001000 	.word	0x48001000
 8001afc:	40010400 	.word	0x40010400

08001b00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	460b      	mov	r3, r1
 8001b0a:	807b      	strh	r3, [r7, #2]
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b10:	787b      	ldrb	r3, [r7, #1]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d003      	beq.n	8001b1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b16:	887a      	ldrh	r2, [r7, #2]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b1c:	e002      	b.n	8001b24 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b1e:	887a      	ldrh	r2, [r7, #2]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b24:	bf00      	nop
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d101      	bne.n	8001b42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e081      	b.n	8001c46 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d106      	bne.n	8001b5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f7ff fb6e 	bl	8001238 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2224      	movs	r2, #36	; 0x24
 8001b60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f022 0201 	bic.w	r2, r2, #1
 8001b72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	685a      	ldr	r2, [r3, #4]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b80:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	689a      	ldr	r2, [r3, #8]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b90:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	68db      	ldr	r3, [r3, #12]
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d107      	bne.n	8001baa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	689a      	ldr	r2, [r3, #8]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ba6:	609a      	str	r2, [r3, #8]
 8001ba8:	e006      	b.n	8001bb8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	689a      	ldr	r2, [r3, #8]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001bb6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d104      	bne.n	8001bca <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001bc8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	6812      	ldr	r2, [r2, #0]
 8001bd4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001bd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bdc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	68da      	ldr	r2, [r3, #12]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001bec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	691a      	ldr	r2, [r3, #16]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	695b      	ldr	r3, [r3, #20]
 8001bf6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	699b      	ldr	r3, [r3, #24]
 8001bfe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	430a      	orrs	r2, r1
 8001c06:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	69d9      	ldr	r1, [r3, #28]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6a1a      	ldr	r2, [r3, #32]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	430a      	orrs	r2, r1
 8001c16:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f042 0201 	orr.w	r2, r2, #1
 8001c26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2220      	movs	r2, #32
 8001c32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
	...

08001c50 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b088      	sub	sp, #32
 8001c54:	af02      	add	r7, sp, #8
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	4608      	mov	r0, r1
 8001c5a:	4611      	mov	r1, r2
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	4603      	mov	r3, r0
 8001c60:	817b      	strh	r3, [r7, #10]
 8001c62:	460b      	mov	r3, r1
 8001c64:	813b      	strh	r3, [r7, #8]
 8001c66:	4613      	mov	r3, r2
 8001c68:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	2b20      	cmp	r3, #32
 8001c74:	f040 80f9 	bne.w	8001e6a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c78:	6a3b      	ldr	r3, [r7, #32]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d002      	beq.n	8001c84 <HAL_I2C_Mem_Write+0x34>
 8001c7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d105      	bne.n	8001c90 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c8a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e0ed      	b.n	8001e6c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d101      	bne.n	8001c9e <HAL_I2C_Mem_Write+0x4e>
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	e0e6      	b.n	8001e6c <HAL_I2C_Mem_Write+0x21c>
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001ca6:	f7ff fc9b 	bl	80015e0 <HAL_GetTick>
 8001caa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	9300      	str	r3, [sp, #0]
 8001cb0:	2319      	movs	r3, #25
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001cb8:	68f8      	ldr	r0, [r7, #12]
 8001cba:	f000 fac3 	bl	8002244 <I2C_WaitOnFlagUntilTimeout>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e0d1      	b.n	8001e6c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2221      	movs	r2, #33	; 0x21
 8001ccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2240      	movs	r2, #64	; 0x40
 8001cd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	6a3a      	ldr	r2, [r7, #32]
 8001ce2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001ce8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2200      	movs	r2, #0
 8001cee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001cf0:	88f8      	ldrh	r0, [r7, #6]
 8001cf2:	893a      	ldrh	r2, [r7, #8]
 8001cf4:	8979      	ldrh	r1, [r7, #10]
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	9301      	str	r3, [sp, #4]
 8001cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cfc:	9300      	str	r3, [sp, #0]
 8001cfe:	4603      	mov	r3, r0
 8001d00:	68f8      	ldr	r0, [r7, #12]
 8001d02:	f000 f9d3 	bl	80020ac <I2C_RequestMemoryWrite>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d005      	beq.n	8001d18 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e0a9      	b.n	8001e6c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	2bff      	cmp	r3, #255	; 0xff
 8001d20:	d90e      	bls.n	8001d40 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	22ff      	movs	r2, #255	; 0xff
 8001d26:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d2c:	b2da      	uxtb	r2, r3
 8001d2e:	8979      	ldrh	r1, [r7, #10]
 8001d30:	2300      	movs	r3, #0
 8001d32:	9300      	str	r3, [sp, #0]
 8001d34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d38:	68f8      	ldr	r0, [r7, #12]
 8001d3a:	f000 fc3d 	bl	80025b8 <I2C_TransferConfig>
 8001d3e:	e00f      	b.n	8001d60 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d44:	b29a      	uxth	r2, r3
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d4e:	b2da      	uxtb	r2, r3
 8001d50:	8979      	ldrh	r1, [r7, #10]
 8001d52:	2300      	movs	r3, #0
 8001d54:	9300      	str	r3, [sp, #0]
 8001d56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d5a:	68f8      	ldr	r0, [r7, #12]
 8001d5c:	f000 fc2c 	bl	80025b8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d60:	697a      	ldr	r2, [r7, #20]
 8001d62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d64:	68f8      	ldr	r0, [r7, #12]
 8001d66:	f000 fabc 	bl	80022e2 <I2C_WaitOnTXISFlagUntilTimeout>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e07b      	b.n	8001e6c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d78:	781a      	ldrb	r2, [r3, #0]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d84:	1c5a      	adds	r2, r3, #1
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	3b01      	subs	r3, #1
 8001d92:	b29a      	uxth	r2, r3
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d9c:	3b01      	subs	r3, #1
 8001d9e:	b29a      	uxth	r2, r3
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d034      	beq.n	8001e18 <HAL_I2C_Mem_Write+0x1c8>
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d130      	bne.n	8001e18 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	9300      	str	r3, [sp, #0]
 8001dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	2180      	movs	r1, #128	; 0x80
 8001dc0:	68f8      	ldr	r0, [r7, #12]
 8001dc2:	f000 fa3f 	bl	8002244 <I2C_WaitOnFlagUntilTimeout>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e04d      	b.n	8001e6c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	2bff      	cmp	r3, #255	; 0xff
 8001dd8:	d90e      	bls.n	8001df8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	22ff      	movs	r2, #255	; 0xff
 8001dde:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001de4:	b2da      	uxtb	r2, r3
 8001de6:	8979      	ldrh	r1, [r7, #10]
 8001de8:	2300      	movs	r3, #0
 8001dea:	9300      	str	r3, [sp, #0]
 8001dec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001df0:	68f8      	ldr	r0, [r7, #12]
 8001df2:	f000 fbe1 	bl	80025b8 <I2C_TransferConfig>
 8001df6:	e00f      	b.n	8001e18 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dfc:	b29a      	uxth	r2, r3
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e06:	b2da      	uxtb	r2, r3
 8001e08:	8979      	ldrh	r1, [r7, #10]
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	9300      	str	r3, [sp, #0]
 8001e0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e12:	68f8      	ldr	r0, [r7, #12]
 8001e14:	f000 fbd0 	bl	80025b8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d19e      	bne.n	8001d60 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e22:	697a      	ldr	r2, [r7, #20]
 8001e24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e26:	68f8      	ldr	r0, [r7, #12]
 8001e28:	f000 faa2 	bl	8002370 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e01a      	b.n	8001e6c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2220      	movs	r2, #32
 8001e3c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	6859      	ldr	r1, [r3, #4]
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	4b0a      	ldr	r3, [pc, #40]	; (8001e74 <HAL_I2C_Mem_Write+0x224>)
 8001e4a:	400b      	ands	r3, r1
 8001e4c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2220      	movs	r2, #32
 8001e52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e66:	2300      	movs	r3, #0
 8001e68:	e000      	b.n	8001e6c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001e6a:	2302      	movs	r3, #2
  }
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3718      	adds	r7, #24
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	fe00e800 	.word	0xfe00e800

08001e78 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b088      	sub	sp, #32
 8001e7c:	af02      	add	r7, sp, #8
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	4608      	mov	r0, r1
 8001e82:	4611      	mov	r1, r2
 8001e84:	461a      	mov	r2, r3
 8001e86:	4603      	mov	r3, r0
 8001e88:	817b      	strh	r3, [r7, #10]
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	813b      	strh	r3, [r7, #8]
 8001e8e:	4613      	mov	r3, r2
 8001e90:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	2b20      	cmp	r3, #32
 8001e9c:	f040 80fd 	bne.w	800209a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ea0:	6a3b      	ldr	r3, [r7, #32]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d002      	beq.n	8001eac <HAL_I2C_Mem_Read+0x34>
 8001ea6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d105      	bne.n	8001eb8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001eb2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e0f1      	b.n	800209c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d101      	bne.n	8001ec6 <HAL_I2C_Mem_Read+0x4e>
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	e0ea      	b.n	800209c <HAL_I2C_Mem_Read+0x224>
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2201      	movs	r2, #1
 8001eca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001ece:	f7ff fb87 	bl	80015e0 <HAL_GetTick>
 8001ed2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	9300      	str	r3, [sp, #0]
 8001ed8:	2319      	movs	r3, #25
 8001eda:	2201      	movs	r2, #1
 8001edc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ee0:	68f8      	ldr	r0, [r7, #12]
 8001ee2:	f000 f9af 	bl	8002244 <I2C_WaitOnFlagUntilTimeout>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e0d5      	b.n	800209c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2222      	movs	r2, #34	; 0x22
 8001ef4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2240      	movs	r2, #64	; 0x40
 8001efc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2200      	movs	r2, #0
 8001f04:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	6a3a      	ldr	r2, [r7, #32]
 8001f0a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001f10:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2200      	movs	r2, #0
 8001f16:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f18:	88f8      	ldrh	r0, [r7, #6]
 8001f1a:	893a      	ldrh	r2, [r7, #8]
 8001f1c:	8979      	ldrh	r1, [r7, #10]
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	9301      	str	r3, [sp, #4]
 8001f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f24:	9300      	str	r3, [sp, #0]
 8001f26:	4603      	mov	r3, r0
 8001f28:	68f8      	ldr	r0, [r7, #12]
 8001f2a:	f000 f913 	bl	8002154 <I2C_RequestMemoryRead>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d005      	beq.n	8001f40 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2200      	movs	r2, #0
 8001f38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e0ad      	b.n	800209c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	2bff      	cmp	r3, #255	; 0xff
 8001f48:	d90e      	bls.n	8001f68 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	22ff      	movs	r2, #255	; 0xff
 8001f4e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f54:	b2da      	uxtb	r2, r3
 8001f56:	8979      	ldrh	r1, [r7, #10]
 8001f58:	4b52      	ldr	r3, [pc, #328]	; (80020a4 <HAL_I2C_Mem_Read+0x22c>)
 8001f5a:	9300      	str	r3, [sp, #0]
 8001f5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f60:	68f8      	ldr	r0, [r7, #12]
 8001f62:	f000 fb29 	bl	80025b8 <I2C_TransferConfig>
 8001f66:	e00f      	b.n	8001f88 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f6c:	b29a      	uxth	r2, r3
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f76:	b2da      	uxtb	r2, r3
 8001f78:	8979      	ldrh	r1, [r7, #10]
 8001f7a:	4b4a      	ldr	r3, [pc, #296]	; (80020a4 <HAL_I2C_Mem_Read+0x22c>)
 8001f7c:	9300      	str	r3, [sp, #0]
 8001f7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f82:	68f8      	ldr	r0, [r7, #12]
 8001f84:	f000 fb18 	bl	80025b8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	9300      	str	r3, [sp, #0]
 8001f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f8e:	2200      	movs	r2, #0
 8001f90:	2104      	movs	r1, #4
 8001f92:	68f8      	ldr	r0, [r7, #12]
 8001f94:	f000 f956 	bl	8002244 <I2C_WaitOnFlagUntilTimeout>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e07c      	b.n	800209c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fac:	b2d2      	uxtb	r2, r2
 8001fae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb4:	1c5a      	adds	r2, r3, #1
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	b29a      	uxth	r2, r3
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	3b01      	subs	r3, #1
 8001fce:	b29a      	uxth	r2, r3
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d034      	beq.n	8002048 <HAL_I2C_Mem_Read+0x1d0>
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d130      	bne.n	8002048 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	9300      	str	r3, [sp, #0]
 8001fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fec:	2200      	movs	r2, #0
 8001fee:	2180      	movs	r1, #128	; 0x80
 8001ff0:	68f8      	ldr	r0, [r7, #12]
 8001ff2:	f000 f927 	bl	8002244 <I2C_WaitOnFlagUntilTimeout>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e04d      	b.n	800209c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002004:	b29b      	uxth	r3, r3
 8002006:	2bff      	cmp	r3, #255	; 0xff
 8002008:	d90e      	bls.n	8002028 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	22ff      	movs	r2, #255	; 0xff
 800200e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002014:	b2da      	uxtb	r2, r3
 8002016:	8979      	ldrh	r1, [r7, #10]
 8002018:	2300      	movs	r3, #0
 800201a:	9300      	str	r3, [sp, #0]
 800201c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002020:	68f8      	ldr	r0, [r7, #12]
 8002022:	f000 fac9 	bl	80025b8 <I2C_TransferConfig>
 8002026:	e00f      	b.n	8002048 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800202c:	b29a      	uxth	r2, r3
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002036:	b2da      	uxtb	r2, r3
 8002038:	8979      	ldrh	r1, [r7, #10]
 800203a:	2300      	movs	r3, #0
 800203c:	9300      	str	r3, [sp, #0]
 800203e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002042:	68f8      	ldr	r0, [r7, #12]
 8002044:	f000 fab8 	bl	80025b8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800204c:	b29b      	uxth	r3, r3
 800204e:	2b00      	cmp	r3, #0
 8002050:	d19a      	bne.n	8001f88 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002052:	697a      	ldr	r2, [r7, #20]
 8002054:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002056:	68f8      	ldr	r0, [r7, #12]
 8002058:	f000 f98a 	bl	8002370 <I2C_WaitOnSTOPFlagUntilTimeout>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e01a      	b.n	800209c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2220      	movs	r2, #32
 800206c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	6859      	ldr	r1, [r3, #4]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	4b0b      	ldr	r3, [pc, #44]	; (80020a8 <HAL_I2C_Mem_Read+0x230>)
 800207a:	400b      	ands	r3, r1
 800207c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2220      	movs	r2, #32
 8002082:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2200      	movs	r2, #0
 8002092:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002096:	2300      	movs	r3, #0
 8002098:	e000      	b.n	800209c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800209a:	2302      	movs	r3, #2
  }
}
 800209c:	4618      	mov	r0, r3
 800209e:	3718      	adds	r7, #24
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	80002400 	.word	0x80002400
 80020a8:	fe00e800 	.word	0xfe00e800

080020ac <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b086      	sub	sp, #24
 80020b0:	af02      	add	r7, sp, #8
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	4608      	mov	r0, r1
 80020b6:	4611      	mov	r1, r2
 80020b8:	461a      	mov	r2, r3
 80020ba:	4603      	mov	r3, r0
 80020bc:	817b      	strh	r3, [r7, #10]
 80020be:	460b      	mov	r3, r1
 80020c0:	813b      	strh	r3, [r7, #8]
 80020c2:	4613      	mov	r3, r2
 80020c4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80020c6:	88fb      	ldrh	r3, [r7, #6]
 80020c8:	b2da      	uxtb	r2, r3
 80020ca:	8979      	ldrh	r1, [r7, #10]
 80020cc:	4b20      	ldr	r3, [pc, #128]	; (8002150 <I2C_RequestMemoryWrite+0xa4>)
 80020ce:	9300      	str	r3, [sp, #0]
 80020d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020d4:	68f8      	ldr	r0, [r7, #12]
 80020d6:	f000 fa6f 	bl	80025b8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80020da:	69fa      	ldr	r2, [r7, #28]
 80020dc:	69b9      	ldr	r1, [r7, #24]
 80020de:	68f8      	ldr	r0, [r7, #12]
 80020e0:	f000 f8ff 	bl	80022e2 <I2C_WaitOnTXISFlagUntilTimeout>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e02c      	b.n	8002148 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80020ee:	88fb      	ldrh	r3, [r7, #6]
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d105      	bne.n	8002100 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80020f4:	893b      	ldrh	r3, [r7, #8]
 80020f6:	b2da      	uxtb	r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	629a      	str	r2, [r3, #40]	; 0x28
 80020fe:	e015      	b.n	800212c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002100:	893b      	ldrh	r3, [r7, #8]
 8002102:	0a1b      	lsrs	r3, r3, #8
 8002104:	b29b      	uxth	r3, r3
 8002106:	b2da      	uxtb	r2, r3
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800210e:	69fa      	ldr	r2, [r7, #28]
 8002110:	69b9      	ldr	r1, [r7, #24]
 8002112:	68f8      	ldr	r0, [r7, #12]
 8002114:	f000 f8e5 	bl	80022e2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e012      	b.n	8002148 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002122:	893b      	ldrh	r3, [r7, #8]
 8002124:	b2da      	uxtb	r2, r3
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	9300      	str	r3, [sp, #0]
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	2200      	movs	r2, #0
 8002134:	2180      	movs	r1, #128	; 0x80
 8002136:	68f8      	ldr	r0, [r7, #12]
 8002138:	f000 f884 	bl	8002244 <I2C_WaitOnFlagUntilTimeout>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e000      	b.n	8002148 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002146:	2300      	movs	r3, #0
}
 8002148:	4618      	mov	r0, r3
 800214a:	3710      	adds	r7, #16
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	80002000 	.word	0x80002000

08002154 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b086      	sub	sp, #24
 8002158:	af02      	add	r7, sp, #8
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	4608      	mov	r0, r1
 800215e:	4611      	mov	r1, r2
 8002160:	461a      	mov	r2, r3
 8002162:	4603      	mov	r3, r0
 8002164:	817b      	strh	r3, [r7, #10]
 8002166:	460b      	mov	r3, r1
 8002168:	813b      	strh	r3, [r7, #8]
 800216a:	4613      	mov	r3, r2
 800216c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800216e:	88fb      	ldrh	r3, [r7, #6]
 8002170:	b2da      	uxtb	r2, r3
 8002172:	8979      	ldrh	r1, [r7, #10]
 8002174:	4b20      	ldr	r3, [pc, #128]	; (80021f8 <I2C_RequestMemoryRead+0xa4>)
 8002176:	9300      	str	r3, [sp, #0]
 8002178:	2300      	movs	r3, #0
 800217a:	68f8      	ldr	r0, [r7, #12]
 800217c:	f000 fa1c 	bl	80025b8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002180:	69fa      	ldr	r2, [r7, #28]
 8002182:	69b9      	ldr	r1, [r7, #24]
 8002184:	68f8      	ldr	r0, [r7, #12]
 8002186:	f000 f8ac 	bl	80022e2 <I2C_WaitOnTXISFlagUntilTimeout>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e02c      	b.n	80021ee <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002194:	88fb      	ldrh	r3, [r7, #6]
 8002196:	2b01      	cmp	r3, #1
 8002198:	d105      	bne.n	80021a6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800219a:	893b      	ldrh	r3, [r7, #8]
 800219c:	b2da      	uxtb	r2, r3
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	629a      	str	r2, [r3, #40]	; 0x28
 80021a4:	e015      	b.n	80021d2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80021a6:	893b      	ldrh	r3, [r7, #8]
 80021a8:	0a1b      	lsrs	r3, r3, #8
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	b2da      	uxtb	r2, r3
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021b4:	69fa      	ldr	r2, [r7, #28]
 80021b6:	69b9      	ldr	r1, [r7, #24]
 80021b8:	68f8      	ldr	r0, [r7, #12]
 80021ba:	f000 f892 	bl	80022e2 <I2C_WaitOnTXISFlagUntilTimeout>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e012      	b.n	80021ee <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80021c8:	893b      	ldrh	r3, [r7, #8]
 80021ca:	b2da      	uxtb	r2, r3
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	9300      	str	r3, [sp, #0]
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	2200      	movs	r2, #0
 80021da:	2140      	movs	r1, #64	; 0x40
 80021dc:	68f8      	ldr	r0, [r7, #12]
 80021de:	f000 f831 	bl	8002244 <I2C_WaitOnFlagUntilTimeout>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e000      	b.n	80021ee <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	80002000 	.word	0x80002000

080021fc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	699b      	ldr	r3, [r3, #24]
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	2b02      	cmp	r3, #2
 8002210:	d103      	bne.n	800221a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2200      	movs	r2, #0
 8002218:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	699b      	ldr	r3, [r3, #24]
 8002220:	f003 0301 	and.w	r3, r3, #1
 8002224:	2b01      	cmp	r3, #1
 8002226:	d007      	beq.n	8002238 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	699a      	ldr	r2, [r3, #24]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f042 0201 	orr.w	r2, r2, #1
 8002236:	619a      	str	r2, [r3, #24]
  }
}
 8002238:	bf00      	nop
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	60b9      	str	r1, [r7, #8]
 800224e:	603b      	str	r3, [r7, #0]
 8002250:	4613      	mov	r3, r2
 8002252:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002254:	e031      	b.n	80022ba <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800225c:	d02d      	beq.n	80022ba <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800225e:	f7ff f9bf 	bl	80015e0 <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	683a      	ldr	r2, [r7, #0]
 800226a:	429a      	cmp	r2, r3
 800226c:	d302      	bcc.n	8002274 <I2C_WaitOnFlagUntilTimeout+0x30>
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d122      	bne.n	80022ba <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	699a      	ldr	r2, [r3, #24]
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	4013      	ands	r3, r2
 800227e:	68ba      	ldr	r2, [r7, #8]
 8002280:	429a      	cmp	r2, r3
 8002282:	bf0c      	ite	eq
 8002284:	2301      	moveq	r3, #1
 8002286:	2300      	movne	r3, #0
 8002288:	b2db      	uxtb	r3, r3
 800228a:	461a      	mov	r2, r3
 800228c:	79fb      	ldrb	r3, [r7, #7]
 800228e:	429a      	cmp	r2, r3
 8002290:	d113      	bne.n	80022ba <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002296:	f043 0220 	orr.w	r2, r3, #32
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2220      	movs	r2, #32
 80022a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2200      	movs	r2, #0
 80022aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e00f      	b.n	80022da <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	699a      	ldr	r2, [r3, #24]
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	4013      	ands	r3, r2
 80022c4:	68ba      	ldr	r2, [r7, #8]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	bf0c      	ite	eq
 80022ca:	2301      	moveq	r3, #1
 80022cc:	2300      	movne	r3, #0
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	461a      	mov	r2, r3
 80022d2:	79fb      	ldrb	r3, [r7, #7]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d0be      	beq.n	8002256 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3710      	adds	r7, #16
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}

080022e2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80022e2:	b580      	push	{r7, lr}
 80022e4:	b084      	sub	sp, #16
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	60f8      	str	r0, [r7, #12]
 80022ea:	60b9      	str	r1, [r7, #8]
 80022ec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80022ee:	e033      	b.n	8002358 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	68b9      	ldr	r1, [r7, #8]
 80022f4:	68f8      	ldr	r0, [r7, #12]
 80022f6:	f000 f87f 	bl	80023f8 <I2C_IsErrorOccurred>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d001      	beq.n	8002304 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e031      	b.n	8002368 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800230a:	d025      	beq.n	8002358 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800230c:	f7ff f968 	bl	80015e0 <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	68ba      	ldr	r2, [r7, #8]
 8002318:	429a      	cmp	r2, r3
 800231a:	d302      	bcc.n	8002322 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d11a      	bne.n	8002358 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	f003 0302 	and.w	r3, r3, #2
 800232c:	2b02      	cmp	r3, #2
 800232e:	d013      	beq.n	8002358 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002334:	f043 0220 	orr.w	r2, r3, #32
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2220      	movs	r2, #32
 8002340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2200      	movs	r2, #0
 8002348:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2200      	movs	r2, #0
 8002350:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e007      	b.n	8002368 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	699b      	ldr	r3, [r3, #24]
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	2b02      	cmp	r3, #2
 8002364:	d1c4      	bne.n	80022f0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002366:	2300      	movs	r3, #0
}
 8002368:	4618      	mov	r0, r3
 800236a:	3710      	adds	r7, #16
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}

08002370 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	60f8      	str	r0, [r7, #12]
 8002378:	60b9      	str	r1, [r7, #8]
 800237a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800237c:	e02f      	b.n	80023de <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	68b9      	ldr	r1, [r7, #8]
 8002382:	68f8      	ldr	r0, [r7, #12]
 8002384:	f000 f838 	bl	80023f8 <I2C_IsErrorOccurred>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e02d      	b.n	80023ee <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002392:	f7ff f925 	bl	80015e0 <HAL_GetTick>
 8002396:	4602      	mov	r2, r0
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	68ba      	ldr	r2, [r7, #8]
 800239e:	429a      	cmp	r2, r3
 80023a0:	d302      	bcc.n	80023a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d11a      	bne.n	80023de <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	699b      	ldr	r3, [r3, #24]
 80023ae:	f003 0320 	and.w	r3, r3, #32
 80023b2:	2b20      	cmp	r3, #32
 80023b4:	d013      	beq.n	80023de <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ba:	f043 0220 	orr.w	r2, r3, #32
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2220      	movs	r2, #32
 80023c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2200      	movs	r2, #0
 80023ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2200      	movs	r2, #0
 80023d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e007      	b.n	80023ee <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	f003 0320 	and.w	r3, r3, #32
 80023e8:	2b20      	cmp	r3, #32
 80023ea:	d1c8      	bne.n	800237e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80023ec:	2300      	movs	r3, #0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3710      	adds	r7, #16
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
	...

080023f8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b08a      	sub	sp, #40	; 0x28
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002404:	2300      	movs	r3, #0
 8002406:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002412:	2300      	movs	r3, #0
 8002414:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	f003 0310 	and.w	r3, r3, #16
 8002420:	2b00      	cmp	r3, #0
 8002422:	d068      	beq.n	80024f6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2210      	movs	r2, #16
 800242a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800242c:	e049      	b.n	80024c2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002434:	d045      	beq.n	80024c2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002436:	f7ff f8d3 	bl	80015e0 <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	68ba      	ldr	r2, [r7, #8]
 8002442:	429a      	cmp	r2, r3
 8002444:	d302      	bcc.n	800244c <I2C_IsErrorOccurred+0x54>
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d13a      	bne.n	80024c2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002456:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800245e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	699b      	ldr	r3, [r3, #24]
 8002466:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800246a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800246e:	d121      	bne.n	80024b4 <I2C_IsErrorOccurred+0xbc>
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002476:	d01d      	beq.n	80024b4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002478:	7cfb      	ldrb	r3, [r7, #19]
 800247a:	2b20      	cmp	r3, #32
 800247c:	d01a      	beq.n	80024b4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	685a      	ldr	r2, [r3, #4]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800248c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800248e:	f7ff f8a7 	bl	80015e0 <HAL_GetTick>
 8002492:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002494:	e00e      	b.n	80024b4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002496:	f7ff f8a3 	bl	80015e0 <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	2b19      	cmp	r3, #25
 80024a2:	d907      	bls.n	80024b4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80024a4:	6a3b      	ldr	r3, [r7, #32]
 80024a6:	f043 0320 	orr.w	r3, r3, #32
 80024aa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80024b2:	e006      	b.n	80024c2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	699b      	ldr	r3, [r3, #24]
 80024ba:	f003 0320 	and.w	r3, r3, #32
 80024be:	2b20      	cmp	r3, #32
 80024c0:	d1e9      	bne.n	8002496 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	699b      	ldr	r3, [r3, #24]
 80024c8:	f003 0320 	and.w	r3, r3, #32
 80024cc:	2b20      	cmp	r3, #32
 80024ce:	d003      	beq.n	80024d8 <I2C_IsErrorOccurred+0xe0>
 80024d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d0aa      	beq.n	800242e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80024d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d103      	bne.n	80024e8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2220      	movs	r2, #32
 80024e6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80024e8:	6a3b      	ldr	r3, [r7, #32]
 80024ea:	f043 0304 	orr.w	r3, r3, #4
 80024ee:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	699b      	ldr	r3, [r3, #24]
 80024fc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002504:	2b00      	cmp	r3, #0
 8002506:	d00b      	beq.n	8002520 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002508:	6a3b      	ldr	r3, [r7, #32]
 800250a:	f043 0301 	orr.w	r3, r3, #1
 800250e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002518:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002526:	2b00      	cmp	r3, #0
 8002528:	d00b      	beq.n	8002542 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800252a:	6a3b      	ldr	r3, [r7, #32]
 800252c:	f043 0308 	orr.w	r3, r3, #8
 8002530:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800253a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002548:	2b00      	cmp	r3, #0
 800254a:	d00b      	beq.n	8002564 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800254c:	6a3b      	ldr	r3, [r7, #32]
 800254e:	f043 0302 	orr.w	r3, r3, #2
 8002552:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f44f 7200 	mov.w	r2, #512	; 0x200
 800255c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002564:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002568:	2b00      	cmp	r3, #0
 800256a:	d01c      	beq.n	80025a6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800256c:	68f8      	ldr	r0, [r7, #12]
 800256e:	f7ff fe45 	bl	80021fc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	6859      	ldr	r1, [r3, #4]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	4b0d      	ldr	r3, [pc, #52]	; (80025b4 <I2C_IsErrorOccurred+0x1bc>)
 800257e:	400b      	ands	r3, r1
 8002580:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002586:	6a3b      	ldr	r3, [r7, #32]
 8002588:	431a      	orrs	r2, r3
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2220      	movs	r2, #32
 8002592:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2200      	movs	r2, #0
 800259a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80025a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3728      	adds	r7, #40	; 0x28
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	fe00e800 	.word	0xfe00e800

080025b8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b087      	sub	sp, #28
 80025bc:	af00      	add	r7, sp, #0
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	607b      	str	r3, [r7, #4]
 80025c2:	460b      	mov	r3, r1
 80025c4:	817b      	strh	r3, [r7, #10]
 80025c6:	4613      	mov	r3, r2
 80025c8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80025ca:	897b      	ldrh	r3, [r7, #10]
 80025cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80025d0:	7a7b      	ldrb	r3, [r7, #9]
 80025d2:	041b      	lsls	r3, r3, #16
 80025d4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80025d8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80025de:	6a3b      	ldr	r3, [r7, #32]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80025e6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	685a      	ldr	r2, [r3, #4]
 80025ee:	6a3b      	ldr	r3, [r7, #32]
 80025f0:	0d5b      	lsrs	r3, r3, #21
 80025f2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80025f6:	4b08      	ldr	r3, [pc, #32]	; (8002618 <I2C_TransferConfig+0x60>)
 80025f8:	430b      	orrs	r3, r1
 80025fa:	43db      	mvns	r3, r3
 80025fc:	ea02 0103 	and.w	r1, r2, r3
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	697a      	ldr	r2, [r7, #20]
 8002606:	430a      	orrs	r2, r1
 8002608:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800260a:	bf00      	nop
 800260c:	371c      	adds	r7, #28
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	03ff63ff 	.word	0x03ff63ff

0800261c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800262c:	b2db      	uxtb	r3, r3
 800262e:	2b20      	cmp	r3, #32
 8002630:	d138      	bne.n	80026a4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002638:	2b01      	cmp	r3, #1
 800263a:	d101      	bne.n	8002640 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800263c:	2302      	movs	r3, #2
 800263e:	e032      	b.n	80026a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2224      	movs	r2, #36	; 0x24
 800264c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f022 0201 	bic.w	r2, r2, #1
 800265e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800266e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	6819      	ldr	r1, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	683a      	ldr	r2, [r7, #0]
 800267c:	430a      	orrs	r2, r1
 800267e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f042 0201 	orr.w	r2, r2, #1
 800268e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2220      	movs	r2, #32
 8002694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026a0:	2300      	movs	r3, #0
 80026a2:	e000      	b.n	80026a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80026a4:	2302      	movs	r3, #2
  }
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr

080026b2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80026b2:	b480      	push	{r7}
 80026b4:	b085      	sub	sp, #20
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
 80026ba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	2b20      	cmp	r3, #32
 80026c6:	d139      	bne.n	800273c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d101      	bne.n	80026d6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80026d2:	2302      	movs	r3, #2
 80026d4:	e033      	b.n	800273e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2201      	movs	r2, #1
 80026da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2224      	movs	r2, #36	; 0x24
 80026e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f022 0201 	bic.w	r2, r2, #1
 80026f4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002704:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	021b      	lsls	r3, r3, #8
 800270a:	68fa      	ldr	r2, [r7, #12]
 800270c:	4313      	orrs	r3, r2
 800270e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	68fa      	ldr	r2, [r7, #12]
 8002716:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f042 0201 	orr.w	r2, r2, #1
 8002726:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2220      	movs	r2, #32
 800272c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2200      	movs	r2, #0
 8002734:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002738:	2300      	movs	r3, #0
 800273a:	e000      	b.n	800273e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800273c:	2302      	movs	r3, #2
  }
}
 800273e:	4618      	mov	r0, r3
 8002740:	3714      	adds	r7, #20
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr

0800274a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800274a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800274c:	b08b      	sub	sp, #44	; 0x2c
 800274e:	af06      	add	r7, sp, #24
 8002750:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d101      	bne.n	800275c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e0c4      	b.n	80028e6 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002762:	b2db      	uxtb	r3, r3
 8002764:	2b00      	cmp	r3, #0
 8002766:	d106      	bne.n	8002776 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f7fe fde7 	bl	8001344 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2203      	movs	r2, #3
 800277a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4618      	mov	r0, r3
 8002784:	f002 f80a 	bl	800479c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002788:	2300      	movs	r3, #0
 800278a:	73fb      	strb	r3, [r7, #15]
 800278c:	e040      	b.n	8002810 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800278e:	7bfb      	ldrb	r3, [r7, #15]
 8002790:	6879      	ldr	r1, [r7, #4]
 8002792:	1c5a      	adds	r2, r3, #1
 8002794:	4613      	mov	r3, r2
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	4413      	add	r3, r2
 800279a:	00db      	lsls	r3, r3, #3
 800279c:	440b      	add	r3, r1
 800279e:	3301      	adds	r3, #1
 80027a0:	2201      	movs	r2, #1
 80027a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80027a4:	7bfb      	ldrb	r3, [r7, #15]
 80027a6:	6879      	ldr	r1, [r7, #4]
 80027a8:	1c5a      	adds	r2, r3, #1
 80027aa:	4613      	mov	r3, r2
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	4413      	add	r3, r2
 80027b0:	00db      	lsls	r3, r3, #3
 80027b2:	440b      	add	r3, r1
 80027b4:	7bfa      	ldrb	r2, [r7, #15]
 80027b6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80027b8:	7bfb      	ldrb	r3, [r7, #15]
 80027ba:	6879      	ldr	r1, [r7, #4]
 80027bc:	1c5a      	adds	r2, r3, #1
 80027be:	4613      	mov	r3, r2
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	4413      	add	r3, r2
 80027c4:	00db      	lsls	r3, r3, #3
 80027c6:	440b      	add	r3, r1
 80027c8:	3303      	adds	r3, #3
 80027ca:	2200      	movs	r2, #0
 80027cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80027ce:	7bfa      	ldrb	r2, [r7, #15]
 80027d0:	6879      	ldr	r1, [r7, #4]
 80027d2:	4613      	mov	r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	4413      	add	r3, r2
 80027d8:	00db      	lsls	r3, r3, #3
 80027da:	440b      	add	r3, r1
 80027dc:	3338      	adds	r3, #56	; 0x38
 80027de:	2200      	movs	r2, #0
 80027e0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80027e2:	7bfa      	ldrb	r2, [r7, #15]
 80027e4:	6879      	ldr	r1, [r7, #4]
 80027e6:	4613      	mov	r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	4413      	add	r3, r2
 80027ec:	00db      	lsls	r3, r3, #3
 80027ee:	440b      	add	r3, r1
 80027f0:	333c      	adds	r3, #60	; 0x3c
 80027f2:	2200      	movs	r2, #0
 80027f4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80027f6:	7bfa      	ldrb	r2, [r7, #15]
 80027f8:	6879      	ldr	r1, [r7, #4]
 80027fa:	4613      	mov	r3, r2
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	4413      	add	r3, r2
 8002800:	00db      	lsls	r3, r3, #3
 8002802:	440b      	add	r3, r1
 8002804:	3340      	adds	r3, #64	; 0x40
 8002806:	2200      	movs	r2, #0
 8002808:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800280a:	7bfb      	ldrb	r3, [r7, #15]
 800280c:	3301      	adds	r3, #1
 800280e:	73fb      	strb	r3, [r7, #15]
 8002810:	7bfa      	ldrb	r2, [r7, #15]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	429a      	cmp	r2, r3
 8002818:	d3b9      	bcc.n	800278e <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800281a:	2300      	movs	r3, #0
 800281c:	73fb      	strb	r3, [r7, #15]
 800281e:	e044      	b.n	80028aa <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002820:	7bfa      	ldrb	r2, [r7, #15]
 8002822:	6879      	ldr	r1, [r7, #4]
 8002824:	4613      	mov	r3, r2
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	4413      	add	r3, r2
 800282a:	00db      	lsls	r3, r3, #3
 800282c:	440b      	add	r3, r1
 800282e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002832:	2200      	movs	r2, #0
 8002834:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002836:	7bfa      	ldrb	r2, [r7, #15]
 8002838:	6879      	ldr	r1, [r7, #4]
 800283a:	4613      	mov	r3, r2
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	4413      	add	r3, r2
 8002840:	00db      	lsls	r3, r3, #3
 8002842:	440b      	add	r3, r1
 8002844:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002848:	7bfa      	ldrb	r2, [r7, #15]
 800284a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800284c:	7bfa      	ldrb	r2, [r7, #15]
 800284e:	6879      	ldr	r1, [r7, #4]
 8002850:	4613      	mov	r3, r2
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	4413      	add	r3, r2
 8002856:	00db      	lsls	r3, r3, #3
 8002858:	440b      	add	r3, r1
 800285a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800285e:	2200      	movs	r2, #0
 8002860:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002862:	7bfa      	ldrb	r2, [r7, #15]
 8002864:	6879      	ldr	r1, [r7, #4]
 8002866:	4613      	mov	r3, r2
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	4413      	add	r3, r2
 800286c:	00db      	lsls	r3, r3, #3
 800286e:	440b      	add	r3, r1
 8002870:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002874:	2200      	movs	r2, #0
 8002876:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002878:	7bfa      	ldrb	r2, [r7, #15]
 800287a:	6879      	ldr	r1, [r7, #4]
 800287c:	4613      	mov	r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	4413      	add	r3, r2
 8002882:	00db      	lsls	r3, r3, #3
 8002884:	440b      	add	r3, r1
 8002886:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800288a:	2200      	movs	r2, #0
 800288c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800288e:	7bfa      	ldrb	r2, [r7, #15]
 8002890:	6879      	ldr	r1, [r7, #4]
 8002892:	4613      	mov	r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	4413      	add	r3, r2
 8002898:	00db      	lsls	r3, r3, #3
 800289a:	440b      	add	r3, r1
 800289c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80028a0:	2200      	movs	r2, #0
 80028a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028a4:	7bfb      	ldrb	r3, [r7, #15]
 80028a6:	3301      	adds	r3, #1
 80028a8:	73fb      	strb	r3, [r7, #15]
 80028aa:	7bfa      	ldrb	r2, [r7, #15]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d3b5      	bcc.n	8002820 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	603b      	str	r3, [r7, #0]
 80028ba:	687e      	ldr	r6, [r7, #4]
 80028bc:	466d      	mov	r5, sp
 80028be:	f106 0410 	add.w	r4, r6, #16
 80028c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028c6:	6823      	ldr	r3, [r4, #0]
 80028c8:	602b      	str	r3, [r5, #0]
 80028ca:	1d33      	adds	r3, r6, #4
 80028cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028ce:	6838      	ldr	r0, [r7, #0]
 80028d0:	f001 ff7f 	bl	80047d2 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3714      	adds	r7, #20
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080028f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002900:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002902:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002906:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d102      	bne.n	8002916 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	f001 b823 	b.w	800395c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002916:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800291a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0301 	and.w	r3, r3, #1
 8002926:	2b00      	cmp	r3, #0
 8002928:	f000 817d 	beq.w	8002c26 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800292c:	4bbc      	ldr	r3, [pc, #752]	; (8002c20 <HAL_RCC_OscConfig+0x330>)
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f003 030c 	and.w	r3, r3, #12
 8002934:	2b04      	cmp	r3, #4
 8002936:	d00c      	beq.n	8002952 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002938:	4bb9      	ldr	r3, [pc, #740]	; (8002c20 <HAL_RCC_OscConfig+0x330>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f003 030c 	and.w	r3, r3, #12
 8002940:	2b08      	cmp	r3, #8
 8002942:	d15c      	bne.n	80029fe <HAL_RCC_OscConfig+0x10e>
 8002944:	4bb6      	ldr	r3, [pc, #728]	; (8002c20 <HAL_RCC_OscConfig+0x330>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800294c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002950:	d155      	bne.n	80029fe <HAL_RCC_OscConfig+0x10e>
 8002952:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002956:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800295a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800295e:	fa93 f3a3 	rbit	r3, r3
 8002962:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002966:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800296a:	fab3 f383 	clz	r3, r3
 800296e:	b2db      	uxtb	r3, r3
 8002970:	095b      	lsrs	r3, r3, #5
 8002972:	b2db      	uxtb	r3, r3
 8002974:	f043 0301 	orr.w	r3, r3, #1
 8002978:	b2db      	uxtb	r3, r3
 800297a:	2b01      	cmp	r3, #1
 800297c:	d102      	bne.n	8002984 <HAL_RCC_OscConfig+0x94>
 800297e:	4ba8      	ldr	r3, [pc, #672]	; (8002c20 <HAL_RCC_OscConfig+0x330>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	e015      	b.n	80029b0 <HAL_RCC_OscConfig+0xc0>
 8002984:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002988:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002990:	fa93 f3a3 	rbit	r3, r3
 8002994:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002998:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800299c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80029a0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80029a4:	fa93 f3a3 	rbit	r3, r3
 80029a8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80029ac:	4b9c      	ldr	r3, [pc, #624]	; (8002c20 <HAL_RCC_OscConfig+0x330>)
 80029ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80029b4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80029b8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80029bc:	fa92 f2a2 	rbit	r2, r2
 80029c0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80029c4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80029c8:	fab2 f282 	clz	r2, r2
 80029cc:	b2d2      	uxtb	r2, r2
 80029ce:	f042 0220 	orr.w	r2, r2, #32
 80029d2:	b2d2      	uxtb	r2, r2
 80029d4:	f002 021f 	and.w	r2, r2, #31
 80029d8:	2101      	movs	r1, #1
 80029da:	fa01 f202 	lsl.w	r2, r1, r2
 80029de:	4013      	ands	r3, r2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	f000 811f 	beq.w	8002c24 <HAL_RCC_OscConfig+0x334>
 80029e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	f040 8116 	bne.w	8002c24 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	f000 bfaf 	b.w	800395c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a02:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a0e:	d106      	bne.n	8002a1e <HAL_RCC_OscConfig+0x12e>
 8002a10:	4b83      	ldr	r3, [pc, #524]	; (8002c20 <HAL_RCC_OscConfig+0x330>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a82      	ldr	r2, [pc, #520]	; (8002c20 <HAL_RCC_OscConfig+0x330>)
 8002a16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a1a:	6013      	str	r3, [r2, #0]
 8002a1c:	e036      	b.n	8002a8c <HAL_RCC_OscConfig+0x19c>
 8002a1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a22:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d10c      	bne.n	8002a48 <HAL_RCC_OscConfig+0x158>
 8002a2e:	4b7c      	ldr	r3, [pc, #496]	; (8002c20 <HAL_RCC_OscConfig+0x330>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a7b      	ldr	r2, [pc, #492]	; (8002c20 <HAL_RCC_OscConfig+0x330>)
 8002a34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a38:	6013      	str	r3, [r2, #0]
 8002a3a:	4b79      	ldr	r3, [pc, #484]	; (8002c20 <HAL_RCC_OscConfig+0x330>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a78      	ldr	r2, [pc, #480]	; (8002c20 <HAL_RCC_OscConfig+0x330>)
 8002a40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a44:	6013      	str	r3, [r2, #0]
 8002a46:	e021      	b.n	8002a8c <HAL_RCC_OscConfig+0x19c>
 8002a48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a4c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a58:	d10c      	bne.n	8002a74 <HAL_RCC_OscConfig+0x184>
 8002a5a:	4b71      	ldr	r3, [pc, #452]	; (8002c20 <HAL_RCC_OscConfig+0x330>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a70      	ldr	r2, [pc, #448]	; (8002c20 <HAL_RCC_OscConfig+0x330>)
 8002a60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a64:	6013      	str	r3, [r2, #0]
 8002a66:	4b6e      	ldr	r3, [pc, #440]	; (8002c20 <HAL_RCC_OscConfig+0x330>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a6d      	ldr	r2, [pc, #436]	; (8002c20 <HAL_RCC_OscConfig+0x330>)
 8002a6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a70:	6013      	str	r3, [r2, #0]
 8002a72:	e00b      	b.n	8002a8c <HAL_RCC_OscConfig+0x19c>
 8002a74:	4b6a      	ldr	r3, [pc, #424]	; (8002c20 <HAL_RCC_OscConfig+0x330>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a69      	ldr	r2, [pc, #420]	; (8002c20 <HAL_RCC_OscConfig+0x330>)
 8002a7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a7e:	6013      	str	r3, [r2, #0]
 8002a80:	4b67      	ldr	r3, [pc, #412]	; (8002c20 <HAL_RCC_OscConfig+0x330>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a66      	ldr	r2, [pc, #408]	; (8002c20 <HAL_RCC_OscConfig+0x330>)
 8002a86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a8a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a8c:	4b64      	ldr	r3, [pc, #400]	; (8002c20 <HAL_RCC_OscConfig+0x330>)
 8002a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a90:	f023 020f 	bic.w	r2, r3, #15
 8002a94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a98:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	495f      	ldr	r1, [pc, #380]	; (8002c20 <HAL_RCC_OscConfig+0x330>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002aa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aaa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d059      	beq.n	8002b6a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab6:	f7fe fd93 	bl	80015e0 <HAL_GetTick>
 8002aba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002abe:	e00a      	b.n	8002ad6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ac0:	f7fe fd8e 	bl	80015e0 <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	2b64      	cmp	r3, #100	; 0x64
 8002ace:	d902      	bls.n	8002ad6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	f000 bf43 	b.w	800395c <HAL_RCC_OscConfig+0x106c>
 8002ad6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ada:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ade:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002ae2:	fa93 f3a3 	rbit	r3, r3
 8002ae6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002aea:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aee:	fab3 f383 	clz	r3, r3
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	095b      	lsrs	r3, r3, #5
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	f043 0301 	orr.w	r3, r3, #1
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d102      	bne.n	8002b08 <HAL_RCC_OscConfig+0x218>
 8002b02:	4b47      	ldr	r3, [pc, #284]	; (8002c20 <HAL_RCC_OscConfig+0x330>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	e015      	b.n	8002b34 <HAL_RCC_OscConfig+0x244>
 8002b08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b0c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b10:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002b14:	fa93 f3a3 	rbit	r3, r3
 8002b18:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002b1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b20:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002b24:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002b28:	fa93 f3a3 	rbit	r3, r3
 8002b2c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002b30:	4b3b      	ldr	r3, [pc, #236]	; (8002c20 <HAL_RCC_OscConfig+0x330>)
 8002b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b34:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b38:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002b3c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002b40:	fa92 f2a2 	rbit	r2, r2
 8002b44:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002b48:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002b4c:	fab2 f282 	clz	r2, r2
 8002b50:	b2d2      	uxtb	r2, r2
 8002b52:	f042 0220 	orr.w	r2, r2, #32
 8002b56:	b2d2      	uxtb	r2, r2
 8002b58:	f002 021f 	and.w	r2, r2, #31
 8002b5c:	2101      	movs	r1, #1
 8002b5e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b62:	4013      	ands	r3, r2
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d0ab      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x1d0>
 8002b68:	e05d      	b.n	8002c26 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b6a:	f7fe fd39 	bl	80015e0 <HAL_GetTick>
 8002b6e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b72:	e00a      	b.n	8002b8a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b74:	f7fe fd34 	bl	80015e0 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	2b64      	cmp	r3, #100	; 0x64
 8002b82:	d902      	bls.n	8002b8a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	f000 bee9 	b.w	800395c <HAL_RCC_OscConfig+0x106c>
 8002b8a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b8e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b92:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002b96:	fa93 f3a3 	rbit	r3, r3
 8002b9a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002b9e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ba2:	fab3 f383 	clz	r3, r3
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	095b      	lsrs	r3, r3, #5
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	f043 0301 	orr.w	r3, r3, #1
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d102      	bne.n	8002bbc <HAL_RCC_OscConfig+0x2cc>
 8002bb6:	4b1a      	ldr	r3, [pc, #104]	; (8002c20 <HAL_RCC_OscConfig+0x330>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	e015      	b.n	8002be8 <HAL_RCC_OscConfig+0x2f8>
 8002bbc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bc0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002bc8:	fa93 f3a3 	rbit	r3, r3
 8002bcc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002bd0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bd4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002bd8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002bdc:	fa93 f3a3 	rbit	r3, r3
 8002be0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002be4:	4b0e      	ldr	r3, [pc, #56]	; (8002c20 <HAL_RCC_OscConfig+0x330>)
 8002be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002bec:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002bf0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002bf4:	fa92 f2a2 	rbit	r2, r2
 8002bf8:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002bfc:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002c00:	fab2 f282 	clz	r2, r2
 8002c04:	b2d2      	uxtb	r2, r2
 8002c06:	f042 0220 	orr.w	r2, r2, #32
 8002c0a:	b2d2      	uxtb	r2, r2
 8002c0c:	f002 021f 	and.w	r2, r2, #31
 8002c10:	2101      	movs	r1, #1
 8002c12:	fa01 f202 	lsl.w	r2, r1, r2
 8002c16:	4013      	ands	r3, r2
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d1ab      	bne.n	8002b74 <HAL_RCC_OscConfig+0x284>
 8002c1c:	e003      	b.n	8002c26 <HAL_RCC_OscConfig+0x336>
 8002c1e:	bf00      	nop
 8002c20:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c2a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	f000 817d 	beq.w	8002f36 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002c3c:	4ba6      	ldr	r3, [pc, #664]	; (8002ed8 <HAL_RCC_OscConfig+0x5e8>)
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f003 030c 	and.w	r3, r3, #12
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d00b      	beq.n	8002c60 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002c48:	4ba3      	ldr	r3, [pc, #652]	; (8002ed8 <HAL_RCC_OscConfig+0x5e8>)
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f003 030c 	and.w	r3, r3, #12
 8002c50:	2b08      	cmp	r3, #8
 8002c52:	d172      	bne.n	8002d3a <HAL_RCC_OscConfig+0x44a>
 8002c54:	4ba0      	ldr	r3, [pc, #640]	; (8002ed8 <HAL_RCC_OscConfig+0x5e8>)
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d16c      	bne.n	8002d3a <HAL_RCC_OscConfig+0x44a>
 8002c60:	2302      	movs	r3, #2
 8002c62:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c66:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002c6a:	fa93 f3a3 	rbit	r3, r3
 8002c6e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002c72:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c76:	fab3 f383 	clz	r3, r3
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	095b      	lsrs	r3, r3, #5
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	f043 0301 	orr.w	r3, r3, #1
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d102      	bne.n	8002c90 <HAL_RCC_OscConfig+0x3a0>
 8002c8a:	4b93      	ldr	r3, [pc, #588]	; (8002ed8 <HAL_RCC_OscConfig+0x5e8>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	e013      	b.n	8002cb8 <HAL_RCC_OscConfig+0x3c8>
 8002c90:	2302      	movs	r3, #2
 8002c92:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c96:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002c9a:	fa93 f3a3 	rbit	r3, r3
 8002c9e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002ca2:	2302      	movs	r3, #2
 8002ca4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002ca8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002cac:	fa93 f3a3 	rbit	r3, r3
 8002cb0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002cb4:	4b88      	ldr	r3, [pc, #544]	; (8002ed8 <HAL_RCC_OscConfig+0x5e8>)
 8002cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb8:	2202      	movs	r2, #2
 8002cba:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002cbe:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002cc2:	fa92 f2a2 	rbit	r2, r2
 8002cc6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002cca:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002cce:	fab2 f282 	clz	r2, r2
 8002cd2:	b2d2      	uxtb	r2, r2
 8002cd4:	f042 0220 	orr.w	r2, r2, #32
 8002cd8:	b2d2      	uxtb	r2, r2
 8002cda:	f002 021f 	and.w	r2, r2, #31
 8002cde:	2101      	movs	r1, #1
 8002ce0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d00a      	beq.n	8002d00 <HAL_RCC_OscConfig+0x410>
 8002cea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	691b      	ldr	r3, [r3, #16]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d002      	beq.n	8002d00 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	f000 be2e 	b.w	800395c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d00:	4b75      	ldr	r3, [pc, #468]	; (8002ed8 <HAL_RCC_OscConfig+0x5e8>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d0c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	695b      	ldr	r3, [r3, #20]
 8002d14:	21f8      	movs	r1, #248	; 0xf8
 8002d16:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002d1e:	fa91 f1a1 	rbit	r1, r1
 8002d22:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002d26:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002d2a:	fab1 f181 	clz	r1, r1
 8002d2e:	b2c9      	uxtb	r1, r1
 8002d30:	408b      	lsls	r3, r1
 8002d32:	4969      	ldr	r1, [pc, #420]	; (8002ed8 <HAL_RCC_OscConfig+0x5e8>)
 8002d34:	4313      	orrs	r3, r2
 8002d36:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d38:	e0fd      	b.n	8002f36 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d3e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	f000 8088 	beq.w	8002e5c <HAL_RCC_OscConfig+0x56c>
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d52:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002d56:	fa93 f3a3 	rbit	r3, r3
 8002d5a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002d5e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d62:	fab3 f383 	clz	r3, r3
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d6c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	461a      	mov	r2, r3
 8002d74:	2301      	movs	r3, #1
 8002d76:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d78:	f7fe fc32 	bl	80015e0 <HAL_GetTick>
 8002d7c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d80:	e00a      	b.n	8002d98 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d82:	f7fe fc2d 	bl	80015e0 <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d902      	bls.n	8002d98 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	f000 bde2 	b.w	800395c <HAL_RCC_OscConfig+0x106c>
 8002d98:	2302      	movs	r3, #2
 8002d9a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d9e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002da2:	fa93 f3a3 	rbit	r3, r3
 8002da6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002daa:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dae:	fab3 f383 	clz	r3, r3
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	095b      	lsrs	r3, r3, #5
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	f043 0301 	orr.w	r3, r3, #1
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d102      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x4d8>
 8002dc2:	4b45      	ldr	r3, [pc, #276]	; (8002ed8 <HAL_RCC_OscConfig+0x5e8>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	e013      	b.n	8002df0 <HAL_RCC_OscConfig+0x500>
 8002dc8:	2302      	movs	r3, #2
 8002dca:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dce:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002dd2:	fa93 f3a3 	rbit	r3, r3
 8002dd6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002dda:	2302      	movs	r3, #2
 8002ddc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002de0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002de4:	fa93 f3a3 	rbit	r3, r3
 8002de8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002dec:	4b3a      	ldr	r3, [pc, #232]	; (8002ed8 <HAL_RCC_OscConfig+0x5e8>)
 8002dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df0:	2202      	movs	r2, #2
 8002df2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002df6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002dfa:	fa92 f2a2 	rbit	r2, r2
 8002dfe:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002e02:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002e06:	fab2 f282 	clz	r2, r2
 8002e0a:	b2d2      	uxtb	r2, r2
 8002e0c:	f042 0220 	orr.w	r2, r2, #32
 8002e10:	b2d2      	uxtb	r2, r2
 8002e12:	f002 021f 	and.w	r2, r2, #31
 8002e16:	2101      	movs	r1, #1
 8002e18:	fa01 f202 	lsl.w	r2, r1, r2
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d0af      	beq.n	8002d82 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e22:	4b2d      	ldr	r3, [pc, #180]	; (8002ed8 <HAL_RCC_OscConfig+0x5e8>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	695b      	ldr	r3, [r3, #20]
 8002e36:	21f8      	movs	r1, #248	; 0xf8
 8002e38:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002e40:	fa91 f1a1 	rbit	r1, r1
 8002e44:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002e48:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002e4c:	fab1 f181 	clz	r1, r1
 8002e50:	b2c9      	uxtb	r1, r1
 8002e52:	408b      	lsls	r3, r1
 8002e54:	4920      	ldr	r1, [pc, #128]	; (8002ed8 <HAL_RCC_OscConfig+0x5e8>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	600b      	str	r3, [r1, #0]
 8002e5a:	e06c      	b.n	8002f36 <HAL_RCC_OscConfig+0x646>
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e62:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002e66:	fa93 f3a3 	rbit	r3, r3
 8002e6a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002e6e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e72:	fab3 f383 	clz	r3, r3
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e7c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	461a      	mov	r2, r3
 8002e84:	2300      	movs	r3, #0
 8002e86:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e88:	f7fe fbaa 	bl	80015e0 <HAL_GetTick>
 8002e8c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e90:	e00a      	b.n	8002ea8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e92:	f7fe fba5 	bl	80015e0 <HAL_GetTick>
 8002e96:	4602      	mov	r2, r0
 8002e98:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d902      	bls.n	8002ea8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	f000 bd5a 	b.w	800395c <HAL_RCC_OscConfig+0x106c>
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eae:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002eb2:	fa93 f3a3 	rbit	r3, r3
 8002eb6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002eba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ebe:	fab3 f383 	clz	r3, r3
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	095b      	lsrs	r3, r3, #5
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	f043 0301 	orr.w	r3, r3, #1
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d104      	bne.n	8002edc <HAL_RCC_OscConfig+0x5ec>
 8002ed2:	4b01      	ldr	r3, [pc, #4]	; (8002ed8 <HAL_RCC_OscConfig+0x5e8>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	e015      	b.n	8002f04 <HAL_RCC_OscConfig+0x614>
 8002ed8:	40021000 	.word	0x40021000
 8002edc:	2302      	movs	r3, #2
 8002ede:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002ee6:	fa93 f3a3 	rbit	r3, r3
 8002eea:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002eee:	2302      	movs	r3, #2
 8002ef0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002ef4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002ef8:	fa93 f3a3 	rbit	r3, r3
 8002efc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002f00:	4bc8      	ldr	r3, [pc, #800]	; (8003224 <HAL_RCC_OscConfig+0x934>)
 8002f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f04:	2202      	movs	r2, #2
 8002f06:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002f0a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002f0e:	fa92 f2a2 	rbit	r2, r2
 8002f12:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002f16:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002f1a:	fab2 f282 	clz	r2, r2
 8002f1e:	b2d2      	uxtb	r2, r2
 8002f20:	f042 0220 	orr.w	r2, r2, #32
 8002f24:	b2d2      	uxtb	r2, r2
 8002f26:	f002 021f 	and.w	r2, r2, #31
 8002f2a:	2101      	movs	r1, #1
 8002f2c:	fa01 f202 	lsl.w	r2, r1, r2
 8002f30:	4013      	ands	r3, r2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d1ad      	bne.n	8002e92 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f3a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0308 	and.w	r3, r3, #8
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	f000 8110 	beq.w	800316c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f50:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	699b      	ldr	r3, [r3, #24]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d079      	beq.n	8003050 <HAL_RCC_OscConfig+0x760>
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f62:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002f66:	fa93 f3a3 	rbit	r3, r3
 8002f6a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002f6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f72:	fab3 f383 	clz	r3, r3
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	461a      	mov	r2, r3
 8002f7a:	4bab      	ldr	r3, [pc, #684]	; (8003228 <HAL_RCC_OscConfig+0x938>)
 8002f7c:	4413      	add	r3, r2
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	461a      	mov	r2, r3
 8002f82:	2301      	movs	r3, #1
 8002f84:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f86:	f7fe fb2b 	bl	80015e0 <HAL_GetTick>
 8002f8a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f8e:	e00a      	b.n	8002fa6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f90:	f7fe fb26 	bl	80015e0 <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d902      	bls.n	8002fa6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	f000 bcdb 	b.w	800395c <HAL_RCC_OscConfig+0x106c>
 8002fa6:	2302      	movs	r3, #2
 8002fa8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fac:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002fb0:	fa93 f3a3 	rbit	r3, r3
 8002fb4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002fb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fbc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002fc0:	2202      	movs	r2, #2
 8002fc2:	601a      	str	r2, [r3, #0]
 8002fc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fc8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	fa93 f2a3 	rbit	r2, r3
 8002fd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fd6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002fda:	601a      	str	r2, [r3, #0]
 8002fdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fe0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002fe4:	2202      	movs	r2, #2
 8002fe6:	601a      	str	r2, [r3, #0]
 8002fe8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	fa93 f2a3 	rbit	r2, r3
 8002ff6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ffa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002ffe:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003000:	4b88      	ldr	r3, [pc, #544]	; (8003224 <HAL_RCC_OscConfig+0x934>)
 8003002:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003004:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003008:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800300c:	2102      	movs	r1, #2
 800300e:	6019      	str	r1, [r3, #0]
 8003010:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003014:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	fa93 f1a3 	rbit	r1, r3
 800301e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003022:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003026:	6019      	str	r1, [r3, #0]
  return result;
 8003028:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800302c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	fab3 f383 	clz	r3, r3
 8003036:	b2db      	uxtb	r3, r3
 8003038:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800303c:	b2db      	uxtb	r3, r3
 800303e:	f003 031f 	and.w	r3, r3, #31
 8003042:	2101      	movs	r1, #1
 8003044:	fa01 f303 	lsl.w	r3, r1, r3
 8003048:	4013      	ands	r3, r2
 800304a:	2b00      	cmp	r3, #0
 800304c:	d0a0      	beq.n	8002f90 <HAL_RCC_OscConfig+0x6a0>
 800304e:	e08d      	b.n	800316c <HAL_RCC_OscConfig+0x87c>
 8003050:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003054:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003058:	2201      	movs	r2, #1
 800305a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800305c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003060:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	fa93 f2a3 	rbit	r2, r3
 800306a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800306e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003072:	601a      	str	r2, [r3, #0]
  return result;
 8003074:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003078:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800307c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800307e:	fab3 f383 	clz	r3, r3
 8003082:	b2db      	uxtb	r3, r3
 8003084:	461a      	mov	r2, r3
 8003086:	4b68      	ldr	r3, [pc, #416]	; (8003228 <HAL_RCC_OscConfig+0x938>)
 8003088:	4413      	add	r3, r2
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	461a      	mov	r2, r3
 800308e:	2300      	movs	r3, #0
 8003090:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003092:	f7fe faa5 	bl	80015e0 <HAL_GetTick>
 8003096:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800309a:	e00a      	b.n	80030b2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800309c:	f7fe faa0 	bl	80015e0 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d902      	bls.n	80030b2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80030ac:	2303      	movs	r3, #3
 80030ae:	f000 bc55 	b.w	800395c <HAL_RCC_OscConfig+0x106c>
 80030b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030b6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80030ba:	2202      	movs	r2, #2
 80030bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030c2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	fa93 f2a3 	rbit	r2, r3
 80030cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030d0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80030d4:	601a      	str	r2, [r3, #0]
 80030d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030da:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80030de:	2202      	movs	r2, #2
 80030e0:	601a      	str	r2, [r3, #0]
 80030e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030e6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	fa93 f2a3 	rbit	r2, r3
 80030f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80030f8:	601a      	str	r2, [r3, #0]
 80030fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003102:	2202      	movs	r2, #2
 8003104:	601a      	str	r2, [r3, #0]
 8003106:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800310a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	fa93 f2a3 	rbit	r2, r3
 8003114:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003118:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800311c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800311e:	4b41      	ldr	r3, [pc, #260]	; (8003224 <HAL_RCC_OscConfig+0x934>)
 8003120:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003122:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003126:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800312a:	2102      	movs	r1, #2
 800312c:	6019      	str	r1, [r3, #0]
 800312e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003132:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	fa93 f1a3 	rbit	r1, r3
 800313c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003140:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003144:	6019      	str	r1, [r3, #0]
  return result;
 8003146:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800314a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	fab3 f383 	clz	r3, r3
 8003154:	b2db      	uxtb	r3, r3
 8003156:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800315a:	b2db      	uxtb	r3, r3
 800315c:	f003 031f 	and.w	r3, r3, #31
 8003160:	2101      	movs	r1, #1
 8003162:	fa01 f303 	lsl.w	r3, r1, r3
 8003166:	4013      	ands	r3, r2
 8003168:	2b00      	cmp	r3, #0
 800316a:	d197      	bne.n	800309c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800316c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003170:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0304 	and.w	r3, r3, #4
 800317c:	2b00      	cmp	r3, #0
 800317e:	f000 81a1 	beq.w	80034c4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003182:	2300      	movs	r3, #0
 8003184:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003188:	4b26      	ldr	r3, [pc, #152]	; (8003224 <HAL_RCC_OscConfig+0x934>)
 800318a:	69db      	ldr	r3, [r3, #28]
 800318c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d116      	bne.n	80031c2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003194:	4b23      	ldr	r3, [pc, #140]	; (8003224 <HAL_RCC_OscConfig+0x934>)
 8003196:	69db      	ldr	r3, [r3, #28]
 8003198:	4a22      	ldr	r2, [pc, #136]	; (8003224 <HAL_RCC_OscConfig+0x934>)
 800319a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800319e:	61d3      	str	r3, [r2, #28]
 80031a0:	4b20      	ldr	r3, [pc, #128]	; (8003224 <HAL_RCC_OscConfig+0x934>)
 80031a2:	69db      	ldr	r3, [r3, #28]
 80031a4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80031a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ac:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80031b0:	601a      	str	r2, [r3, #0]
 80031b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031b6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80031ba:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80031bc:	2301      	movs	r3, #1
 80031be:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031c2:	4b1a      	ldr	r3, [pc, #104]	; (800322c <HAL_RCC_OscConfig+0x93c>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d11a      	bne.n	8003204 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031ce:	4b17      	ldr	r3, [pc, #92]	; (800322c <HAL_RCC_OscConfig+0x93c>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a16      	ldr	r2, [pc, #88]	; (800322c <HAL_RCC_OscConfig+0x93c>)
 80031d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031d8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031da:	f7fe fa01 	bl	80015e0 <HAL_GetTick>
 80031de:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031e2:	e009      	b.n	80031f8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031e4:	f7fe f9fc 	bl	80015e0 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	2b64      	cmp	r3, #100	; 0x64
 80031f2:	d901      	bls.n	80031f8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	e3b1      	b.n	800395c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031f8:	4b0c      	ldr	r3, [pc, #48]	; (800322c <HAL_RCC_OscConfig+0x93c>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003200:	2b00      	cmp	r3, #0
 8003202:	d0ef      	beq.n	80031e4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003204:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003208:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	2b01      	cmp	r3, #1
 8003212:	d10d      	bne.n	8003230 <HAL_RCC_OscConfig+0x940>
 8003214:	4b03      	ldr	r3, [pc, #12]	; (8003224 <HAL_RCC_OscConfig+0x934>)
 8003216:	6a1b      	ldr	r3, [r3, #32]
 8003218:	4a02      	ldr	r2, [pc, #8]	; (8003224 <HAL_RCC_OscConfig+0x934>)
 800321a:	f043 0301 	orr.w	r3, r3, #1
 800321e:	6213      	str	r3, [r2, #32]
 8003220:	e03c      	b.n	800329c <HAL_RCC_OscConfig+0x9ac>
 8003222:	bf00      	nop
 8003224:	40021000 	.word	0x40021000
 8003228:	10908120 	.word	0x10908120
 800322c:	40007000 	.word	0x40007000
 8003230:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003234:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d10c      	bne.n	800325a <HAL_RCC_OscConfig+0x96a>
 8003240:	4bc1      	ldr	r3, [pc, #772]	; (8003548 <HAL_RCC_OscConfig+0xc58>)
 8003242:	6a1b      	ldr	r3, [r3, #32]
 8003244:	4ac0      	ldr	r2, [pc, #768]	; (8003548 <HAL_RCC_OscConfig+0xc58>)
 8003246:	f023 0301 	bic.w	r3, r3, #1
 800324a:	6213      	str	r3, [r2, #32]
 800324c:	4bbe      	ldr	r3, [pc, #760]	; (8003548 <HAL_RCC_OscConfig+0xc58>)
 800324e:	6a1b      	ldr	r3, [r3, #32]
 8003250:	4abd      	ldr	r2, [pc, #756]	; (8003548 <HAL_RCC_OscConfig+0xc58>)
 8003252:	f023 0304 	bic.w	r3, r3, #4
 8003256:	6213      	str	r3, [r2, #32]
 8003258:	e020      	b.n	800329c <HAL_RCC_OscConfig+0x9ac>
 800325a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800325e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	2b05      	cmp	r3, #5
 8003268:	d10c      	bne.n	8003284 <HAL_RCC_OscConfig+0x994>
 800326a:	4bb7      	ldr	r3, [pc, #732]	; (8003548 <HAL_RCC_OscConfig+0xc58>)
 800326c:	6a1b      	ldr	r3, [r3, #32]
 800326e:	4ab6      	ldr	r2, [pc, #728]	; (8003548 <HAL_RCC_OscConfig+0xc58>)
 8003270:	f043 0304 	orr.w	r3, r3, #4
 8003274:	6213      	str	r3, [r2, #32]
 8003276:	4bb4      	ldr	r3, [pc, #720]	; (8003548 <HAL_RCC_OscConfig+0xc58>)
 8003278:	6a1b      	ldr	r3, [r3, #32]
 800327a:	4ab3      	ldr	r2, [pc, #716]	; (8003548 <HAL_RCC_OscConfig+0xc58>)
 800327c:	f043 0301 	orr.w	r3, r3, #1
 8003280:	6213      	str	r3, [r2, #32]
 8003282:	e00b      	b.n	800329c <HAL_RCC_OscConfig+0x9ac>
 8003284:	4bb0      	ldr	r3, [pc, #704]	; (8003548 <HAL_RCC_OscConfig+0xc58>)
 8003286:	6a1b      	ldr	r3, [r3, #32]
 8003288:	4aaf      	ldr	r2, [pc, #700]	; (8003548 <HAL_RCC_OscConfig+0xc58>)
 800328a:	f023 0301 	bic.w	r3, r3, #1
 800328e:	6213      	str	r3, [r2, #32]
 8003290:	4bad      	ldr	r3, [pc, #692]	; (8003548 <HAL_RCC_OscConfig+0xc58>)
 8003292:	6a1b      	ldr	r3, [r3, #32]
 8003294:	4aac      	ldr	r2, [pc, #688]	; (8003548 <HAL_RCC_OscConfig+0xc58>)
 8003296:	f023 0304 	bic.w	r3, r3, #4
 800329a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800329c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	f000 8081 	beq.w	80033b0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032ae:	f7fe f997 	bl	80015e0 <HAL_GetTick>
 80032b2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032b6:	e00b      	b.n	80032d0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032b8:	f7fe f992 	bl	80015e0 <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d901      	bls.n	80032d0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e345      	b.n	800395c <HAL_RCC_OscConfig+0x106c>
 80032d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032d4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80032d8:	2202      	movs	r2, #2
 80032da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032e0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	fa93 f2a3 	rbit	r2, r3
 80032ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ee:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80032f2:	601a      	str	r2, [r3, #0]
 80032f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032f8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80032fc:	2202      	movs	r2, #2
 80032fe:	601a      	str	r2, [r3, #0]
 8003300:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003304:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	fa93 f2a3 	rbit	r2, r3
 800330e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003312:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003316:	601a      	str	r2, [r3, #0]
  return result;
 8003318:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800331c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003320:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003322:	fab3 f383 	clz	r3, r3
 8003326:	b2db      	uxtb	r3, r3
 8003328:	095b      	lsrs	r3, r3, #5
 800332a:	b2db      	uxtb	r3, r3
 800332c:	f043 0302 	orr.w	r3, r3, #2
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2b02      	cmp	r3, #2
 8003334:	d102      	bne.n	800333c <HAL_RCC_OscConfig+0xa4c>
 8003336:	4b84      	ldr	r3, [pc, #528]	; (8003548 <HAL_RCC_OscConfig+0xc58>)
 8003338:	6a1b      	ldr	r3, [r3, #32]
 800333a:	e013      	b.n	8003364 <HAL_RCC_OscConfig+0xa74>
 800333c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003340:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003344:	2202      	movs	r2, #2
 8003346:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003348:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800334c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	fa93 f2a3 	rbit	r2, r3
 8003356:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800335a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800335e:	601a      	str	r2, [r3, #0]
 8003360:	4b79      	ldr	r3, [pc, #484]	; (8003548 <HAL_RCC_OscConfig+0xc58>)
 8003362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003364:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003368:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800336c:	2102      	movs	r1, #2
 800336e:	6011      	str	r1, [r2, #0]
 8003370:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003374:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003378:	6812      	ldr	r2, [r2, #0]
 800337a:	fa92 f1a2 	rbit	r1, r2
 800337e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003382:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003386:	6011      	str	r1, [r2, #0]
  return result;
 8003388:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800338c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003390:	6812      	ldr	r2, [r2, #0]
 8003392:	fab2 f282 	clz	r2, r2
 8003396:	b2d2      	uxtb	r2, r2
 8003398:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800339c:	b2d2      	uxtb	r2, r2
 800339e:	f002 021f 	and.w	r2, r2, #31
 80033a2:	2101      	movs	r1, #1
 80033a4:	fa01 f202 	lsl.w	r2, r1, r2
 80033a8:	4013      	ands	r3, r2
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d084      	beq.n	80032b8 <HAL_RCC_OscConfig+0x9c8>
 80033ae:	e07f      	b.n	80034b0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033b0:	f7fe f916 	bl	80015e0 <HAL_GetTick>
 80033b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033b8:	e00b      	b.n	80033d2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033ba:	f7fe f911 	bl	80015e0 <HAL_GetTick>
 80033be:	4602      	mov	r2, r0
 80033c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e2c4      	b.n	800395c <HAL_RCC_OscConfig+0x106c>
 80033d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033d6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80033da:	2202      	movs	r2, #2
 80033dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033e2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	fa93 f2a3 	rbit	r2, r3
 80033ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033f0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80033f4:	601a      	str	r2, [r3, #0]
 80033f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033fa:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80033fe:	2202      	movs	r2, #2
 8003400:	601a      	str	r2, [r3, #0]
 8003402:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003406:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	fa93 f2a3 	rbit	r2, r3
 8003410:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003414:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003418:	601a      	str	r2, [r3, #0]
  return result;
 800341a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800341e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003422:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003424:	fab3 f383 	clz	r3, r3
 8003428:	b2db      	uxtb	r3, r3
 800342a:	095b      	lsrs	r3, r3, #5
 800342c:	b2db      	uxtb	r3, r3
 800342e:	f043 0302 	orr.w	r3, r3, #2
 8003432:	b2db      	uxtb	r3, r3
 8003434:	2b02      	cmp	r3, #2
 8003436:	d102      	bne.n	800343e <HAL_RCC_OscConfig+0xb4e>
 8003438:	4b43      	ldr	r3, [pc, #268]	; (8003548 <HAL_RCC_OscConfig+0xc58>)
 800343a:	6a1b      	ldr	r3, [r3, #32]
 800343c:	e013      	b.n	8003466 <HAL_RCC_OscConfig+0xb76>
 800343e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003442:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003446:	2202      	movs	r2, #2
 8003448:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800344a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800344e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	fa93 f2a3 	rbit	r2, r3
 8003458:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800345c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003460:	601a      	str	r2, [r3, #0]
 8003462:	4b39      	ldr	r3, [pc, #228]	; (8003548 <HAL_RCC_OscConfig+0xc58>)
 8003464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003466:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800346a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800346e:	2102      	movs	r1, #2
 8003470:	6011      	str	r1, [r2, #0]
 8003472:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003476:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800347a:	6812      	ldr	r2, [r2, #0]
 800347c:	fa92 f1a2 	rbit	r1, r2
 8003480:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003484:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003488:	6011      	str	r1, [r2, #0]
  return result;
 800348a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800348e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003492:	6812      	ldr	r2, [r2, #0]
 8003494:	fab2 f282 	clz	r2, r2
 8003498:	b2d2      	uxtb	r2, r2
 800349a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800349e:	b2d2      	uxtb	r2, r2
 80034a0:	f002 021f 	and.w	r2, r2, #31
 80034a4:	2101      	movs	r1, #1
 80034a6:	fa01 f202 	lsl.w	r2, r1, r2
 80034aa:	4013      	ands	r3, r2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d184      	bne.n	80033ba <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80034b0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d105      	bne.n	80034c4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034b8:	4b23      	ldr	r3, [pc, #140]	; (8003548 <HAL_RCC_OscConfig+0xc58>)
 80034ba:	69db      	ldr	r3, [r3, #28]
 80034bc:	4a22      	ldr	r2, [pc, #136]	; (8003548 <HAL_RCC_OscConfig+0xc58>)
 80034be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034c2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	69db      	ldr	r3, [r3, #28]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	f000 8242 	beq.w	800395a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034d6:	4b1c      	ldr	r3, [pc, #112]	; (8003548 <HAL_RCC_OscConfig+0xc58>)
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f003 030c 	and.w	r3, r3, #12
 80034de:	2b08      	cmp	r3, #8
 80034e0:	f000 8213 	beq.w	800390a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	69db      	ldr	r3, [r3, #28]
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	f040 8162 	bne.w	80037ba <HAL_RCC_OscConfig+0xeca>
 80034f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034fa:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80034fe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003502:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003504:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003508:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	fa93 f2a3 	rbit	r2, r3
 8003512:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003516:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800351a:	601a      	str	r2, [r3, #0]
  return result;
 800351c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003520:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003524:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003526:	fab3 f383 	clz	r3, r3
 800352a:	b2db      	uxtb	r3, r3
 800352c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003530:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	461a      	mov	r2, r3
 8003538:	2300      	movs	r3, #0
 800353a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800353c:	f7fe f850 	bl	80015e0 <HAL_GetTick>
 8003540:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003544:	e00c      	b.n	8003560 <HAL_RCC_OscConfig+0xc70>
 8003546:	bf00      	nop
 8003548:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800354c:	f7fe f848 	bl	80015e0 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	2b02      	cmp	r3, #2
 800355a:	d901      	bls.n	8003560 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e1fd      	b.n	800395c <HAL_RCC_OscConfig+0x106c>
 8003560:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003564:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003568:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800356c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800356e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003572:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	fa93 f2a3 	rbit	r2, r3
 800357c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003580:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003584:	601a      	str	r2, [r3, #0]
  return result;
 8003586:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800358a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800358e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003590:	fab3 f383 	clz	r3, r3
 8003594:	b2db      	uxtb	r3, r3
 8003596:	095b      	lsrs	r3, r3, #5
 8003598:	b2db      	uxtb	r3, r3
 800359a:	f043 0301 	orr.w	r3, r3, #1
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d102      	bne.n	80035aa <HAL_RCC_OscConfig+0xcba>
 80035a4:	4bb0      	ldr	r3, [pc, #704]	; (8003868 <HAL_RCC_OscConfig+0xf78>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	e027      	b.n	80035fa <HAL_RCC_OscConfig+0xd0a>
 80035aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035ae:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80035b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035bc:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	fa93 f2a3 	rbit	r2, r3
 80035c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035ca:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80035ce:	601a      	str	r2, [r3, #0]
 80035d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035d4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80035d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035dc:	601a      	str	r2, [r3, #0]
 80035de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035e2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	fa93 f2a3 	rbit	r2, r3
 80035ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035f0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80035f4:	601a      	str	r2, [r3, #0]
 80035f6:	4b9c      	ldr	r3, [pc, #624]	; (8003868 <HAL_RCC_OscConfig+0xf78>)
 80035f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035fe:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003602:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003606:	6011      	str	r1, [r2, #0]
 8003608:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800360c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003610:	6812      	ldr	r2, [r2, #0]
 8003612:	fa92 f1a2 	rbit	r1, r2
 8003616:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800361a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800361e:	6011      	str	r1, [r2, #0]
  return result;
 8003620:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003624:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003628:	6812      	ldr	r2, [r2, #0]
 800362a:	fab2 f282 	clz	r2, r2
 800362e:	b2d2      	uxtb	r2, r2
 8003630:	f042 0220 	orr.w	r2, r2, #32
 8003634:	b2d2      	uxtb	r2, r2
 8003636:	f002 021f 	and.w	r2, r2, #31
 800363a:	2101      	movs	r1, #1
 800363c:	fa01 f202 	lsl.w	r2, r1, r2
 8003640:	4013      	ands	r3, r2
 8003642:	2b00      	cmp	r3, #0
 8003644:	d182      	bne.n	800354c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003646:	4b88      	ldr	r3, [pc, #544]	; (8003868 <HAL_RCC_OscConfig+0xf78>)
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800364e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003652:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800365a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800365e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	6a1b      	ldr	r3, [r3, #32]
 8003666:	430b      	orrs	r3, r1
 8003668:	497f      	ldr	r1, [pc, #508]	; (8003868 <HAL_RCC_OscConfig+0xf78>)
 800366a:	4313      	orrs	r3, r2
 800366c:	604b      	str	r3, [r1, #4]
 800366e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003672:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003676:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800367a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800367c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003680:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	fa93 f2a3 	rbit	r2, r3
 800368a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800368e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003692:	601a      	str	r2, [r3, #0]
  return result;
 8003694:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003698:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800369c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800369e:	fab3 f383 	clz	r3, r3
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80036a8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	461a      	mov	r2, r3
 80036b0:	2301      	movs	r3, #1
 80036b2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b4:	f7fd ff94 	bl	80015e0 <HAL_GetTick>
 80036b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036bc:	e009      	b.n	80036d2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036be:	f7fd ff8f 	bl	80015e0 <HAL_GetTick>
 80036c2:	4602      	mov	r2, r0
 80036c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d901      	bls.n	80036d2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e144      	b.n	800395c <HAL_RCC_OscConfig+0x106c>
 80036d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036d6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80036da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036e4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	fa93 f2a3 	rbit	r2, r3
 80036ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036f2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80036f6:	601a      	str	r2, [r3, #0]
  return result;
 80036f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036fc:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003700:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003702:	fab3 f383 	clz	r3, r3
 8003706:	b2db      	uxtb	r3, r3
 8003708:	095b      	lsrs	r3, r3, #5
 800370a:	b2db      	uxtb	r3, r3
 800370c:	f043 0301 	orr.w	r3, r3, #1
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b01      	cmp	r3, #1
 8003714:	d102      	bne.n	800371c <HAL_RCC_OscConfig+0xe2c>
 8003716:	4b54      	ldr	r3, [pc, #336]	; (8003868 <HAL_RCC_OscConfig+0xf78>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	e027      	b.n	800376c <HAL_RCC_OscConfig+0xe7c>
 800371c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003720:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003724:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003728:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800372a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800372e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	fa93 f2a3 	rbit	r2, r3
 8003738:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800373c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003740:	601a      	str	r2, [r3, #0]
 8003742:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003746:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800374a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800374e:	601a      	str	r2, [r3, #0]
 8003750:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003754:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	fa93 f2a3 	rbit	r2, r3
 800375e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003762:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003766:	601a      	str	r2, [r3, #0]
 8003768:	4b3f      	ldr	r3, [pc, #252]	; (8003868 <HAL_RCC_OscConfig+0xf78>)
 800376a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003770:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003774:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003778:	6011      	str	r1, [r2, #0]
 800377a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800377e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003782:	6812      	ldr	r2, [r2, #0]
 8003784:	fa92 f1a2 	rbit	r1, r2
 8003788:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800378c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003790:	6011      	str	r1, [r2, #0]
  return result;
 8003792:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003796:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800379a:	6812      	ldr	r2, [r2, #0]
 800379c:	fab2 f282 	clz	r2, r2
 80037a0:	b2d2      	uxtb	r2, r2
 80037a2:	f042 0220 	orr.w	r2, r2, #32
 80037a6:	b2d2      	uxtb	r2, r2
 80037a8:	f002 021f 	and.w	r2, r2, #31
 80037ac:	2101      	movs	r1, #1
 80037ae:	fa01 f202 	lsl.w	r2, r1, r2
 80037b2:	4013      	ands	r3, r2
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d082      	beq.n	80036be <HAL_RCC_OscConfig+0xdce>
 80037b8:	e0cf      	b.n	800395a <HAL_RCC_OscConfig+0x106a>
 80037ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037be:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80037c2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80037c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037cc:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	fa93 f2a3 	rbit	r2, r3
 80037d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037da:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80037de:	601a      	str	r2, [r3, #0]
  return result;
 80037e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037e4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80037e8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ea:	fab3 f383 	clz	r3, r3
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80037f4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	461a      	mov	r2, r3
 80037fc:	2300      	movs	r3, #0
 80037fe:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003800:	f7fd feee 	bl	80015e0 <HAL_GetTick>
 8003804:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003808:	e009      	b.n	800381e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800380a:	f7fd fee9 	bl	80015e0 <HAL_GetTick>
 800380e:	4602      	mov	r2, r0
 8003810:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	2b02      	cmp	r3, #2
 8003818:	d901      	bls.n	800381e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e09e      	b.n	800395c <HAL_RCC_OscConfig+0x106c>
 800381e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003822:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003826:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800382a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800382c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003830:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	fa93 f2a3 	rbit	r2, r3
 800383a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800383e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003842:	601a      	str	r2, [r3, #0]
  return result;
 8003844:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003848:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800384c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800384e:	fab3 f383 	clz	r3, r3
 8003852:	b2db      	uxtb	r3, r3
 8003854:	095b      	lsrs	r3, r3, #5
 8003856:	b2db      	uxtb	r3, r3
 8003858:	f043 0301 	orr.w	r3, r3, #1
 800385c:	b2db      	uxtb	r3, r3
 800385e:	2b01      	cmp	r3, #1
 8003860:	d104      	bne.n	800386c <HAL_RCC_OscConfig+0xf7c>
 8003862:	4b01      	ldr	r3, [pc, #4]	; (8003868 <HAL_RCC_OscConfig+0xf78>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	e029      	b.n	80038bc <HAL_RCC_OscConfig+0xfcc>
 8003868:	40021000 	.word	0x40021000
 800386c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003870:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003874:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003878:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800387a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800387e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	fa93 f2a3 	rbit	r2, r3
 8003888:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800388c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003890:	601a      	str	r2, [r3, #0]
 8003892:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003896:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800389a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800389e:	601a      	str	r2, [r3, #0]
 80038a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038a4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	fa93 f2a3 	rbit	r2, r3
 80038ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038b2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80038b6:	601a      	str	r2, [r3, #0]
 80038b8:	4b2b      	ldr	r3, [pc, #172]	; (8003968 <HAL_RCC_OscConfig+0x1078>)
 80038ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038bc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80038c0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80038c4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80038c8:	6011      	str	r1, [r2, #0]
 80038ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80038ce:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80038d2:	6812      	ldr	r2, [r2, #0]
 80038d4:	fa92 f1a2 	rbit	r1, r2
 80038d8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80038dc:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80038e0:	6011      	str	r1, [r2, #0]
  return result;
 80038e2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80038e6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80038ea:	6812      	ldr	r2, [r2, #0]
 80038ec:	fab2 f282 	clz	r2, r2
 80038f0:	b2d2      	uxtb	r2, r2
 80038f2:	f042 0220 	orr.w	r2, r2, #32
 80038f6:	b2d2      	uxtb	r2, r2
 80038f8:	f002 021f 	and.w	r2, r2, #31
 80038fc:	2101      	movs	r1, #1
 80038fe:	fa01 f202 	lsl.w	r2, r1, r2
 8003902:	4013      	ands	r3, r2
 8003904:	2b00      	cmp	r3, #0
 8003906:	d180      	bne.n	800380a <HAL_RCC_OscConfig+0xf1a>
 8003908:	e027      	b.n	800395a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800390a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800390e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	69db      	ldr	r3, [r3, #28]
 8003916:	2b01      	cmp	r3, #1
 8003918:	d101      	bne.n	800391e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e01e      	b.n	800395c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800391e:	4b12      	ldr	r3, [pc, #72]	; (8003968 <HAL_RCC_OscConfig+0x1078>)
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003926:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800392a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800392e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003932:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	6a1b      	ldr	r3, [r3, #32]
 800393a:	429a      	cmp	r2, r3
 800393c:	d10b      	bne.n	8003956 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800393e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003942:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003946:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800394a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003952:	429a      	cmp	r2, r3
 8003954:	d001      	beq.n	800395a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e000      	b.n	800395c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800395a:	2300      	movs	r3, #0
}
 800395c:	4618      	mov	r0, r3
 800395e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	40021000 	.word	0x40021000

0800396c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b09e      	sub	sp, #120	; 0x78
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003976:	2300      	movs	r3, #0
 8003978:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d101      	bne.n	8003984 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e162      	b.n	8003c4a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003984:	4b90      	ldr	r3, [pc, #576]	; (8003bc8 <HAL_RCC_ClockConfig+0x25c>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0307 	and.w	r3, r3, #7
 800398c:	683a      	ldr	r2, [r7, #0]
 800398e:	429a      	cmp	r2, r3
 8003990:	d910      	bls.n	80039b4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003992:	4b8d      	ldr	r3, [pc, #564]	; (8003bc8 <HAL_RCC_ClockConfig+0x25c>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f023 0207 	bic.w	r2, r3, #7
 800399a:	498b      	ldr	r1, [pc, #556]	; (8003bc8 <HAL_RCC_ClockConfig+0x25c>)
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	4313      	orrs	r3, r2
 80039a0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039a2:	4b89      	ldr	r3, [pc, #548]	; (8003bc8 <HAL_RCC_ClockConfig+0x25c>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0307 	and.w	r3, r3, #7
 80039aa:	683a      	ldr	r2, [r7, #0]
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d001      	beq.n	80039b4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e14a      	b.n	8003c4a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0302 	and.w	r3, r3, #2
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d008      	beq.n	80039d2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039c0:	4b82      	ldr	r3, [pc, #520]	; (8003bcc <HAL_RCC_ClockConfig+0x260>)
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	497f      	ldr	r1, [pc, #508]	; (8003bcc <HAL_RCC_ClockConfig+0x260>)
 80039ce:	4313      	orrs	r3, r2
 80039d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0301 	and.w	r3, r3, #1
 80039da:	2b00      	cmp	r3, #0
 80039dc:	f000 80dc 	beq.w	8003b98 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d13c      	bne.n	8003a62 <HAL_RCC_ClockConfig+0xf6>
 80039e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039ec:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039f0:	fa93 f3a3 	rbit	r3, r3
 80039f4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80039f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039f8:	fab3 f383 	clz	r3, r3
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	095b      	lsrs	r3, r3, #5
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	f043 0301 	orr.w	r3, r3, #1
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d102      	bne.n	8003a12 <HAL_RCC_ClockConfig+0xa6>
 8003a0c:	4b6f      	ldr	r3, [pc, #444]	; (8003bcc <HAL_RCC_ClockConfig+0x260>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	e00f      	b.n	8003a32 <HAL_RCC_ClockConfig+0xc6>
 8003a12:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a16:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a1a:	fa93 f3a3 	rbit	r3, r3
 8003a1e:	667b      	str	r3, [r7, #100]	; 0x64
 8003a20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a24:	663b      	str	r3, [r7, #96]	; 0x60
 8003a26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a28:	fa93 f3a3 	rbit	r3, r3
 8003a2c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a2e:	4b67      	ldr	r3, [pc, #412]	; (8003bcc <HAL_RCC_ClockConfig+0x260>)
 8003a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a32:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003a36:	65ba      	str	r2, [r7, #88]	; 0x58
 8003a38:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a3a:	fa92 f2a2 	rbit	r2, r2
 8003a3e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003a40:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003a42:	fab2 f282 	clz	r2, r2
 8003a46:	b2d2      	uxtb	r2, r2
 8003a48:	f042 0220 	orr.w	r2, r2, #32
 8003a4c:	b2d2      	uxtb	r2, r2
 8003a4e:	f002 021f 	and.w	r2, r2, #31
 8003a52:	2101      	movs	r1, #1
 8003a54:	fa01 f202 	lsl.w	r2, r1, r2
 8003a58:	4013      	ands	r3, r2
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d17b      	bne.n	8003b56 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e0f3      	b.n	8003c4a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d13c      	bne.n	8003ae4 <HAL_RCC_ClockConfig+0x178>
 8003a6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a6e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a72:	fa93 f3a3 	rbit	r3, r3
 8003a76:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003a78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a7a:	fab3 f383 	clz	r3, r3
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	095b      	lsrs	r3, r3, #5
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	f043 0301 	orr.w	r3, r3, #1
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d102      	bne.n	8003a94 <HAL_RCC_ClockConfig+0x128>
 8003a8e:	4b4f      	ldr	r3, [pc, #316]	; (8003bcc <HAL_RCC_ClockConfig+0x260>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	e00f      	b.n	8003ab4 <HAL_RCC_ClockConfig+0x148>
 8003a94:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a98:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a9c:	fa93 f3a3 	rbit	r3, r3
 8003aa0:	647b      	str	r3, [r7, #68]	; 0x44
 8003aa2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003aa6:	643b      	str	r3, [r7, #64]	; 0x40
 8003aa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003aaa:	fa93 f3a3 	rbit	r3, r3
 8003aae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ab0:	4b46      	ldr	r3, [pc, #280]	; (8003bcc <HAL_RCC_ClockConfig+0x260>)
 8003ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ab8:	63ba      	str	r2, [r7, #56]	; 0x38
 8003aba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003abc:	fa92 f2a2 	rbit	r2, r2
 8003ac0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003ac2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ac4:	fab2 f282 	clz	r2, r2
 8003ac8:	b2d2      	uxtb	r2, r2
 8003aca:	f042 0220 	orr.w	r2, r2, #32
 8003ace:	b2d2      	uxtb	r2, r2
 8003ad0:	f002 021f 	and.w	r2, r2, #31
 8003ad4:	2101      	movs	r1, #1
 8003ad6:	fa01 f202 	lsl.w	r2, r1, r2
 8003ada:	4013      	ands	r3, r2
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d13a      	bne.n	8003b56 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e0b2      	b.n	8003c4a <HAL_RCC_ClockConfig+0x2de>
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aea:	fa93 f3a3 	rbit	r3, r3
 8003aee:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003af2:	fab3 f383 	clz	r3, r3
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	095b      	lsrs	r3, r3, #5
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	f043 0301 	orr.w	r3, r3, #1
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d102      	bne.n	8003b0c <HAL_RCC_ClockConfig+0x1a0>
 8003b06:	4b31      	ldr	r3, [pc, #196]	; (8003bcc <HAL_RCC_ClockConfig+0x260>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	e00d      	b.n	8003b28 <HAL_RCC_ClockConfig+0x1bc>
 8003b0c:	2302      	movs	r3, #2
 8003b0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b12:	fa93 f3a3 	rbit	r3, r3
 8003b16:	627b      	str	r3, [r7, #36]	; 0x24
 8003b18:	2302      	movs	r3, #2
 8003b1a:	623b      	str	r3, [r7, #32]
 8003b1c:	6a3b      	ldr	r3, [r7, #32]
 8003b1e:	fa93 f3a3 	rbit	r3, r3
 8003b22:	61fb      	str	r3, [r7, #28]
 8003b24:	4b29      	ldr	r3, [pc, #164]	; (8003bcc <HAL_RCC_ClockConfig+0x260>)
 8003b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b28:	2202      	movs	r2, #2
 8003b2a:	61ba      	str	r2, [r7, #24]
 8003b2c:	69ba      	ldr	r2, [r7, #24]
 8003b2e:	fa92 f2a2 	rbit	r2, r2
 8003b32:	617a      	str	r2, [r7, #20]
  return result;
 8003b34:	697a      	ldr	r2, [r7, #20]
 8003b36:	fab2 f282 	clz	r2, r2
 8003b3a:	b2d2      	uxtb	r2, r2
 8003b3c:	f042 0220 	orr.w	r2, r2, #32
 8003b40:	b2d2      	uxtb	r2, r2
 8003b42:	f002 021f 	and.w	r2, r2, #31
 8003b46:	2101      	movs	r1, #1
 8003b48:	fa01 f202 	lsl.w	r2, r1, r2
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d101      	bne.n	8003b56 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e079      	b.n	8003c4a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b56:	4b1d      	ldr	r3, [pc, #116]	; (8003bcc <HAL_RCC_ClockConfig+0x260>)
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f023 0203 	bic.w	r2, r3, #3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	491a      	ldr	r1, [pc, #104]	; (8003bcc <HAL_RCC_ClockConfig+0x260>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b68:	f7fd fd3a 	bl	80015e0 <HAL_GetTick>
 8003b6c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b6e:	e00a      	b.n	8003b86 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b70:	f7fd fd36 	bl	80015e0 <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d901      	bls.n	8003b86 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e061      	b.n	8003c4a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b86:	4b11      	ldr	r3, [pc, #68]	; (8003bcc <HAL_RCC_ClockConfig+0x260>)
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	f003 020c 	and.w	r2, r3, #12
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d1eb      	bne.n	8003b70 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b98:	4b0b      	ldr	r3, [pc, #44]	; (8003bc8 <HAL_RCC_ClockConfig+0x25c>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0307 	and.w	r3, r3, #7
 8003ba0:	683a      	ldr	r2, [r7, #0]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d214      	bcs.n	8003bd0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ba6:	4b08      	ldr	r3, [pc, #32]	; (8003bc8 <HAL_RCC_ClockConfig+0x25c>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f023 0207 	bic.w	r2, r3, #7
 8003bae:	4906      	ldr	r1, [pc, #24]	; (8003bc8 <HAL_RCC_ClockConfig+0x25c>)
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bb6:	4b04      	ldr	r3, [pc, #16]	; (8003bc8 <HAL_RCC_ClockConfig+0x25c>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0307 	and.w	r3, r3, #7
 8003bbe:	683a      	ldr	r2, [r7, #0]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d005      	beq.n	8003bd0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e040      	b.n	8003c4a <HAL_RCC_ClockConfig+0x2de>
 8003bc8:	40022000 	.word	0x40022000
 8003bcc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0304 	and.w	r3, r3, #4
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d008      	beq.n	8003bee <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bdc:	4b1d      	ldr	r3, [pc, #116]	; (8003c54 <HAL_RCC_ClockConfig+0x2e8>)
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	491a      	ldr	r1, [pc, #104]	; (8003c54 <HAL_RCC_ClockConfig+0x2e8>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0308 	and.w	r3, r3, #8
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d009      	beq.n	8003c0e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bfa:	4b16      	ldr	r3, [pc, #88]	; (8003c54 <HAL_RCC_ClockConfig+0x2e8>)
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	00db      	lsls	r3, r3, #3
 8003c08:	4912      	ldr	r1, [pc, #72]	; (8003c54 <HAL_RCC_ClockConfig+0x2e8>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003c0e:	f000 f829 	bl	8003c64 <HAL_RCC_GetSysClockFreq>
 8003c12:	4601      	mov	r1, r0
 8003c14:	4b0f      	ldr	r3, [pc, #60]	; (8003c54 <HAL_RCC_ClockConfig+0x2e8>)
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c1c:	22f0      	movs	r2, #240	; 0xf0
 8003c1e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c20:	693a      	ldr	r2, [r7, #16]
 8003c22:	fa92 f2a2 	rbit	r2, r2
 8003c26:	60fa      	str	r2, [r7, #12]
  return result;
 8003c28:	68fa      	ldr	r2, [r7, #12]
 8003c2a:	fab2 f282 	clz	r2, r2
 8003c2e:	b2d2      	uxtb	r2, r2
 8003c30:	40d3      	lsrs	r3, r2
 8003c32:	4a09      	ldr	r2, [pc, #36]	; (8003c58 <HAL_RCC_ClockConfig+0x2ec>)
 8003c34:	5cd3      	ldrb	r3, [r2, r3]
 8003c36:	fa21 f303 	lsr.w	r3, r1, r3
 8003c3a:	4a08      	ldr	r2, [pc, #32]	; (8003c5c <HAL_RCC_ClockConfig+0x2f0>)
 8003c3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003c3e:	4b08      	ldr	r3, [pc, #32]	; (8003c60 <HAL_RCC_ClockConfig+0x2f4>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4618      	mov	r0, r3
 8003c44:	f7fd fc88 	bl	8001558 <HAL_InitTick>
  
  return HAL_OK;
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3778      	adds	r7, #120	; 0x78
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	40021000 	.word	0x40021000
 8003c58:	08005b7c 	.word	0x08005b7c
 8003c5c:	20000044 	.word	0x20000044
 8003c60:	20000048 	.word	0x20000048

08003c64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b08b      	sub	sp, #44	; 0x2c
 8003c68:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	61fb      	str	r3, [r7, #28]
 8003c6e:	2300      	movs	r3, #0
 8003c70:	61bb      	str	r3, [r7, #24]
 8003c72:	2300      	movs	r3, #0
 8003c74:	627b      	str	r3, [r7, #36]	; 0x24
 8003c76:	2300      	movs	r3, #0
 8003c78:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003c7e:	4b29      	ldr	r3, [pc, #164]	; (8003d24 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	f003 030c 	and.w	r3, r3, #12
 8003c8a:	2b04      	cmp	r3, #4
 8003c8c:	d002      	beq.n	8003c94 <HAL_RCC_GetSysClockFreq+0x30>
 8003c8e:	2b08      	cmp	r3, #8
 8003c90:	d003      	beq.n	8003c9a <HAL_RCC_GetSysClockFreq+0x36>
 8003c92:	e03c      	b.n	8003d0e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c94:	4b24      	ldr	r3, [pc, #144]	; (8003d28 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003c96:	623b      	str	r3, [r7, #32]
      break;
 8003c98:	e03c      	b.n	8003d14 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003ca0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003ca4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ca6:	68ba      	ldr	r2, [r7, #8]
 8003ca8:	fa92 f2a2 	rbit	r2, r2
 8003cac:	607a      	str	r2, [r7, #4]
  return result;
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	fab2 f282 	clz	r2, r2
 8003cb4:	b2d2      	uxtb	r2, r2
 8003cb6:	40d3      	lsrs	r3, r2
 8003cb8:	4a1c      	ldr	r2, [pc, #112]	; (8003d2c <HAL_RCC_GetSysClockFreq+0xc8>)
 8003cba:	5cd3      	ldrb	r3, [r2, r3]
 8003cbc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003cbe:	4b19      	ldr	r3, [pc, #100]	; (8003d24 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc2:	f003 030f 	and.w	r3, r3, #15
 8003cc6:	220f      	movs	r2, #15
 8003cc8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	fa92 f2a2 	rbit	r2, r2
 8003cd0:	60fa      	str	r2, [r7, #12]
  return result;
 8003cd2:	68fa      	ldr	r2, [r7, #12]
 8003cd4:	fab2 f282 	clz	r2, r2
 8003cd8:	b2d2      	uxtb	r2, r2
 8003cda:	40d3      	lsrs	r3, r2
 8003cdc:	4a14      	ldr	r2, [pc, #80]	; (8003d30 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003cde:	5cd3      	ldrb	r3, [r2, r3]
 8003ce0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d008      	beq.n	8003cfe <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003cec:	4a0e      	ldr	r2, [pc, #56]	; (8003d28 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	fb02 f303 	mul.w	r3, r2, r3
 8003cfa:	627b      	str	r3, [r7, #36]	; 0x24
 8003cfc:	e004      	b.n	8003d08 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	4a0c      	ldr	r2, [pc, #48]	; (8003d34 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003d02:	fb02 f303 	mul.w	r3, r2, r3
 8003d06:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0a:	623b      	str	r3, [r7, #32]
      break;
 8003d0c:	e002      	b.n	8003d14 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003d0e:	4b06      	ldr	r3, [pc, #24]	; (8003d28 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003d10:	623b      	str	r3, [r7, #32]
      break;
 8003d12:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d14:	6a3b      	ldr	r3, [r7, #32]
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	372c      	adds	r7, #44	; 0x2c
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	40021000 	.word	0x40021000
 8003d28:	007a1200 	.word	0x007a1200
 8003d2c:	08005b8c 	.word	0x08005b8c
 8003d30:	08005b9c 	.word	0x08005b9c
 8003d34:	003d0900 	.word	0x003d0900

08003d38 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b092      	sub	sp, #72	; 0x48
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d40:	2300      	movs	r3, #0
 8003d42:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003d44:	2300      	movs	r3, #0
 8003d46:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	f000 80d4 	beq.w	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d5c:	4b4e      	ldr	r3, [pc, #312]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d5e:	69db      	ldr	r3, [r3, #28]
 8003d60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d10e      	bne.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d68:	4b4b      	ldr	r3, [pc, #300]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d6a:	69db      	ldr	r3, [r3, #28]
 8003d6c:	4a4a      	ldr	r2, [pc, #296]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d72:	61d3      	str	r3, [r2, #28]
 8003d74:	4b48      	ldr	r3, [pc, #288]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d76:	69db      	ldr	r3, [r3, #28]
 8003d78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d7c:	60bb      	str	r3, [r7, #8]
 8003d7e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d80:	2301      	movs	r3, #1
 8003d82:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d86:	4b45      	ldr	r3, [pc, #276]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d118      	bne.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d92:	4b42      	ldr	r3, [pc, #264]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a41      	ldr	r2, [pc, #260]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d9c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d9e:	f7fd fc1f 	bl	80015e0 <HAL_GetTick>
 8003da2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003da4:	e008      	b.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003da6:	f7fd fc1b 	bl	80015e0 <HAL_GetTick>
 8003daa:	4602      	mov	r2, r0
 8003dac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	2b64      	cmp	r3, #100	; 0x64
 8003db2:	d901      	bls.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	e169      	b.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003db8:	4b38      	ldr	r3, [pc, #224]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d0f0      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003dc4:	4b34      	ldr	r3, [pc, #208]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dc6:	6a1b      	ldr	r3, [r3, #32]
 8003dc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003dce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	f000 8084 	beq.w	8003ede <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dde:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d07c      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003de4:	4b2c      	ldr	r3, [pc, #176]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003de6:	6a1b      	ldr	r3, [r3, #32]
 8003de8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003df2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df6:	fa93 f3a3 	rbit	r3, r3
 8003dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003dfe:	fab3 f383 	clz	r3, r3
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	461a      	mov	r2, r3
 8003e06:	4b26      	ldr	r3, [pc, #152]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003e08:	4413      	add	r3, r2
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	2301      	movs	r3, #1
 8003e10:	6013      	str	r3, [r2, #0]
 8003e12:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e16:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e1a:	fa93 f3a3 	rbit	r3, r3
 8003e1e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e22:	fab3 f383 	clz	r3, r3
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	461a      	mov	r2, r3
 8003e2a:	4b1d      	ldr	r3, [pc, #116]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003e2c:	4413      	add	r3, r2
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	461a      	mov	r2, r3
 8003e32:	2300      	movs	r3, #0
 8003e34:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003e36:	4a18      	ldr	r2, [pc, #96]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e3a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003e3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e3e:	f003 0301 	and.w	r3, r3, #1
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d04b      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e46:	f7fd fbcb 	bl	80015e0 <HAL_GetTick>
 8003e4a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e4c:	e00a      	b.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e4e:	f7fd fbc7 	bl	80015e0 <HAL_GetTick>
 8003e52:	4602      	mov	r2, r0
 8003e54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d901      	bls.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003e60:	2303      	movs	r3, #3
 8003e62:	e113      	b.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003e64:	2302      	movs	r3, #2
 8003e66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e6a:	fa93 f3a3 	rbit	r3, r3
 8003e6e:	627b      	str	r3, [r7, #36]	; 0x24
 8003e70:	2302      	movs	r3, #2
 8003e72:	623b      	str	r3, [r7, #32]
 8003e74:	6a3b      	ldr	r3, [r7, #32]
 8003e76:	fa93 f3a3 	rbit	r3, r3
 8003e7a:	61fb      	str	r3, [r7, #28]
  return result;
 8003e7c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e7e:	fab3 f383 	clz	r3, r3
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	095b      	lsrs	r3, r3, #5
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	f043 0302 	orr.w	r3, r3, #2
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d108      	bne.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003e92:	4b01      	ldr	r3, [pc, #4]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e94:	6a1b      	ldr	r3, [r3, #32]
 8003e96:	e00d      	b.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003e98:	40021000 	.word	0x40021000
 8003e9c:	40007000 	.word	0x40007000
 8003ea0:	10908100 	.word	0x10908100
 8003ea4:	2302      	movs	r3, #2
 8003ea6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ea8:	69bb      	ldr	r3, [r7, #24]
 8003eaa:	fa93 f3a3 	rbit	r3, r3
 8003eae:	617b      	str	r3, [r7, #20]
 8003eb0:	4b78      	ldr	r3, [pc, #480]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb4:	2202      	movs	r2, #2
 8003eb6:	613a      	str	r2, [r7, #16]
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	fa92 f2a2 	rbit	r2, r2
 8003ebe:	60fa      	str	r2, [r7, #12]
  return result;
 8003ec0:	68fa      	ldr	r2, [r7, #12]
 8003ec2:	fab2 f282 	clz	r2, r2
 8003ec6:	b2d2      	uxtb	r2, r2
 8003ec8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ecc:	b2d2      	uxtb	r2, r2
 8003ece:	f002 021f 	and.w	r2, r2, #31
 8003ed2:	2101      	movs	r1, #1
 8003ed4:	fa01 f202 	lsl.w	r2, r1, r2
 8003ed8:	4013      	ands	r3, r2
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d0b7      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003ede:	4b6d      	ldr	r3, [pc, #436]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ee0:	6a1b      	ldr	r3, [r3, #32]
 8003ee2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	496a      	ldr	r1, [pc, #424]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003ef0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d105      	bne.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ef8:	4b66      	ldr	r3, [pc, #408]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003efa:	69db      	ldr	r3, [r3, #28]
 8003efc:	4a65      	ldr	r2, [pc, #404]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003efe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f02:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0301 	and.w	r3, r3, #1
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d008      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f10:	4b60      	ldr	r3, [pc, #384]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f14:	f023 0203 	bic.w	r2, r3, #3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	495d      	ldr	r1, [pc, #372]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0302 	and.w	r3, r3, #2
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d008      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f2e:	4b59      	ldr	r3, [pc, #356]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f32:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	4956      	ldr	r1, [pc, #344]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0304 	and.w	r3, r3, #4
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d008      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f4c:	4b51      	ldr	r3, [pc, #324]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f50:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	691b      	ldr	r3, [r3, #16]
 8003f58:	494e      	ldr	r1, [pc, #312]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0320 	and.w	r3, r3, #32
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d008      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f6a:	4b4a      	ldr	r3, [pc, #296]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f6e:	f023 0210 	bic.w	r2, r3, #16
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	69db      	ldr	r3, [r3, #28]
 8003f76:	4947      	ldr	r1, [pc, #284]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d008      	beq.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003f88:	4b42      	ldr	r3, [pc, #264]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f94:	493f      	ldr	r1, [pc, #252]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f96:	4313      	orrs	r3, r2
 8003f98:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d008      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003fa6:	4b3b      	ldr	r3, [pc, #236]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003faa:	f023 0220 	bic.w	r2, r3, #32
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a1b      	ldr	r3, [r3, #32]
 8003fb2:	4938      	ldr	r1, [pc, #224]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0308 	and.w	r3, r3, #8
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d008      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003fc4:	4b33      	ldr	r3, [pc, #204]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	695b      	ldr	r3, [r3, #20]
 8003fd0:	4930      	ldr	r1, [pc, #192]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0310 	and.w	r3, r3, #16
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d008      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003fe2:	4b2c      	ldr	r3, [pc, #176]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	699b      	ldr	r3, [r3, #24]
 8003fee:	4929      	ldr	r1, [pc, #164]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d008      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004000:	4b24      	ldr	r3, [pc, #144]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800400c:	4921      	ldr	r1, [pc, #132]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800400e:	4313      	orrs	r3, r2
 8004010:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800401a:	2b00      	cmp	r3, #0
 800401c:	d008      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800401e:	4b1d      	ldr	r3, [pc, #116]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004022:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402a:	491a      	ldr	r1, [pc, #104]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800402c:	4313      	orrs	r3, r2
 800402e:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004038:	2b00      	cmp	r3, #0
 800403a:	d008      	beq.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800403c:	4b15      	ldr	r3, [pc, #84]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800403e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004040:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004048:	4912      	ldr	r1, [pc, #72]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800404a:	4313      	orrs	r3, r2
 800404c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d008      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800405a:	4b0e      	ldr	r3, [pc, #56]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800405c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800405e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004066:	490b      	ldr	r1, [pc, #44]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004068:	4313      	orrs	r3, r2
 800406a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004074:	2b00      	cmp	r3, #0
 8004076:	d008      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004078:	4b06      	ldr	r3, [pc, #24]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800407a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800407c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004084:	4903      	ldr	r1, [pc, #12]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004086:	4313      	orrs	r3, r2
 8004088:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800408a:	2300      	movs	r3, #0
}
 800408c:	4618      	mov	r0, r3
 800408e:	3748      	adds	r7, #72	; 0x48
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}
 8004094:	40021000 	.word	0x40021000

08004098 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d101      	bne.n	80040aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e09d      	b.n	80041e6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d108      	bne.n	80040c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040ba:	d009      	beq.n	80040d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	61da      	str	r2, [r3, #28]
 80040c2:	e005      	b.n	80040d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d106      	bne.n	80040f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f7fd f8e8 	bl	80012c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2202      	movs	r2, #2
 80040f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004106:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004110:	d902      	bls.n	8004118 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004112:	2300      	movs	r3, #0
 8004114:	60fb      	str	r3, [r7, #12]
 8004116:	e002      	b.n	800411e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004118:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800411c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004126:	d007      	beq.n	8004138 <HAL_SPI_Init+0xa0>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004130:	d002      	beq.n	8004138 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004148:	431a      	orrs	r2, r3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	691b      	ldr	r3, [r3, #16]
 800414e:	f003 0302 	and.w	r3, r3, #2
 8004152:	431a      	orrs	r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	695b      	ldr	r3, [r3, #20]
 8004158:	f003 0301 	and.w	r3, r3, #1
 800415c:	431a      	orrs	r2, r3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004166:	431a      	orrs	r2, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	69db      	ldr	r3, [r3, #28]
 800416c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004170:	431a      	orrs	r2, r3
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a1b      	ldr	r3, [r3, #32]
 8004176:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800417a:	ea42 0103 	orr.w	r1, r2, r3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004182:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	430a      	orrs	r2, r1
 800418c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	699b      	ldr	r3, [r3, #24]
 8004192:	0c1b      	lsrs	r3, r3, #16
 8004194:	f003 0204 	and.w	r2, r3, #4
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419c:	f003 0310 	and.w	r3, r3, #16
 80041a0:	431a      	orrs	r2, r3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041a6:	f003 0308 	and.w	r3, r3, #8
 80041aa:	431a      	orrs	r2, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80041b4:	ea42 0103 	orr.w	r1, r2, r3
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	430a      	orrs	r2, r1
 80041c4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	69da      	ldr	r2, [r3, #28]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041d4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3710      	adds	r7, #16
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
	...

080041f0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041fa:	2300      	movs	r3, #0
 80041fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d104      	bne.n	800420e <HAL_TIM_IC_Start_IT+0x1e>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800420a:	b2db      	uxtb	r3, r3
 800420c:	e023      	b.n	8004256 <HAL_TIM_IC_Start_IT+0x66>
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	2b04      	cmp	r3, #4
 8004212:	d104      	bne.n	800421e <HAL_TIM_IC_Start_IT+0x2e>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800421a:	b2db      	uxtb	r3, r3
 800421c:	e01b      	b.n	8004256 <HAL_TIM_IC_Start_IT+0x66>
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	2b08      	cmp	r3, #8
 8004222:	d104      	bne.n	800422e <HAL_TIM_IC_Start_IT+0x3e>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800422a:	b2db      	uxtb	r3, r3
 800422c:	e013      	b.n	8004256 <HAL_TIM_IC_Start_IT+0x66>
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	2b0c      	cmp	r3, #12
 8004232:	d104      	bne.n	800423e <HAL_TIM_IC_Start_IT+0x4e>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800423a:	b2db      	uxtb	r3, r3
 800423c:	e00b      	b.n	8004256 <HAL_TIM_IC_Start_IT+0x66>
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	2b10      	cmp	r3, #16
 8004242:	d104      	bne.n	800424e <HAL_TIM_IC_Start_IT+0x5e>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800424a:	b2db      	uxtb	r3, r3
 800424c:	e003      	b.n	8004256 <HAL_TIM_IC_Start_IT+0x66>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004254:	b2db      	uxtb	r3, r3
 8004256:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d104      	bne.n	8004268 <HAL_TIM_IC_Start_IT+0x78>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004264:	b2db      	uxtb	r3, r3
 8004266:	e013      	b.n	8004290 <HAL_TIM_IC_Start_IT+0xa0>
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	2b04      	cmp	r3, #4
 800426c:	d104      	bne.n	8004278 <HAL_TIM_IC_Start_IT+0x88>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004274:	b2db      	uxtb	r3, r3
 8004276:	e00b      	b.n	8004290 <HAL_TIM_IC_Start_IT+0xa0>
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	2b08      	cmp	r3, #8
 800427c:	d104      	bne.n	8004288 <HAL_TIM_IC_Start_IT+0x98>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004284:	b2db      	uxtb	r3, r3
 8004286:	e003      	b.n	8004290 <HAL_TIM_IC_Start_IT+0xa0>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800428e:	b2db      	uxtb	r3, r3
 8004290:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004292:	7bbb      	ldrb	r3, [r7, #14]
 8004294:	2b01      	cmp	r3, #1
 8004296:	d102      	bne.n	800429e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004298:	7b7b      	ldrb	r3, [r7, #13]
 800429a:	2b01      	cmp	r3, #1
 800429c:	d001      	beq.n	80042a2 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e0d8      	b.n	8004454 <HAL_TIM_IC_Start_IT+0x264>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d104      	bne.n	80042b2 <HAL_TIM_IC_Start_IT+0xc2>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2202      	movs	r2, #2
 80042ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042b0:	e023      	b.n	80042fa <HAL_TIM_IC_Start_IT+0x10a>
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	2b04      	cmp	r3, #4
 80042b6:	d104      	bne.n	80042c2 <HAL_TIM_IC_Start_IT+0xd2>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2202      	movs	r2, #2
 80042bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042c0:	e01b      	b.n	80042fa <HAL_TIM_IC_Start_IT+0x10a>
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	2b08      	cmp	r3, #8
 80042c6:	d104      	bne.n	80042d2 <HAL_TIM_IC_Start_IT+0xe2>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2202      	movs	r2, #2
 80042cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042d0:	e013      	b.n	80042fa <HAL_TIM_IC_Start_IT+0x10a>
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	2b0c      	cmp	r3, #12
 80042d6:	d104      	bne.n	80042e2 <HAL_TIM_IC_Start_IT+0xf2>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2202      	movs	r2, #2
 80042dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80042e0:	e00b      	b.n	80042fa <HAL_TIM_IC_Start_IT+0x10a>
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	2b10      	cmp	r3, #16
 80042e6:	d104      	bne.n	80042f2 <HAL_TIM_IC_Start_IT+0x102>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2202      	movs	r2, #2
 80042ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042f0:	e003      	b.n	80042fa <HAL_TIM_IC_Start_IT+0x10a>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2202      	movs	r2, #2
 80042f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d104      	bne.n	800430a <HAL_TIM_IC_Start_IT+0x11a>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2202      	movs	r2, #2
 8004304:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004308:	e013      	b.n	8004332 <HAL_TIM_IC_Start_IT+0x142>
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	2b04      	cmp	r3, #4
 800430e:	d104      	bne.n	800431a <HAL_TIM_IC_Start_IT+0x12a>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2202      	movs	r2, #2
 8004314:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004318:	e00b      	b.n	8004332 <HAL_TIM_IC_Start_IT+0x142>
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	2b08      	cmp	r3, #8
 800431e:	d104      	bne.n	800432a <HAL_TIM_IC_Start_IT+0x13a>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2202      	movs	r2, #2
 8004324:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004328:	e003      	b.n	8004332 <HAL_TIM_IC_Start_IT+0x142>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2202      	movs	r2, #2
 800432e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	2b0c      	cmp	r3, #12
 8004336:	d841      	bhi.n	80043bc <HAL_TIM_IC_Start_IT+0x1cc>
 8004338:	a201      	add	r2, pc, #4	; (adr r2, 8004340 <HAL_TIM_IC_Start_IT+0x150>)
 800433a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800433e:	bf00      	nop
 8004340:	08004375 	.word	0x08004375
 8004344:	080043bd 	.word	0x080043bd
 8004348:	080043bd 	.word	0x080043bd
 800434c:	080043bd 	.word	0x080043bd
 8004350:	08004387 	.word	0x08004387
 8004354:	080043bd 	.word	0x080043bd
 8004358:	080043bd 	.word	0x080043bd
 800435c:	080043bd 	.word	0x080043bd
 8004360:	08004399 	.word	0x08004399
 8004364:	080043bd 	.word	0x080043bd
 8004368:	080043bd 	.word	0x080043bd
 800436c:	080043bd 	.word	0x080043bd
 8004370:	080043ab 	.word	0x080043ab
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	68da      	ldr	r2, [r3, #12]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f042 0202 	orr.w	r2, r2, #2
 8004382:	60da      	str	r2, [r3, #12]
      break;
 8004384:	e01d      	b.n	80043c2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	68da      	ldr	r2, [r3, #12]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f042 0204 	orr.w	r2, r2, #4
 8004394:	60da      	str	r2, [r3, #12]
      break;
 8004396:	e014      	b.n	80043c2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	68da      	ldr	r2, [r3, #12]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f042 0208 	orr.w	r2, r2, #8
 80043a6:	60da      	str	r2, [r3, #12]
      break;
 80043a8:	e00b      	b.n	80043c2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	68da      	ldr	r2, [r3, #12]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f042 0210 	orr.w	r2, r2, #16
 80043b8:	60da      	str	r2, [r3, #12]
      break;
 80043ba:	e002      	b.n	80043c2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	73fb      	strb	r3, [r7, #15]
      break;
 80043c0:	bf00      	nop
  }

  if (status == HAL_OK)
 80043c2:	7bfb      	ldrb	r3, [r7, #15]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d144      	bne.n	8004452 <HAL_TIM_IC_Start_IT+0x262>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2201      	movs	r2, #1
 80043ce:	6839      	ldr	r1, [r7, #0]
 80043d0:	4618      	mov	r0, r3
 80043d2:	f000 f9a0 	bl	8004716 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a20      	ldr	r2, [pc, #128]	; (800445c <HAL_TIM_IC_Start_IT+0x26c>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d018      	beq.n	8004412 <HAL_TIM_IC_Start_IT+0x222>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043e8:	d013      	beq.n	8004412 <HAL_TIM_IC_Start_IT+0x222>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a1c      	ldr	r2, [pc, #112]	; (8004460 <HAL_TIM_IC_Start_IT+0x270>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d00e      	beq.n	8004412 <HAL_TIM_IC_Start_IT+0x222>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a1a      	ldr	r2, [pc, #104]	; (8004464 <HAL_TIM_IC_Start_IT+0x274>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d009      	beq.n	8004412 <HAL_TIM_IC_Start_IT+0x222>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a19      	ldr	r2, [pc, #100]	; (8004468 <HAL_TIM_IC_Start_IT+0x278>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d004      	beq.n	8004412 <HAL_TIM_IC_Start_IT+0x222>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a17      	ldr	r2, [pc, #92]	; (800446c <HAL_TIM_IC_Start_IT+0x27c>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d115      	bne.n	800443e <HAL_TIM_IC_Start_IT+0x24e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	689a      	ldr	r2, [r3, #8]
 8004418:	4b15      	ldr	r3, [pc, #84]	; (8004470 <HAL_TIM_IC_Start_IT+0x280>)
 800441a:	4013      	ands	r3, r2
 800441c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	2b06      	cmp	r3, #6
 8004422:	d015      	beq.n	8004450 <HAL_TIM_IC_Start_IT+0x260>
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800442a:	d011      	beq.n	8004450 <HAL_TIM_IC_Start_IT+0x260>
      {
        __HAL_TIM_ENABLE(htim);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f042 0201 	orr.w	r2, r2, #1
 800443a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800443c:	e008      	b.n	8004450 <HAL_TIM_IC_Start_IT+0x260>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f042 0201 	orr.w	r2, r2, #1
 800444c:	601a      	str	r2, [r3, #0]
 800444e:	e000      	b.n	8004452 <HAL_TIM_IC_Start_IT+0x262>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004450:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004452:	7bfb      	ldrb	r3, [r7, #15]
}
 8004454:	4618      	mov	r0, r3
 8004456:	3710      	adds	r7, #16
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}
 800445c:	40012c00 	.word	0x40012c00
 8004460:	40000400 	.word	0x40000400
 8004464:	40000800 	.word	0x40000800
 8004468:	40013400 	.word	0x40013400
 800446c:	40014000 	.word	0x40014000
 8004470:	00010007 	.word	0x00010007

08004474 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b082      	sub	sp, #8
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	691b      	ldr	r3, [r3, #16]
 8004482:	f003 0302 	and.w	r3, r3, #2
 8004486:	2b02      	cmp	r3, #2
 8004488:	d122      	bne.n	80044d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	f003 0302 	and.w	r3, r3, #2
 8004494:	2b02      	cmp	r3, #2
 8004496:	d11b      	bne.n	80044d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f06f 0202 	mvn.w	r2, #2
 80044a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2201      	movs	r2, #1
 80044a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	699b      	ldr	r3, [r3, #24]
 80044ae:	f003 0303 	and.w	r3, r3, #3
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d003      	beq.n	80044be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 f90f 	bl	80046da <HAL_TIM_IC_CaptureCallback>
 80044bc:	e005      	b.n	80044ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f000 f901 	bl	80046c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f000 f912 	bl	80046ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	f003 0304 	and.w	r3, r3, #4
 80044da:	2b04      	cmp	r3, #4
 80044dc:	d122      	bne.n	8004524 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	f003 0304 	and.w	r3, r3, #4
 80044e8:	2b04      	cmp	r3, #4
 80044ea:	d11b      	bne.n	8004524 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f06f 0204 	mvn.w	r2, #4
 80044f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2202      	movs	r2, #2
 80044fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	699b      	ldr	r3, [r3, #24]
 8004502:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004506:	2b00      	cmp	r3, #0
 8004508:	d003      	beq.n	8004512 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f000 f8e5 	bl	80046da <HAL_TIM_IC_CaptureCallback>
 8004510:	e005      	b.n	800451e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f000 f8d7 	bl	80046c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f000 f8e8 	bl	80046ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	f003 0308 	and.w	r3, r3, #8
 800452e:	2b08      	cmp	r3, #8
 8004530:	d122      	bne.n	8004578 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	f003 0308 	and.w	r3, r3, #8
 800453c:	2b08      	cmp	r3, #8
 800453e:	d11b      	bne.n	8004578 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f06f 0208 	mvn.w	r2, #8
 8004548:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2204      	movs	r2, #4
 800454e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	69db      	ldr	r3, [r3, #28]
 8004556:	f003 0303 	and.w	r3, r3, #3
 800455a:	2b00      	cmp	r3, #0
 800455c:	d003      	beq.n	8004566 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f000 f8bb 	bl	80046da <HAL_TIM_IC_CaptureCallback>
 8004564:	e005      	b.n	8004572 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f000 f8ad 	bl	80046c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f000 f8be 	bl	80046ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	691b      	ldr	r3, [r3, #16]
 800457e:	f003 0310 	and.w	r3, r3, #16
 8004582:	2b10      	cmp	r3, #16
 8004584:	d122      	bne.n	80045cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	f003 0310 	and.w	r3, r3, #16
 8004590:	2b10      	cmp	r3, #16
 8004592:	d11b      	bne.n	80045cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f06f 0210 	mvn.w	r2, #16
 800459c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2208      	movs	r2, #8
 80045a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	69db      	ldr	r3, [r3, #28]
 80045aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d003      	beq.n	80045ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f000 f891 	bl	80046da <HAL_TIM_IC_CaptureCallback>
 80045b8:	e005      	b.n	80045c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f000 f883 	bl	80046c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f000 f894 	bl	80046ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2200      	movs	r2, #0
 80045ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	f003 0301 	and.w	r3, r3, #1
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d10e      	bne.n	80045f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	f003 0301 	and.w	r3, r3, #1
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d107      	bne.n	80045f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f06f 0201 	mvn.w	r2, #1
 80045f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f000 f85d 	bl	80046b2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004602:	2b80      	cmp	r3, #128	; 0x80
 8004604:	d10e      	bne.n	8004624 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004610:	2b80      	cmp	r3, #128	; 0x80
 8004612:	d107      	bne.n	8004624 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800461c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 f8a8 	bl	8004774 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800462e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004632:	d10e      	bne.n	8004652 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800463e:	2b80      	cmp	r3, #128	; 0x80
 8004640:	d107      	bne.n	8004652 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800464a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f000 f89b 	bl	8004788 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	691b      	ldr	r3, [r3, #16]
 8004658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800465c:	2b40      	cmp	r3, #64	; 0x40
 800465e:	d10e      	bne.n	800467e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800466a:	2b40      	cmp	r3, #64	; 0x40
 800466c:	d107      	bne.n	800467e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004676:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f000 f842 	bl	8004702 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	691b      	ldr	r3, [r3, #16]
 8004684:	f003 0320 	and.w	r3, r3, #32
 8004688:	2b20      	cmp	r3, #32
 800468a:	d10e      	bne.n	80046aa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	f003 0320 	and.w	r3, r3, #32
 8004696:	2b20      	cmp	r3, #32
 8004698:	d107      	bne.n	80046aa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f06f 0220 	mvn.w	r2, #32
 80046a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f000 f85b 	bl	8004760 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046aa:	bf00      	nop
 80046ac:	3708      	adds	r7, #8
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}

080046b2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046b2:	b480      	push	{r7}
 80046b4:	b083      	sub	sp, #12
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80046ba:	bf00      	nop
 80046bc:	370c      	adds	r7, #12
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr

080046c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046c6:	b480      	push	{r7}
 80046c8:	b083      	sub	sp, #12
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046ce:	bf00      	nop
 80046d0:	370c      	adds	r7, #12
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr

080046da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80046da:	b480      	push	{r7}
 80046dc:	b083      	sub	sp, #12
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80046e2:	bf00      	nop
 80046e4:	370c      	adds	r7, #12
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr

080046ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80046ee:	b480      	push	{r7}
 80046f0:	b083      	sub	sp, #12
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046f6:	bf00      	nop
 80046f8:	370c      	adds	r7, #12
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr

08004702 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004702:	b480      	push	{r7}
 8004704:	b083      	sub	sp, #12
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800470a:	bf00      	nop
 800470c:	370c      	adds	r7, #12
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr

08004716 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004716:	b480      	push	{r7}
 8004718:	b087      	sub	sp, #28
 800471a:	af00      	add	r7, sp, #0
 800471c:	60f8      	str	r0, [r7, #12]
 800471e:	60b9      	str	r1, [r7, #8]
 8004720:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	f003 031f 	and.w	r3, r3, #31
 8004728:	2201      	movs	r2, #1
 800472a:	fa02 f303 	lsl.w	r3, r2, r3
 800472e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6a1a      	ldr	r2, [r3, #32]
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	43db      	mvns	r3, r3
 8004738:	401a      	ands	r2, r3
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	6a1a      	ldr	r2, [r3, #32]
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	f003 031f 	and.w	r3, r3, #31
 8004748:	6879      	ldr	r1, [r7, #4]
 800474a:	fa01 f303 	lsl.w	r3, r1, r3
 800474e:	431a      	orrs	r2, r3
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	621a      	str	r2, [r3, #32]
}
 8004754:	bf00      	nop
 8004756:	371c      	adds	r7, #28
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr

08004760 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004768:	bf00      	nop
 800476a:	370c      	adds	r7, #12
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr

08004774 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800477c:	bf00      	nop
 800477e:	370c      	adds	r7, #12
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004790:	bf00      	nop
 8004792:	370c      	adds	r7, #12
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800479c:	b480      	push	{r7}
 800479e:	b085      	sub	sp, #20
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80047a4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80047a8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80047b0:	b29a      	uxth	r2, r3
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	43db      	mvns	r3, r3
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	4013      	ands	r3, r2
 80047bc:	b29a      	uxth	r2, r3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3714      	adds	r7, #20
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr

080047d2 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80047d2:	b084      	sub	sp, #16
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	f107 0014 	add.w	r0, r7, #20
 80047e0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004804:	2300      	movs	r3, #0
}
 8004806:	4618      	mov	r0, r3
 8004808:	370c      	adds	r7, #12
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	b004      	add	sp, #16
 8004812:	4770      	bx	lr

08004814 <siprintf>:
 8004814:	b40e      	push	{r1, r2, r3}
 8004816:	b500      	push	{lr}
 8004818:	b09c      	sub	sp, #112	; 0x70
 800481a:	ab1d      	add	r3, sp, #116	; 0x74
 800481c:	9002      	str	r0, [sp, #8]
 800481e:	9006      	str	r0, [sp, #24]
 8004820:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004824:	4809      	ldr	r0, [pc, #36]	; (800484c <siprintf+0x38>)
 8004826:	9107      	str	r1, [sp, #28]
 8004828:	9104      	str	r1, [sp, #16]
 800482a:	4909      	ldr	r1, [pc, #36]	; (8004850 <siprintf+0x3c>)
 800482c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004830:	9105      	str	r1, [sp, #20]
 8004832:	6800      	ldr	r0, [r0, #0]
 8004834:	9301      	str	r3, [sp, #4]
 8004836:	a902      	add	r1, sp, #8
 8004838:	f000 f9d8 	bl	8004bec <_svfiprintf_r>
 800483c:	9b02      	ldr	r3, [sp, #8]
 800483e:	2200      	movs	r2, #0
 8004840:	701a      	strb	r2, [r3, #0]
 8004842:	b01c      	add	sp, #112	; 0x70
 8004844:	f85d eb04 	ldr.w	lr, [sp], #4
 8004848:	b003      	add	sp, #12
 800484a:	4770      	bx	lr
 800484c:	2000009c 	.word	0x2000009c
 8004850:	ffff0208 	.word	0xffff0208

08004854 <siscanf>:
 8004854:	b40e      	push	{r1, r2, r3}
 8004856:	b510      	push	{r4, lr}
 8004858:	b09f      	sub	sp, #124	; 0x7c
 800485a:	ac21      	add	r4, sp, #132	; 0x84
 800485c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004860:	f854 2b04 	ldr.w	r2, [r4], #4
 8004864:	9201      	str	r2, [sp, #4]
 8004866:	f8ad 101c 	strh.w	r1, [sp, #28]
 800486a:	9004      	str	r0, [sp, #16]
 800486c:	9008      	str	r0, [sp, #32]
 800486e:	f7fb fcaf 	bl	80001d0 <strlen>
 8004872:	4b0c      	ldr	r3, [pc, #48]	; (80048a4 <siscanf+0x50>)
 8004874:	9005      	str	r0, [sp, #20]
 8004876:	9009      	str	r0, [sp, #36]	; 0x24
 8004878:	930d      	str	r3, [sp, #52]	; 0x34
 800487a:	480b      	ldr	r0, [pc, #44]	; (80048a8 <siscanf+0x54>)
 800487c:	9a01      	ldr	r2, [sp, #4]
 800487e:	6800      	ldr	r0, [r0, #0]
 8004880:	9403      	str	r4, [sp, #12]
 8004882:	2300      	movs	r3, #0
 8004884:	9311      	str	r3, [sp, #68]	; 0x44
 8004886:	9316      	str	r3, [sp, #88]	; 0x58
 8004888:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800488c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8004890:	a904      	add	r1, sp, #16
 8004892:	4623      	mov	r3, r4
 8004894:	f000 fb02 	bl	8004e9c <__ssvfiscanf_r>
 8004898:	b01f      	add	sp, #124	; 0x7c
 800489a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800489e:	b003      	add	sp, #12
 80048a0:	4770      	bx	lr
 80048a2:	bf00      	nop
 80048a4:	080048ad 	.word	0x080048ad
 80048a8:	2000009c 	.word	0x2000009c

080048ac <__seofread>:
 80048ac:	2000      	movs	r0, #0
 80048ae:	4770      	bx	lr

080048b0 <memset>:
 80048b0:	4402      	add	r2, r0
 80048b2:	4603      	mov	r3, r0
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d100      	bne.n	80048ba <memset+0xa>
 80048b8:	4770      	bx	lr
 80048ba:	f803 1b01 	strb.w	r1, [r3], #1
 80048be:	e7f9      	b.n	80048b4 <memset+0x4>

080048c0 <strcat>:
 80048c0:	b510      	push	{r4, lr}
 80048c2:	4602      	mov	r2, r0
 80048c4:	7814      	ldrb	r4, [r2, #0]
 80048c6:	4613      	mov	r3, r2
 80048c8:	3201      	adds	r2, #1
 80048ca:	2c00      	cmp	r4, #0
 80048cc:	d1fa      	bne.n	80048c4 <strcat+0x4>
 80048ce:	3b01      	subs	r3, #1
 80048d0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80048d4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80048d8:	2a00      	cmp	r2, #0
 80048da:	d1f9      	bne.n	80048d0 <strcat+0x10>
 80048dc:	bd10      	pop	{r4, pc}
	...

080048e0 <__errno>:
 80048e0:	4b01      	ldr	r3, [pc, #4]	; (80048e8 <__errno+0x8>)
 80048e2:	6818      	ldr	r0, [r3, #0]
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop
 80048e8:	2000009c 	.word	0x2000009c

080048ec <__libc_init_array>:
 80048ec:	b570      	push	{r4, r5, r6, lr}
 80048ee:	4d0d      	ldr	r5, [pc, #52]	; (8004924 <__libc_init_array+0x38>)
 80048f0:	4c0d      	ldr	r4, [pc, #52]	; (8004928 <__libc_init_array+0x3c>)
 80048f2:	1b64      	subs	r4, r4, r5
 80048f4:	10a4      	asrs	r4, r4, #2
 80048f6:	2600      	movs	r6, #0
 80048f8:	42a6      	cmp	r6, r4
 80048fa:	d109      	bne.n	8004910 <__libc_init_array+0x24>
 80048fc:	4d0b      	ldr	r5, [pc, #44]	; (800492c <__libc_init_array+0x40>)
 80048fe:	4c0c      	ldr	r4, [pc, #48]	; (8004930 <__libc_init_array+0x44>)
 8004900:	f001 f8fe 	bl	8005b00 <_init>
 8004904:	1b64      	subs	r4, r4, r5
 8004906:	10a4      	asrs	r4, r4, #2
 8004908:	2600      	movs	r6, #0
 800490a:	42a6      	cmp	r6, r4
 800490c:	d105      	bne.n	800491a <__libc_init_array+0x2e>
 800490e:	bd70      	pop	{r4, r5, r6, pc}
 8004910:	f855 3b04 	ldr.w	r3, [r5], #4
 8004914:	4798      	blx	r3
 8004916:	3601      	adds	r6, #1
 8004918:	e7ee      	b.n	80048f8 <__libc_init_array+0xc>
 800491a:	f855 3b04 	ldr.w	r3, [r5], #4
 800491e:	4798      	blx	r3
 8004920:	3601      	adds	r6, #1
 8004922:	e7f2      	b.n	800490a <__libc_init_array+0x1e>
 8004924:	08005cfc 	.word	0x08005cfc
 8004928:	08005cfc 	.word	0x08005cfc
 800492c:	08005cfc 	.word	0x08005cfc
 8004930:	08005d00 	.word	0x08005d00

08004934 <__retarget_lock_acquire_recursive>:
 8004934:	4770      	bx	lr

08004936 <__retarget_lock_release_recursive>:
 8004936:	4770      	bx	lr

08004938 <strcpy>:
 8004938:	4603      	mov	r3, r0
 800493a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800493e:	f803 2b01 	strb.w	r2, [r3], #1
 8004942:	2a00      	cmp	r2, #0
 8004944:	d1f9      	bne.n	800493a <strcpy+0x2>
 8004946:	4770      	bx	lr

08004948 <_free_r>:
 8004948:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800494a:	2900      	cmp	r1, #0
 800494c:	d044      	beq.n	80049d8 <_free_r+0x90>
 800494e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004952:	9001      	str	r0, [sp, #4]
 8004954:	2b00      	cmp	r3, #0
 8004956:	f1a1 0404 	sub.w	r4, r1, #4
 800495a:	bfb8      	it	lt
 800495c:	18e4      	addlt	r4, r4, r3
 800495e:	f000 f8df 	bl	8004b20 <__malloc_lock>
 8004962:	4a1e      	ldr	r2, [pc, #120]	; (80049dc <_free_r+0x94>)
 8004964:	9801      	ldr	r0, [sp, #4]
 8004966:	6813      	ldr	r3, [r2, #0]
 8004968:	b933      	cbnz	r3, 8004978 <_free_r+0x30>
 800496a:	6063      	str	r3, [r4, #4]
 800496c:	6014      	str	r4, [r2, #0]
 800496e:	b003      	add	sp, #12
 8004970:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004974:	f000 b8da 	b.w	8004b2c <__malloc_unlock>
 8004978:	42a3      	cmp	r3, r4
 800497a:	d908      	bls.n	800498e <_free_r+0x46>
 800497c:	6825      	ldr	r5, [r4, #0]
 800497e:	1961      	adds	r1, r4, r5
 8004980:	428b      	cmp	r3, r1
 8004982:	bf01      	itttt	eq
 8004984:	6819      	ldreq	r1, [r3, #0]
 8004986:	685b      	ldreq	r3, [r3, #4]
 8004988:	1949      	addeq	r1, r1, r5
 800498a:	6021      	streq	r1, [r4, #0]
 800498c:	e7ed      	b.n	800496a <_free_r+0x22>
 800498e:	461a      	mov	r2, r3
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	b10b      	cbz	r3, 8004998 <_free_r+0x50>
 8004994:	42a3      	cmp	r3, r4
 8004996:	d9fa      	bls.n	800498e <_free_r+0x46>
 8004998:	6811      	ldr	r1, [r2, #0]
 800499a:	1855      	adds	r5, r2, r1
 800499c:	42a5      	cmp	r5, r4
 800499e:	d10b      	bne.n	80049b8 <_free_r+0x70>
 80049a0:	6824      	ldr	r4, [r4, #0]
 80049a2:	4421      	add	r1, r4
 80049a4:	1854      	adds	r4, r2, r1
 80049a6:	42a3      	cmp	r3, r4
 80049a8:	6011      	str	r1, [r2, #0]
 80049aa:	d1e0      	bne.n	800496e <_free_r+0x26>
 80049ac:	681c      	ldr	r4, [r3, #0]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	6053      	str	r3, [r2, #4]
 80049b2:	440c      	add	r4, r1
 80049b4:	6014      	str	r4, [r2, #0]
 80049b6:	e7da      	b.n	800496e <_free_r+0x26>
 80049b8:	d902      	bls.n	80049c0 <_free_r+0x78>
 80049ba:	230c      	movs	r3, #12
 80049bc:	6003      	str	r3, [r0, #0]
 80049be:	e7d6      	b.n	800496e <_free_r+0x26>
 80049c0:	6825      	ldr	r5, [r4, #0]
 80049c2:	1961      	adds	r1, r4, r5
 80049c4:	428b      	cmp	r3, r1
 80049c6:	bf04      	itt	eq
 80049c8:	6819      	ldreq	r1, [r3, #0]
 80049ca:	685b      	ldreq	r3, [r3, #4]
 80049cc:	6063      	str	r3, [r4, #4]
 80049ce:	bf04      	itt	eq
 80049d0:	1949      	addeq	r1, r1, r5
 80049d2:	6021      	streq	r1, [r4, #0]
 80049d4:	6054      	str	r4, [r2, #4]
 80049d6:	e7ca      	b.n	800496e <_free_r+0x26>
 80049d8:	b003      	add	sp, #12
 80049da:	bd30      	pop	{r4, r5, pc}
 80049dc:	20000ee4 	.word	0x20000ee4

080049e0 <sbrk_aligned>:
 80049e0:	b570      	push	{r4, r5, r6, lr}
 80049e2:	4e0e      	ldr	r6, [pc, #56]	; (8004a1c <sbrk_aligned+0x3c>)
 80049e4:	460c      	mov	r4, r1
 80049e6:	6831      	ldr	r1, [r6, #0]
 80049e8:	4605      	mov	r5, r0
 80049ea:	b911      	cbnz	r1, 80049f2 <sbrk_aligned+0x12>
 80049ec:	f000 ff3a 	bl	8005864 <_sbrk_r>
 80049f0:	6030      	str	r0, [r6, #0]
 80049f2:	4621      	mov	r1, r4
 80049f4:	4628      	mov	r0, r5
 80049f6:	f000 ff35 	bl	8005864 <_sbrk_r>
 80049fa:	1c43      	adds	r3, r0, #1
 80049fc:	d00a      	beq.n	8004a14 <sbrk_aligned+0x34>
 80049fe:	1cc4      	adds	r4, r0, #3
 8004a00:	f024 0403 	bic.w	r4, r4, #3
 8004a04:	42a0      	cmp	r0, r4
 8004a06:	d007      	beq.n	8004a18 <sbrk_aligned+0x38>
 8004a08:	1a21      	subs	r1, r4, r0
 8004a0a:	4628      	mov	r0, r5
 8004a0c:	f000 ff2a 	bl	8005864 <_sbrk_r>
 8004a10:	3001      	adds	r0, #1
 8004a12:	d101      	bne.n	8004a18 <sbrk_aligned+0x38>
 8004a14:	f04f 34ff 	mov.w	r4, #4294967295
 8004a18:	4620      	mov	r0, r4
 8004a1a:	bd70      	pop	{r4, r5, r6, pc}
 8004a1c:	20000ee8 	.word	0x20000ee8

08004a20 <_malloc_r>:
 8004a20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a24:	1ccd      	adds	r5, r1, #3
 8004a26:	f025 0503 	bic.w	r5, r5, #3
 8004a2a:	3508      	adds	r5, #8
 8004a2c:	2d0c      	cmp	r5, #12
 8004a2e:	bf38      	it	cc
 8004a30:	250c      	movcc	r5, #12
 8004a32:	2d00      	cmp	r5, #0
 8004a34:	4607      	mov	r7, r0
 8004a36:	db01      	blt.n	8004a3c <_malloc_r+0x1c>
 8004a38:	42a9      	cmp	r1, r5
 8004a3a:	d905      	bls.n	8004a48 <_malloc_r+0x28>
 8004a3c:	230c      	movs	r3, #12
 8004a3e:	603b      	str	r3, [r7, #0]
 8004a40:	2600      	movs	r6, #0
 8004a42:	4630      	mov	r0, r6
 8004a44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a48:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004b1c <_malloc_r+0xfc>
 8004a4c:	f000 f868 	bl	8004b20 <__malloc_lock>
 8004a50:	f8d8 3000 	ldr.w	r3, [r8]
 8004a54:	461c      	mov	r4, r3
 8004a56:	bb5c      	cbnz	r4, 8004ab0 <_malloc_r+0x90>
 8004a58:	4629      	mov	r1, r5
 8004a5a:	4638      	mov	r0, r7
 8004a5c:	f7ff ffc0 	bl	80049e0 <sbrk_aligned>
 8004a60:	1c43      	adds	r3, r0, #1
 8004a62:	4604      	mov	r4, r0
 8004a64:	d155      	bne.n	8004b12 <_malloc_r+0xf2>
 8004a66:	f8d8 4000 	ldr.w	r4, [r8]
 8004a6a:	4626      	mov	r6, r4
 8004a6c:	2e00      	cmp	r6, #0
 8004a6e:	d145      	bne.n	8004afc <_malloc_r+0xdc>
 8004a70:	2c00      	cmp	r4, #0
 8004a72:	d048      	beq.n	8004b06 <_malloc_r+0xe6>
 8004a74:	6823      	ldr	r3, [r4, #0]
 8004a76:	4631      	mov	r1, r6
 8004a78:	4638      	mov	r0, r7
 8004a7a:	eb04 0903 	add.w	r9, r4, r3
 8004a7e:	f000 fef1 	bl	8005864 <_sbrk_r>
 8004a82:	4581      	cmp	r9, r0
 8004a84:	d13f      	bne.n	8004b06 <_malloc_r+0xe6>
 8004a86:	6821      	ldr	r1, [r4, #0]
 8004a88:	1a6d      	subs	r5, r5, r1
 8004a8a:	4629      	mov	r1, r5
 8004a8c:	4638      	mov	r0, r7
 8004a8e:	f7ff ffa7 	bl	80049e0 <sbrk_aligned>
 8004a92:	3001      	adds	r0, #1
 8004a94:	d037      	beq.n	8004b06 <_malloc_r+0xe6>
 8004a96:	6823      	ldr	r3, [r4, #0]
 8004a98:	442b      	add	r3, r5
 8004a9a:	6023      	str	r3, [r4, #0]
 8004a9c:	f8d8 3000 	ldr.w	r3, [r8]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d038      	beq.n	8004b16 <_malloc_r+0xf6>
 8004aa4:	685a      	ldr	r2, [r3, #4]
 8004aa6:	42a2      	cmp	r2, r4
 8004aa8:	d12b      	bne.n	8004b02 <_malloc_r+0xe2>
 8004aaa:	2200      	movs	r2, #0
 8004aac:	605a      	str	r2, [r3, #4]
 8004aae:	e00f      	b.n	8004ad0 <_malloc_r+0xb0>
 8004ab0:	6822      	ldr	r2, [r4, #0]
 8004ab2:	1b52      	subs	r2, r2, r5
 8004ab4:	d41f      	bmi.n	8004af6 <_malloc_r+0xd6>
 8004ab6:	2a0b      	cmp	r2, #11
 8004ab8:	d917      	bls.n	8004aea <_malloc_r+0xca>
 8004aba:	1961      	adds	r1, r4, r5
 8004abc:	42a3      	cmp	r3, r4
 8004abe:	6025      	str	r5, [r4, #0]
 8004ac0:	bf18      	it	ne
 8004ac2:	6059      	strne	r1, [r3, #4]
 8004ac4:	6863      	ldr	r3, [r4, #4]
 8004ac6:	bf08      	it	eq
 8004ac8:	f8c8 1000 	streq.w	r1, [r8]
 8004acc:	5162      	str	r2, [r4, r5]
 8004ace:	604b      	str	r3, [r1, #4]
 8004ad0:	4638      	mov	r0, r7
 8004ad2:	f104 060b 	add.w	r6, r4, #11
 8004ad6:	f000 f829 	bl	8004b2c <__malloc_unlock>
 8004ada:	f026 0607 	bic.w	r6, r6, #7
 8004ade:	1d23      	adds	r3, r4, #4
 8004ae0:	1af2      	subs	r2, r6, r3
 8004ae2:	d0ae      	beq.n	8004a42 <_malloc_r+0x22>
 8004ae4:	1b9b      	subs	r3, r3, r6
 8004ae6:	50a3      	str	r3, [r4, r2]
 8004ae8:	e7ab      	b.n	8004a42 <_malloc_r+0x22>
 8004aea:	42a3      	cmp	r3, r4
 8004aec:	6862      	ldr	r2, [r4, #4]
 8004aee:	d1dd      	bne.n	8004aac <_malloc_r+0x8c>
 8004af0:	f8c8 2000 	str.w	r2, [r8]
 8004af4:	e7ec      	b.n	8004ad0 <_malloc_r+0xb0>
 8004af6:	4623      	mov	r3, r4
 8004af8:	6864      	ldr	r4, [r4, #4]
 8004afa:	e7ac      	b.n	8004a56 <_malloc_r+0x36>
 8004afc:	4634      	mov	r4, r6
 8004afe:	6876      	ldr	r6, [r6, #4]
 8004b00:	e7b4      	b.n	8004a6c <_malloc_r+0x4c>
 8004b02:	4613      	mov	r3, r2
 8004b04:	e7cc      	b.n	8004aa0 <_malloc_r+0x80>
 8004b06:	230c      	movs	r3, #12
 8004b08:	603b      	str	r3, [r7, #0]
 8004b0a:	4638      	mov	r0, r7
 8004b0c:	f000 f80e 	bl	8004b2c <__malloc_unlock>
 8004b10:	e797      	b.n	8004a42 <_malloc_r+0x22>
 8004b12:	6025      	str	r5, [r4, #0]
 8004b14:	e7dc      	b.n	8004ad0 <_malloc_r+0xb0>
 8004b16:	605b      	str	r3, [r3, #4]
 8004b18:	deff      	udf	#255	; 0xff
 8004b1a:	bf00      	nop
 8004b1c:	20000ee4 	.word	0x20000ee4

08004b20 <__malloc_lock>:
 8004b20:	4801      	ldr	r0, [pc, #4]	; (8004b28 <__malloc_lock+0x8>)
 8004b22:	f7ff bf07 	b.w	8004934 <__retarget_lock_acquire_recursive>
 8004b26:	bf00      	nop
 8004b28:	20000ee0 	.word	0x20000ee0

08004b2c <__malloc_unlock>:
 8004b2c:	4801      	ldr	r0, [pc, #4]	; (8004b34 <__malloc_unlock+0x8>)
 8004b2e:	f7ff bf02 	b.w	8004936 <__retarget_lock_release_recursive>
 8004b32:	bf00      	nop
 8004b34:	20000ee0 	.word	0x20000ee0

08004b38 <__ssputs_r>:
 8004b38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b3c:	688e      	ldr	r6, [r1, #8]
 8004b3e:	461f      	mov	r7, r3
 8004b40:	42be      	cmp	r6, r7
 8004b42:	680b      	ldr	r3, [r1, #0]
 8004b44:	4682      	mov	sl, r0
 8004b46:	460c      	mov	r4, r1
 8004b48:	4690      	mov	r8, r2
 8004b4a:	d82c      	bhi.n	8004ba6 <__ssputs_r+0x6e>
 8004b4c:	898a      	ldrh	r2, [r1, #12]
 8004b4e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004b52:	d026      	beq.n	8004ba2 <__ssputs_r+0x6a>
 8004b54:	6965      	ldr	r5, [r4, #20]
 8004b56:	6909      	ldr	r1, [r1, #16]
 8004b58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004b5c:	eba3 0901 	sub.w	r9, r3, r1
 8004b60:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004b64:	1c7b      	adds	r3, r7, #1
 8004b66:	444b      	add	r3, r9
 8004b68:	106d      	asrs	r5, r5, #1
 8004b6a:	429d      	cmp	r5, r3
 8004b6c:	bf38      	it	cc
 8004b6e:	461d      	movcc	r5, r3
 8004b70:	0553      	lsls	r3, r2, #21
 8004b72:	d527      	bpl.n	8004bc4 <__ssputs_r+0x8c>
 8004b74:	4629      	mov	r1, r5
 8004b76:	f7ff ff53 	bl	8004a20 <_malloc_r>
 8004b7a:	4606      	mov	r6, r0
 8004b7c:	b360      	cbz	r0, 8004bd8 <__ssputs_r+0xa0>
 8004b7e:	6921      	ldr	r1, [r4, #16]
 8004b80:	464a      	mov	r2, r9
 8004b82:	f000 fe7f 	bl	8005884 <memcpy>
 8004b86:	89a3      	ldrh	r3, [r4, #12]
 8004b88:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004b8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b90:	81a3      	strh	r3, [r4, #12]
 8004b92:	6126      	str	r6, [r4, #16]
 8004b94:	6165      	str	r5, [r4, #20]
 8004b96:	444e      	add	r6, r9
 8004b98:	eba5 0509 	sub.w	r5, r5, r9
 8004b9c:	6026      	str	r6, [r4, #0]
 8004b9e:	60a5      	str	r5, [r4, #8]
 8004ba0:	463e      	mov	r6, r7
 8004ba2:	42be      	cmp	r6, r7
 8004ba4:	d900      	bls.n	8004ba8 <__ssputs_r+0x70>
 8004ba6:	463e      	mov	r6, r7
 8004ba8:	6820      	ldr	r0, [r4, #0]
 8004baa:	4632      	mov	r2, r6
 8004bac:	4641      	mov	r1, r8
 8004bae:	f000 fe3e 	bl	800582e <memmove>
 8004bb2:	68a3      	ldr	r3, [r4, #8]
 8004bb4:	1b9b      	subs	r3, r3, r6
 8004bb6:	60a3      	str	r3, [r4, #8]
 8004bb8:	6823      	ldr	r3, [r4, #0]
 8004bba:	4433      	add	r3, r6
 8004bbc:	6023      	str	r3, [r4, #0]
 8004bbe:	2000      	movs	r0, #0
 8004bc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bc4:	462a      	mov	r2, r5
 8004bc6:	f000 fe6b 	bl	80058a0 <_realloc_r>
 8004bca:	4606      	mov	r6, r0
 8004bcc:	2800      	cmp	r0, #0
 8004bce:	d1e0      	bne.n	8004b92 <__ssputs_r+0x5a>
 8004bd0:	6921      	ldr	r1, [r4, #16]
 8004bd2:	4650      	mov	r0, sl
 8004bd4:	f7ff feb8 	bl	8004948 <_free_r>
 8004bd8:	230c      	movs	r3, #12
 8004bda:	f8ca 3000 	str.w	r3, [sl]
 8004bde:	89a3      	ldrh	r3, [r4, #12]
 8004be0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004be4:	81a3      	strh	r3, [r4, #12]
 8004be6:	f04f 30ff 	mov.w	r0, #4294967295
 8004bea:	e7e9      	b.n	8004bc0 <__ssputs_r+0x88>

08004bec <_svfiprintf_r>:
 8004bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bf0:	4698      	mov	r8, r3
 8004bf2:	898b      	ldrh	r3, [r1, #12]
 8004bf4:	061b      	lsls	r3, r3, #24
 8004bf6:	b09d      	sub	sp, #116	; 0x74
 8004bf8:	4607      	mov	r7, r0
 8004bfa:	460d      	mov	r5, r1
 8004bfc:	4614      	mov	r4, r2
 8004bfe:	d50e      	bpl.n	8004c1e <_svfiprintf_r+0x32>
 8004c00:	690b      	ldr	r3, [r1, #16]
 8004c02:	b963      	cbnz	r3, 8004c1e <_svfiprintf_r+0x32>
 8004c04:	2140      	movs	r1, #64	; 0x40
 8004c06:	f7ff ff0b 	bl	8004a20 <_malloc_r>
 8004c0a:	6028      	str	r0, [r5, #0]
 8004c0c:	6128      	str	r0, [r5, #16]
 8004c0e:	b920      	cbnz	r0, 8004c1a <_svfiprintf_r+0x2e>
 8004c10:	230c      	movs	r3, #12
 8004c12:	603b      	str	r3, [r7, #0]
 8004c14:	f04f 30ff 	mov.w	r0, #4294967295
 8004c18:	e0d0      	b.n	8004dbc <_svfiprintf_r+0x1d0>
 8004c1a:	2340      	movs	r3, #64	; 0x40
 8004c1c:	616b      	str	r3, [r5, #20]
 8004c1e:	2300      	movs	r3, #0
 8004c20:	9309      	str	r3, [sp, #36]	; 0x24
 8004c22:	2320      	movs	r3, #32
 8004c24:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004c28:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c2c:	2330      	movs	r3, #48	; 0x30
 8004c2e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004dd4 <_svfiprintf_r+0x1e8>
 8004c32:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004c36:	f04f 0901 	mov.w	r9, #1
 8004c3a:	4623      	mov	r3, r4
 8004c3c:	469a      	mov	sl, r3
 8004c3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c42:	b10a      	cbz	r2, 8004c48 <_svfiprintf_r+0x5c>
 8004c44:	2a25      	cmp	r2, #37	; 0x25
 8004c46:	d1f9      	bne.n	8004c3c <_svfiprintf_r+0x50>
 8004c48:	ebba 0b04 	subs.w	fp, sl, r4
 8004c4c:	d00b      	beq.n	8004c66 <_svfiprintf_r+0x7a>
 8004c4e:	465b      	mov	r3, fp
 8004c50:	4622      	mov	r2, r4
 8004c52:	4629      	mov	r1, r5
 8004c54:	4638      	mov	r0, r7
 8004c56:	f7ff ff6f 	bl	8004b38 <__ssputs_r>
 8004c5a:	3001      	adds	r0, #1
 8004c5c:	f000 80a9 	beq.w	8004db2 <_svfiprintf_r+0x1c6>
 8004c60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c62:	445a      	add	r2, fp
 8004c64:	9209      	str	r2, [sp, #36]	; 0x24
 8004c66:	f89a 3000 	ldrb.w	r3, [sl]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	f000 80a1 	beq.w	8004db2 <_svfiprintf_r+0x1c6>
 8004c70:	2300      	movs	r3, #0
 8004c72:	f04f 32ff 	mov.w	r2, #4294967295
 8004c76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c7a:	f10a 0a01 	add.w	sl, sl, #1
 8004c7e:	9304      	str	r3, [sp, #16]
 8004c80:	9307      	str	r3, [sp, #28]
 8004c82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004c86:	931a      	str	r3, [sp, #104]	; 0x68
 8004c88:	4654      	mov	r4, sl
 8004c8a:	2205      	movs	r2, #5
 8004c8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c90:	4850      	ldr	r0, [pc, #320]	; (8004dd4 <_svfiprintf_r+0x1e8>)
 8004c92:	f7fb faa5 	bl	80001e0 <memchr>
 8004c96:	9a04      	ldr	r2, [sp, #16]
 8004c98:	b9d8      	cbnz	r0, 8004cd2 <_svfiprintf_r+0xe6>
 8004c9a:	06d0      	lsls	r0, r2, #27
 8004c9c:	bf44      	itt	mi
 8004c9e:	2320      	movmi	r3, #32
 8004ca0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ca4:	0711      	lsls	r1, r2, #28
 8004ca6:	bf44      	itt	mi
 8004ca8:	232b      	movmi	r3, #43	; 0x2b
 8004caa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004cae:	f89a 3000 	ldrb.w	r3, [sl]
 8004cb2:	2b2a      	cmp	r3, #42	; 0x2a
 8004cb4:	d015      	beq.n	8004ce2 <_svfiprintf_r+0xf6>
 8004cb6:	9a07      	ldr	r2, [sp, #28]
 8004cb8:	4654      	mov	r4, sl
 8004cba:	2000      	movs	r0, #0
 8004cbc:	f04f 0c0a 	mov.w	ip, #10
 8004cc0:	4621      	mov	r1, r4
 8004cc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004cc6:	3b30      	subs	r3, #48	; 0x30
 8004cc8:	2b09      	cmp	r3, #9
 8004cca:	d94d      	bls.n	8004d68 <_svfiprintf_r+0x17c>
 8004ccc:	b1b0      	cbz	r0, 8004cfc <_svfiprintf_r+0x110>
 8004cce:	9207      	str	r2, [sp, #28]
 8004cd0:	e014      	b.n	8004cfc <_svfiprintf_r+0x110>
 8004cd2:	eba0 0308 	sub.w	r3, r0, r8
 8004cd6:	fa09 f303 	lsl.w	r3, r9, r3
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	9304      	str	r3, [sp, #16]
 8004cde:	46a2      	mov	sl, r4
 8004ce0:	e7d2      	b.n	8004c88 <_svfiprintf_r+0x9c>
 8004ce2:	9b03      	ldr	r3, [sp, #12]
 8004ce4:	1d19      	adds	r1, r3, #4
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	9103      	str	r1, [sp, #12]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	bfbb      	ittet	lt
 8004cee:	425b      	neglt	r3, r3
 8004cf0:	f042 0202 	orrlt.w	r2, r2, #2
 8004cf4:	9307      	strge	r3, [sp, #28]
 8004cf6:	9307      	strlt	r3, [sp, #28]
 8004cf8:	bfb8      	it	lt
 8004cfa:	9204      	strlt	r2, [sp, #16]
 8004cfc:	7823      	ldrb	r3, [r4, #0]
 8004cfe:	2b2e      	cmp	r3, #46	; 0x2e
 8004d00:	d10c      	bne.n	8004d1c <_svfiprintf_r+0x130>
 8004d02:	7863      	ldrb	r3, [r4, #1]
 8004d04:	2b2a      	cmp	r3, #42	; 0x2a
 8004d06:	d134      	bne.n	8004d72 <_svfiprintf_r+0x186>
 8004d08:	9b03      	ldr	r3, [sp, #12]
 8004d0a:	1d1a      	adds	r2, r3, #4
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	9203      	str	r2, [sp, #12]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	bfb8      	it	lt
 8004d14:	f04f 33ff 	movlt.w	r3, #4294967295
 8004d18:	3402      	adds	r4, #2
 8004d1a:	9305      	str	r3, [sp, #20]
 8004d1c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004de4 <_svfiprintf_r+0x1f8>
 8004d20:	7821      	ldrb	r1, [r4, #0]
 8004d22:	2203      	movs	r2, #3
 8004d24:	4650      	mov	r0, sl
 8004d26:	f7fb fa5b 	bl	80001e0 <memchr>
 8004d2a:	b138      	cbz	r0, 8004d3c <_svfiprintf_r+0x150>
 8004d2c:	9b04      	ldr	r3, [sp, #16]
 8004d2e:	eba0 000a 	sub.w	r0, r0, sl
 8004d32:	2240      	movs	r2, #64	; 0x40
 8004d34:	4082      	lsls	r2, r0
 8004d36:	4313      	orrs	r3, r2
 8004d38:	3401      	adds	r4, #1
 8004d3a:	9304      	str	r3, [sp, #16]
 8004d3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d40:	4825      	ldr	r0, [pc, #148]	; (8004dd8 <_svfiprintf_r+0x1ec>)
 8004d42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004d46:	2206      	movs	r2, #6
 8004d48:	f7fb fa4a 	bl	80001e0 <memchr>
 8004d4c:	2800      	cmp	r0, #0
 8004d4e:	d038      	beq.n	8004dc2 <_svfiprintf_r+0x1d6>
 8004d50:	4b22      	ldr	r3, [pc, #136]	; (8004ddc <_svfiprintf_r+0x1f0>)
 8004d52:	bb1b      	cbnz	r3, 8004d9c <_svfiprintf_r+0x1b0>
 8004d54:	9b03      	ldr	r3, [sp, #12]
 8004d56:	3307      	adds	r3, #7
 8004d58:	f023 0307 	bic.w	r3, r3, #7
 8004d5c:	3308      	adds	r3, #8
 8004d5e:	9303      	str	r3, [sp, #12]
 8004d60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d62:	4433      	add	r3, r6
 8004d64:	9309      	str	r3, [sp, #36]	; 0x24
 8004d66:	e768      	b.n	8004c3a <_svfiprintf_r+0x4e>
 8004d68:	fb0c 3202 	mla	r2, ip, r2, r3
 8004d6c:	460c      	mov	r4, r1
 8004d6e:	2001      	movs	r0, #1
 8004d70:	e7a6      	b.n	8004cc0 <_svfiprintf_r+0xd4>
 8004d72:	2300      	movs	r3, #0
 8004d74:	3401      	adds	r4, #1
 8004d76:	9305      	str	r3, [sp, #20]
 8004d78:	4619      	mov	r1, r3
 8004d7a:	f04f 0c0a 	mov.w	ip, #10
 8004d7e:	4620      	mov	r0, r4
 8004d80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d84:	3a30      	subs	r2, #48	; 0x30
 8004d86:	2a09      	cmp	r2, #9
 8004d88:	d903      	bls.n	8004d92 <_svfiprintf_r+0x1a6>
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d0c6      	beq.n	8004d1c <_svfiprintf_r+0x130>
 8004d8e:	9105      	str	r1, [sp, #20]
 8004d90:	e7c4      	b.n	8004d1c <_svfiprintf_r+0x130>
 8004d92:	fb0c 2101 	mla	r1, ip, r1, r2
 8004d96:	4604      	mov	r4, r0
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e7f0      	b.n	8004d7e <_svfiprintf_r+0x192>
 8004d9c:	ab03      	add	r3, sp, #12
 8004d9e:	9300      	str	r3, [sp, #0]
 8004da0:	462a      	mov	r2, r5
 8004da2:	4b0f      	ldr	r3, [pc, #60]	; (8004de0 <_svfiprintf_r+0x1f4>)
 8004da4:	a904      	add	r1, sp, #16
 8004da6:	4638      	mov	r0, r7
 8004da8:	f3af 8000 	nop.w
 8004dac:	1c42      	adds	r2, r0, #1
 8004dae:	4606      	mov	r6, r0
 8004db0:	d1d6      	bne.n	8004d60 <_svfiprintf_r+0x174>
 8004db2:	89ab      	ldrh	r3, [r5, #12]
 8004db4:	065b      	lsls	r3, r3, #25
 8004db6:	f53f af2d 	bmi.w	8004c14 <_svfiprintf_r+0x28>
 8004dba:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004dbc:	b01d      	add	sp, #116	; 0x74
 8004dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dc2:	ab03      	add	r3, sp, #12
 8004dc4:	9300      	str	r3, [sp, #0]
 8004dc6:	462a      	mov	r2, r5
 8004dc8:	4b05      	ldr	r3, [pc, #20]	; (8004de0 <_svfiprintf_r+0x1f4>)
 8004dca:	a904      	add	r1, sp, #16
 8004dcc:	4638      	mov	r0, r7
 8004dce:	f000 fa4b 	bl	8005268 <_printf_i>
 8004dd2:	e7eb      	b.n	8004dac <_svfiprintf_r+0x1c0>
 8004dd4:	08005cad 	.word	0x08005cad
 8004dd8:	08005cb7 	.word	0x08005cb7
 8004ddc:	00000000 	.word	0x00000000
 8004de0:	08004b39 	.word	0x08004b39
 8004de4:	08005cb3 	.word	0x08005cb3

08004de8 <_sungetc_r>:
 8004de8:	b538      	push	{r3, r4, r5, lr}
 8004dea:	1c4b      	adds	r3, r1, #1
 8004dec:	4614      	mov	r4, r2
 8004dee:	d103      	bne.n	8004df8 <_sungetc_r+0x10>
 8004df0:	f04f 35ff 	mov.w	r5, #4294967295
 8004df4:	4628      	mov	r0, r5
 8004df6:	bd38      	pop	{r3, r4, r5, pc}
 8004df8:	8993      	ldrh	r3, [r2, #12]
 8004dfa:	f023 0320 	bic.w	r3, r3, #32
 8004dfe:	8193      	strh	r3, [r2, #12]
 8004e00:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004e02:	6852      	ldr	r2, [r2, #4]
 8004e04:	b2cd      	uxtb	r5, r1
 8004e06:	b18b      	cbz	r3, 8004e2c <_sungetc_r+0x44>
 8004e08:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	dd08      	ble.n	8004e20 <_sungetc_r+0x38>
 8004e0e:	6823      	ldr	r3, [r4, #0]
 8004e10:	1e5a      	subs	r2, r3, #1
 8004e12:	6022      	str	r2, [r4, #0]
 8004e14:	f803 5c01 	strb.w	r5, [r3, #-1]
 8004e18:	6863      	ldr	r3, [r4, #4]
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	6063      	str	r3, [r4, #4]
 8004e1e:	e7e9      	b.n	8004df4 <_sungetc_r+0xc>
 8004e20:	4621      	mov	r1, r4
 8004e22:	f000 fcca 	bl	80057ba <__submore>
 8004e26:	2800      	cmp	r0, #0
 8004e28:	d0f1      	beq.n	8004e0e <_sungetc_r+0x26>
 8004e2a:	e7e1      	b.n	8004df0 <_sungetc_r+0x8>
 8004e2c:	6921      	ldr	r1, [r4, #16]
 8004e2e:	6823      	ldr	r3, [r4, #0]
 8004e30:	b151      	cbz	r1, 8004e48 <_sungetc_r+0x60>
 8004e32:	4299      	cmp	r1, r3
 8004e34:	d208      	bcs.n	8004e48 <_sungetc_r+0x60>
 8004e36:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8004e3a:	42a9      	cmp	r1, r5
 8004e3c:	d104      	bne.n	8004e48 <_sungetc_r+0x60>
 8004e3e:	3b01      	subs	r3, #1
 8004e40:	3201      	adds	r2, #1
 8004e42:	6023      	str	r3, [r4, #0]
 8004e44:	6062      	str	r2, [r4, #4]
 8004e46:	e7d5      	b.n	8004df4 <_sungetc_r+0xc>
 8004e48:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8004e4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e50:	6363      	str	r3, [r4, #52]	; 0x34
 8004e52:	2303      	movs	r3, #3
 8004e54:	63a3      	str	r3, [r4, #56]	; 0x38
 8004e56:	4623      	mov	r3, r4
 8004e58:	f803 5f46 	strb.w	r5, [r3, #70]!
 8004e5c:	6023      	str	r3, [r4, #0]
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e7dc      	b.n	8004e1c <_sungetc_r+0x34>

08004e62 <__ssrefill_r>:
 8004e62:	b510      	push	{r4, lr}
 8004e64:	460c      	mov	r4, r1
 8004e66:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004e68:	b169      	cbz	r1, 8004e86 <__ssrefill_r+0x24>
 8004e6a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e6e:	4299      	cmp	r1, r3
 8004e70:	d001      	beq.n	8004e76 <__ssrefill_r+0x14>
 8004e72:	f7ff fd69 	bl	8004948 <_free_r>
 8004e76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004e78:	6063      	str	r3, [r4, #4]
 8004e7a:	2000      	movs	r0, #0
 8004e7c:	6360      	str	r0, [r4, #52]	; 0x34
 8004e7e:	b113      	cbz	r3, 8004e86 <__ssrefill_r+0x24>
 8004e80:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004e82:	6023      	str	r3, [r4, #0]
 8004e84:	bd10      	pop	{r4, pc}
 8004e86:	6923      	ldr	r3, [r4, #16]
 8004e88:	6023      	str	r3, [r4, #0]
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	6063      	str	r3, [r4, #4]
 8004e8e:	89a3      	ldrh	r3, [r4, #12]
 8004e90:	f043 0320 	orr.w	r3, r3, #32
 8004e94:	81a3      	strh	r3, [r4, #12]
 8004e96:	f04f 30ff 	mov.w	r0, #4294967295
 8004e9a:	e7f3      	b.n	8004e84 <__ssrefill_r+0x22>

08004e9c <__ssvfiscanf_r>:
 8004e9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ea0:	460c      	mov	r4, r1
 8004ea2:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8004ea6:	2100      	movs	r1, #0
 8004ea8:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8004eac:	49a6      	ldr	r1, [pc, #664]	; (8005148 <__ssvfiscanf_r+0x2ac>)
 8004eae:	91a0      	str	r1, [sp, #640]	; 0x280
 8004eb0:	f10d 0804 	add.w	r8, sp, #4
 8004eb4:	49a5      	ldr	r1, [pc, #660]	; (800514c <__ssvfiscanf_r+0x2b0>)
 8004eb6:	4fa6      	ldr	r7, [pc, #664]	; (8005150 <__ssvfiscanf_r+0x2b4>)
 8004eb8:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8005154 <__ssvfiscanf_r+0x2b8>
 8004ebc:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8004ec0:	4606      	mov	r6, r0
 8004ec2:	91a1      	str	r1, [sp, #644]	; 0x284
 8004ec4:	9300      	str	r3, [sp, #0]
 8004ec6:	7813      	ldrb	r3, [r2, #0]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	f000 815a 	beq.w	8005182 <__ssvfiscanf_r+0x2e6>
 8004ece:	5cf9      	ldrb	r1, [r7, r3]
 8004ed0:	f011 0108 	ands.w	r1, r1, #8
 8004ed4:	f102 0501 	add.w	r5, r2, #1
 8004ed8:	d019      	beq.n	8004f0e <__ssvfiscanf_r+0x72>
 8004eda:	6863      	ldr	r3, [r4, #4]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	dd0f      	ble.n	8004f00 <__ssvfiscanf_r+0x64>
 8004ee0:	6823      	ldr	r3, [r4, #0]
 8004ee2:	781a      	ldrb	r2, [r3, #0]
 8004ee4:	5cba      	ldrb	r2, [r7, r2]
 8004ee6:	0712      	lsls	r2, r2, #28
 8004ee8:	d401      	bmi.n	8004eee <__ssvfiscanf_r+0x52>
 8004eea:	462a      	mov	r2, r5
 8004eec:	e7eb      	b.n	8004ec6 <__ssvfiscanf_r+0x2a>
 8004eee:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004ef0:	3201      	adds	r2, #1
 8004ef2:	9245      	str	r2, [sp, #276]	; 0x114
 8004ef4:	6862      	ldr	r2, [r4, #4]
 8004ef6:	3301      	adds	r3, #1
 8004ef8:	3a01      	subs	r2, #1
 8004efa:	6062      	str	r2, [r4, #4]
 8004efc:	6023      	str	r3, [r4, #0]
 8004efe:	e7ec      	b.n	8004eda <__ssvfiscanf_r+0x3e>
 8004f00:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004f02:	4621      	mov	r1, r4
 8004f04:	4630      	mov	r0, r6
 8004f06:	4798      	blx	r3
 8004f08:	2800      	cmp	r0, #0
 8004f0a:	d0e9      	beq.n	8004ee0 <__ssvfiscanf_r+0x44>
 8004f0c:	e7ed      	b.n	8004eea <__ssvfiscanf_r+0x4e>
 8004f0e:	2b25      	cmp	r3, #37	; 0x25
 8004f10:	d012      	beq.n	8004f38 <__ssvfiscanf_r+0x9c>
 8004f12:	469a      	mov	sl, r3
 8004f14:	6863      	ldr	r3, [r4, #4]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	f340 8091 	ble.w	800503e <__ssvfiscanf_r+0x1a2>
 8004f1c:	6822      	ldr	r2, [r4, #0]
 8004f1e:	7813      	ldrb	r3, [r2, #0]
 8004f20:	4553      	cmp	r3, sl
 8004f22:	f040 812e 	bne.w	8005182 <__ssvfiscanf_r+0x2e6>
 8004f26:	6863      	ldr	r3, [r4, #4]
 8004f28:	3b01      	subs	r3, #1
 8004f2a:	6063      	str	r3, [r4, #4]
 8004f2c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8004f2e:	3201      	adds	r2, #1
 8004f30:	3301      	adds	r3, #1
 8004f32:	6022      	str	r2, [r4, #0]
 8004f34:	9345      	str	r3, [sp, #276]	; 0x114
 8004f36:	e7d8      	b.n	8004eea <__ssvfiscanf_r+0x4e>
 8004f38:	9141      	str	r1, [sp, #260]	; 0x104
 8004f3a:	9143      	str	r1, [sp, #268]	; 0x10c
 8004f3c:	7853      	ldrb	r3, [r2, #1]
 8004f3e:	2b2a      	cmp	r3, #42	; 0x2a
 8004f40:	bf02      	ittt	eq
 8004f42:	2310      	moveq	r3, #16
 8004f44:	1c95      	addeq	r5, r2, #2
 8004f46:	9341      	streq	r3, [sp, #260]	; 0x104
 8004f48:	220a      	movs	r2, #10
 8004f4a:	46aa      	mov	sl, r5
 8004f4c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8004f50:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8004f54:	2b09      	cmp	r3, #9
 8004f56:	d91c      	bls.n	8004f92 <__ssvfiscanf_r+0xf6>
 8004f58:	487e      	ldr	r0, [pc, #504]	; (8005154 <__ssvfiscanf_r+0x2b8>)
 8004f5a:	2203      	movs	r2, #3
 8004f5c:	f7fb f940 	bl	80001e0 <memchr>
 8004f60:	b138      	cbz	r0, 8004f72 <__ssvfiscanf_r+0xd6>
 8004f62:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8004f64:	eba0 0009 	sub.w	r0, r0, r9
 8004f68:	2301      	movs	r3, #1
 8004f6a:	4083      	lsls	r3, r0
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	9341      	str	r3, [sp, #260]	; 0x104
 8004f70:	4655      	mov	r5, sl
 8004f72:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004f76:	2b78      	cmp	r3, #120	; 0x78
 8004f78:	d806      	bhi.n	8004f88 <__ssvfiscanf_r+0xec>
 8004f7a:	2b57      	cmp	r3, #87	; 0x57
 8004f7c:	d810      	bhi.n	8004fa0 <__ssvfiscanf_r+0x104>
 8004f7e:	2b25      	cmp	r3, #37	; 0x25
 8004f80:	d0c7      	beq.n	8004f12 <__ssvfiscanf_r+0x76>
 8004f82:	d857      	bhi.n	8005034 <__ssvfiscanf_r+0x198>
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d065      	beq.n	8005054 <__ssvfiscanf_r+0x1b8>
 8004f88:	2303      	movs	r3, #3
 8004f8a:	9347      	str	r3, [sp, #284]	; 0x11c
 8004f8c:	230a      	movs	r3, #10
 8004f8e:	9342      	str	r3, [sp, #264]	; 0x108
 8004f90:	e076      	b.n	8005080 <__ssvfiscanf_r+0x1e4>
 8004f92:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8004f94:	fb02 1103 	mla	r1, r2, r3, r1
 8004f98:	3930      	subs	r1, #48	; 0x30
 8004f9a:	9143      	str	r1, [sp, #268]	; 0x10c
 8004f9c:	4655      	mov	r5, sl
 8004f9e:	e7d4      	b.n	8004f4a <__ssvfiscanf_r+0xae>
 8004fa0:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8004fa4:	2a20      	cmp	r2, #32
 8004fa6:	d8ef      	bhi.n	8004f88 <__ssvfiscanf_r+0xec>
 8004fa8:	a101      	add	r1, pc, #4	; (adr r1, 8004fb0 <__ssvfiscanf_r+0x114>)
 8004faa:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004fae:	bf00      	nop
 8004fb0:	08005063 	.word	0x08005063
 8004fb4:	08004f89 	.word	0x08004f89
 8004fb8:	08004f89 	.word	0x08004f89
 8004fbc:	080050c1 	.word	0x080050c1
 8004fc0:	08004f89 	.word	0x08004f89
 8004fc4:	08004f89 	.word	0x08004f89
 8004fc8:	08004f89 	.word	0x08004f89
 8004fcc:	08004f89 	.word	0x08004f89
 8004fd0:	08004f89 	.word	0x08004f89
 8004fd4:	08004f89 	.word	0x08004f89
 8004fd8:	08004f89 	.word	0x08004f89
 8004fdc:	080050d7 	.word	0x080050d7
 8004fe0:	080050bd 	.word	0x080050bd
 8004fe4:	0800503b 	.word	0x0800503b
 8004fe8:	0800503b 	.word	0x0800503b
 8004fec:	0800503b 	.word	0x0800503b
 8004ff0:	08004f89 	.word	0x08004f89
 8004ff4:	08005079 	.word	0x08005079
 8004ff8:	08004f89 	.word	0x08004f89
 8004ffc:	08004f89 	.word	0x08004f89
 8005000:	08004f89 	.word	0x08004f89
 8005004:	08004f89 	.word	0x08004f89
 8005008:	080050e7 	.word	0x080050e7
 800500c:	080050b5 	.word	0x080050b5
 8005010:	0800505b 	.word	0x0800505b
 8005014:	08004f89 	.word	0x08004f89
 8005018:	08004f89 	.word	0x08004f89
 800501c:	080050e3 	.word	0x080050e3
 8005020:	08004f89 	.word	0x08004f89
 8005024:	080050bd 	.word	0x080050bd
 8005028:	08004f89 	.word	0x08004f89
 800502c:	08004f89 	.word	0x08004f89
 8005030:	08005063 	.word	0x08005063
 8005034:	3b45      	subs	r3, #69	; 0x45
 8005036:	2b02      	cmp	r3, #2
 8005038:	d8a6      	bhi.n	8004f88 <__ssvfiscanf_r+0xec>
 800503a:	2305      	movs	r3, #5
 800503c:	e01f      	b.n	800507e <__ssvfiscanf_r+0x1e2>
 800503e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005040:	4621      	mov	r1, r4
 8005042:	4630      	mov	r0, r6
 8005044:	4798      	blx	r3
 8005046:	2800      	cmp	r0, #0
 8005048:	f43f af68 	beq.w	8004f1c <__ssvfiscanf_r+0x80>
 800504c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800504e:	2800      	cmp	r0, #0
 8005050:	f040 808d 	bne.w	800516e <__ssvfiscanf_r+0x2d2>
 8005054:	f04f 30ff 	mov.w	r0, #4294967295
 8005058:	e08f      	b.n	800517a <__ssvfiscanf_r+0x2de>
 800505a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800505c:	f042 0220 	orr.w	r2, r2, #32
 8005060:	9241      	str	r2, [sp, #260]	; 0x104
 8005062:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005064:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005068:	9241      	str	r2, [sp, #260]	; 0x104
 800506a:	2210      	movs	r2, #16
 800506c:	2b6f      	cmp	r3, #111	; 0x6f
 800506e:	9242      	str	r2, [sp, #264]	; 0x108
 8005070:	bf34      	ite	cc
 8005072:	2303      	movcc	r3, #3
 8005074:	2304      	movcs	r3, #4
 8005076:	e002      	b.n	800507e <__ssvfiscanf_r+0x1e2>
 8005078:	2300      	movs	r3, #0
 800507a:	9342      	str	r3, [sp, #264]	; 0x108
 800507c:	2303      	movs	r3, #3
 800507e:	9347      	str	r3, [sp, #284]	; 0x11c
 8005080:	6863      	ldr	r3, [r4, #4]
 8005082:	2b00      	cmp	r3, #0
 8005084:	dd3d      	ble.n	8005102 <__ssvfiscanf_r+0x266>
 8005086:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005088:	0659      	lsls	r1, r3, #25
 800508a:	d404      	bmi.n	8005096 <__ssvfiscanf_r+0x1fa>
 800508c:	6823      	ldr	r3, [r4, #0]
 800508e:	781a      	ldrb	r2, [r3, #0]
 8005090:	5cba      	ldrb	r2, [r7, r2]
 8005092:	0712      	lsls	r2, r2, #28
 8005094:	d43c      	bmi.n	8005110 <__ssvfiscanf_r+0x274>
 8005096:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8005098:	2b02      	cmp	r3, #2
 800509a:	dc4b      	bgt.n	8005134 <__ssvfiscanf_r+0x298>
 800509c:	466b      	mov	r3, sp
 800509e:	4622      	mov	r2, r4
 80050a0:	a941      	add	r1, sp, #260	; 0x104
 80050a2:	4630      	mov	r0, r6
 80050a4:	f000 fa02 	bl	80054ac <_scanf_chars>
 80050a8:	2801      	cmp	r0, #1
 80050aa:	d06a      	beq.n	8005182 <__ssvfiscanf_r+0x2e6>
 80050ac:	2802      	cmp	r0, #2
 80050ae:	f47f af1c 	bne.w	8004eea <__ssvfiscanf_r+0x4e>
 80050b2:	e7cb      	b.n	800504c <__ssvfiscanf_r+0x1b0>
 80050b4:	2308      	movs	r3, #8
 80050b6:	9342      	str	r3, [sp, #264]	; 0x108
 80050b8:	2304      	movs	r3, #4
 80050ba:	e7e0      	b.n	800507e <__ssvfiscanf_r+0x1e2>
 80050bc:	220a      	movs	r2, #10
 80050be:	e7d5      	b.n	800506c <__ssvfiscanf_r+0x1d0>
 80050c0:	4629      	mov	r1, r5
 80050c2:	4640      	mov	r0, r8
 80050c4:	f000 fb40 	bl	8005748 <__sccl>
 80050c8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80050ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050ce:	9341      	str	r3, [sp, #260]	; 0x104
 80050d0:	4605      	mov	r5, r0
 80050d2:	2301      	movs	r3, #1
 80050d4:	e7d3      	b.n	800507e <__ssvfiscanf_r+0x1e2>
 80050d6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80050d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050dc:	9341      	str	r3, [sp, #260]	; 0x104
 80050de:	2300      	movs	r3, #0
 80050e0:	e7cd      	b.n	800507e <__ssvfiscanf_r+0x1e2>
 80050e2:	2302      	movs	r3, #2
 80050e4:	e7cb      	b.n	800507e <__ssvfiscanf_r+0x1e2>
 80050e6:	9841      	ldr	r0, [sp, #260]	; 0x104
 80050e8:	06c3      	lsls	r3, r0, #27
 80050ea:	f53f aefe 	bmi.w	8004eea <__ssvfiscanf_r+0x4e>
 80050ee:	9b00      	ldr	r3, [sp, #0]
 80050f0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80050f2:	1d19      	adds	r1, r3, #4
 80050f4:	9100      	str	r1, [sp, #0]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	07c0      	lsls	r0, r0, #31
 80050fa:	bf4c      	ite	mi
 80050fc:	801a      	strhmi	r2, [r3, #0]
 80050fe:	601a      	strpl	r2, [r3, #0]
 8005100:	e6f3      	b.n	8004eea <__ssvfiscanf_r+0x4e>
 8005102:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005104:	4621      	mov	r1, r4
 8005106:	4630      	mov	r0, r6
 8005108:	4798      	blx	r3
 800510a:	2800      	cmp	r0, #0
 800510c:	d0bb      	beq.n	8005086 <__ssvfiscanf_r+0x1ea>
 800510e:	e79d      	b.n	800504c <__ssvfiscanf_r+0x1b0>
 8005110:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005112:	3201      	adds	r2, #1
 8005114:	9245      	str	r2, [sp, #276]	; 0x114
 8005116:	6862      	ldr	r2, [r4, #4]
 8005118:	3a01      	subs	r2, #1
 800511a:	2a00      	cmp	r2, #0
 800511c:	6062      	str	r2, [r4, #4]
 800511e:	dd02      	ble.n	8005126 <__ssvfiscanf_r+0x28a>
 8005120:	3301      	adds	r3, #1
 8005122:	6023      	str	r3, [r4, #0]
 8005124:	e7b2      	b.n	800508c <__ssvfiscanf_r+0x1f0>
 8005126:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005128:	4621      	mov	r1, r4
 800512a:	4630      	mov	r0, r6
 800512c:	4798      	blx	r3
 800512e:	2800      	cmp	r0, #0
 8005130:	d0ac      	beq.n	800508c <__ssvfiscanf_r+0x1f0>
 8005132:	e78b      	b.n	800504c <__ssvfiscanf_r+0x1b0>
 8005134:	2b04      	cmp	r3, #4
 8005136:	dc0f      	bgt.n	8005158 <__ssvfiscanf_r+0x2bc>
 8005138:	466b      	mov	r3, sp
 800513a:	4622      	mov	r2, r4
 800513c:	a941      	add	r1, sp, #260	; 0x104
 800513e:	4630      	mov	r0, r6
 8005140:	f000 fa0e 	bl	8005560 <_scanf_i>
 8005144:	e7b0      	b.n	80050a8 <__ssvfiscanf_r+0x20c>
 8005146:	bf00      	nop
 8005148:	08004de9 	.word	0x08004de9
 800514c:	08004e63 	.word	0x08004e63
 8005150:	08005bad 	.word	0x08005bad
 8005154:	08005cb3 	.word	0x08005cb3
 8005158:	4b0b      	ldr	r3, [pc, #44]	; (8005188 <__ssvfiscanf_r+0x2ec>)
 800515a:	2b00      	cmp	r3, #0
 800515c:	f43f aec5 	beq.w	8004eea <__ssvfiscanf_r+0x4e>
 8005160:	466b      	mov	r3, sp
 8005162:	4622      	mov	r2, r4
 8005164:	a941      	add	r1, sp, #260	; 0x104
 8005166:	4630      	mov	r0, r6
 8005168:	f3af 8000 	nop.w
 800516c:	e79c      	b.n	80050a8 <__ssvfiscanf_r+0x20c>
 800516e:	89a3      	ldrh	r3, [r4, #12]
 8005170:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005174:	bf18      	it	ne
 8005176:	f04f 30ff 	movne.w	r0, #4294967295
 800517a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800517e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005182:	9844      	ldr	r0, [sp, #272]	; 0x110
 8005184:	e7f9      	b.n	800517a <__ssvfiscanf_r+0x2de>
 8005186:	bf00      	nop
 8005188:	00000000 	.word	0x00000000

0800518c <_printf_common>:
 800518c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005190:	4616      	mov	r6, r2
 8005192:	4699      	mov	r9, r3
 8005194:	688a      	ldr	r2, [r1, #8]
 8005196:	690b      	ldr	r3, [r1, #16]
 8005198:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800519c:	4293      	cmp	r3, r2
 800519e:	bfb8      	it	lt
 80051a0:	4613      	movlt	r3, r2
 80051a2:	6033      	str	r3, [r6, #0]
 80051a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80051a8:	4607      	mov	r7, r0
 80051aa:	460c      	mov	r4, r1
 80051ac:	b10a      	cbz	r2, 80051b2 <_printf_common+0x26>
 80051ae:	3301      	adds	r3, #1
 80051b0:	6033      	str	r3, [r6, #0]
 80051b2:	6823      	ldr	r3, [r4, #0]
 80051b4:	0699      	lsls	r1, r3, #26
 80051b6:	bf42      	ittt	mi
 80051b8:	6833      	ldrmi	r3, [r6, #0]
 80051ba:	3302      	addmi	r3, #2
 80051bc:	6033      	strmi	r3, [r6, #0]
 80051be:	6825      	ldr	r5, [r4, #0]
 80051c0:	f015 0506 	ands.w	r5, r5, #6
 80051c4:	d106      	bne.n	80051d4 <_printf_common+0x48>
 80051c6:	f104 0a19 	add.w	sl, r4, #25
 80051ca:	68e3      	ldr	r3, [r4, #12]
 80051cc:	6832      	ldr	r2, [r6, #0]
 80051ce:	1a9b      	subs	r3, r3, r2
 80051d0:	42ab      	cmp	r3, r5
 80051d2:	dc26      	bgt.n	8005222 <_printf_common+0x96>
 80051d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80051d8:	1e13      	subs	r3, r2, #0
 80051da:	6822      	ldr	r2, [r4, #0]
 80051dc:	bf18      	it	ne
 80051de:	2301      	movne	r3, #1
 80051e0:	0692      	lsls	r2, r2, #26
 80051e2:	d42b      	bmi.n	800523c <_printf_common+0xb0>
 80051e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80051e8:	4649      	mov	r1, r9
 80051ea:	4638      	mov	r0, r7
 80051ec:	47c0      	blx	r8
 80051ee:	3001      	adds	r0, #1
 80051f0:	d01e      	beq.n	8005230 <_printf_common+0xa4>
 80051f2:	6823      	ldr	r3, [r4, #0]
 80051f4:	6922      	ldr	r2, [r4, #16]
 80051f6:	f003 0306 	and.w	r3, r3, #6
 80051fa:	2b04      	cmp	r3, #4
 80051fc:	bf02      	ittt	eq
 80051fe:	68e5      	ldreq	r5, [r4, #12]
 8005200:	6833      	ldreq	r3, [r6, #0]
 8005202:	1aed      	subeq	r5, r5, r3
 8005204:	68a3      	ldr	r3, [r4, #8]
 8005206:	bf0c      	ite	eq
 8005208:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800520c:	2500      	movne	r5, #0
 800520e:	4293      	cmp	r3, r2
 8005210:	bfc4      	itt	gt
 8005212:	1a9b      	subgt	r3, r3, r2
 8005214:	18ed      	addgt	r5, r5, r3
 8005216:	2600      	movs	r6, #0
 8005218:	341a      	adds	r4, #26
 800521a:	42b5      	cmp	r5, r6
 800521c:	d11a      	bne.n	8005254 <_printf_common+0xc8>
 800521e:	2000      	movs	r0, #0
 8005220:	e008      	b.n	8005234 <_printf_common+0xa8>
 8005222:	2301      	movs	r3, #1
 8005224:	4652      	mov	r2, sl
 8005226:	4649      	mov	r1, r9
 8005228:	4638      	mov	r0, r7
 800522a:	47c0      	blx	r8
 800522c:	3001      	adds	r0, #1
 800522e:	d103      	bne.n	8005238 <_printf_common+0xac>
 8005230:	f04f 30ff 	mov.w	r0, #4294967295
 8005234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005238:	3501      	adds	r5, #1
 800523a:	e7c6      	b.n	80051ca <_printf_common+0x3e>
 800523c:	18e1      	adds	r1, r4, r3
 800523e:	1c5a      	adds	r2, r3, #1
 8005240:	2030      	movs	r0, #48	; 0x30
 8005242:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005246:	4422      	add	r2, r4
 8005248:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800524c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005250:	3302      	adds	r3, #2
 8005252:	e7c7      	b.n	80051e4 <_printf_common+0x58>
 8005254:	2301      	movs	r3, #1
 8005256:	4622      	mov	r2, r4
 8005258:	4649      	mov	r1, r9
 800525a:	4638      	mov	r0, r7
 800525c:	47c0      	blx	r8
 800525e:	3001      	adds	r0, #1
 8005260:	d0e6      	beq.n	8005230 <_printf_common+0xa4>
 8005262:	3601      	adds	r6, #1
 8005264:	e7d9      	b.n	800521a <_printf_common+0x8e>
	...

08005268 <_printf_i>:
 8005268:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800526c:	7e0f      	ldrb	r7, [r1, #24]
 800526e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005270:	2f78      	cmp	r7, #120	; 0x78
 8005272:	4691      	mov	r9, r2
 8005274:	4680      	mov	r8, r0
 8005276:	460c      	mov	r4, r1
 8005278:	469a      	mov	sl, r3
 800527a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800527e:	d807      	bhi.n	8005290 <_printf_i+0x28>
 8005280:	2f62      	cmp	r7, #98	; 0x62
 8005282:	d80a      	bhi.n	800529a <_printf_i+0x32>
 8005284:	2f00      	cmp	r7, #0
 8005286:	f000 80d4 	beq.w	8005432 <_printf_i+0x1ca>
 800528a:	2f58      	cmp	r7, #88	; 0x58
 800528c:	f000 80c0 	beq.w	8005410 <_printf_i+0x1a8>
 8005290:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005294:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005298:	e03a      	b.n	8005310 <_printf_i+0xa8>
 800529a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800529e:	2b15      	cmp	r3, #21
 80052a0:	d8f6      	bhi.n	8005290 <_printf_i+0x28>
 80052a2:	a101      	add	r1, pc, #4	; (adr r1, 80052a8 <_printf_i+0x40>)
 80052a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80052a8:	08005301 	.word	0x08005301
 80052ac:	08005315 	.word	0x08005315
 80052b0:	08005291 	.word	0x08005291
 80052b4:	08005291 	.word	0x08005291
 80052b8:	08005291 	.word	0x08005291
 80052bc:	08005291 	.word	0x08005291
 80052c0:	08005315 	.word	0x08005315
 80052c4:	08005291 	.word	0x08005291
 80052c8:	08005291 	.word	0x08005291
 80052cc:	08005291 	.word	0x08005291
 80052d0:	08005291 	.word	0x08005291
 80052d4:	08005419 	.word	0x08005419
 80052d8:	08005341 	.word	0x08005341
 80052dc:	080053d3 	.word	0x080053d3
 80052e0:	08005291 	.word	0x08005291
 80052e4:	08005291 	.word	0x08005291
 80052e8:	0800543b 	.word	0x0800543b
 80052ec:	08005291 	.word	0x08005291
 80052f0:	08005341 	.word	0x08005341
 80052f4:	08005291 	.word	0x08005291
 80052f8:	08005291 	.word	0x08005291
 80052fc:	080053db 	.word	0x080053db
 8005300:	682b      	ldr	r3, [r5, #0]
 8005302:	1d1a      	adds	r2, r3, #4
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	602a      	str	r2, [r5, #0]
 8005308:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800530c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005310:	2301      	movs	r3, #1
 8005312:	e09f      	b.n	8005454 <_printf_i+0x1ec>
 8005314:	6820      	ldr	r0, [r4, #0]
 8005316:	682b      	ldr	r3, [r5, #0]
 8005318:	0607      	lsls	r7, r0, #24
 800531a:	f103 0104 	add.w	r1, r3, #4
 800531e:	6029      	str	r1, [r5, #0]
 8005320:	d501      	bpl.n	8005326 <_printf_i+0xbe>
 8005322:	681e      	ldr	r6, [r3, #0]
 8005324:	e003      	b.n	800532e <_printf_i+0xc6>
 8005326:	0646      	lsls	r6, r0, #25
 8005328:	d5fb      	bpl.n	8005322 <_printf_i+0xba>
 800532a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800532e:	2e00      	cmp	r6, #0
 8005330:	da03      	bge.n	800533a <_printf_i+0xd2>
 8005332:	232d      	movs	r3, #45	; 0x2d
 8005334:	4276      	negs	r6, r6
 8005336:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800533a:	485a      	ldr	r0, [pc, #360]	; (80054a4 <_printf_i+0x23c>)
 800533c:	230a      	movs	r3, #10
 800533e:	e012      	b.n	8005366 <_printf_i+0xfe>
 8005340:	682b      	ldr	r3, [r5, #0]
 8005342:	6820      	ldr	r0, [r4, #0]
 8005344:	1d19      	adds	r1, r3, #4
 8005346:	6029      	str	r1, [r5, #0]
 8005348:	0605      	lsls	r5, r0, #24
 800534a:	d501      	bpl.n	8005350 <_printf_i+0xe8>
 800534c:	681e      	ldr	r6, [r3, #0]
 800534e:	e002      	b.n	8005356 <_printf_i+0xee>
 8005350:	0641      	lsls	r1, r0, #25
 8005352:	d5fb      	bpl.n	800534c <_printf_i+0xe4>
 8005354:	881e      	ldrh	r6, [r3, #0]
 8005356:	4853      	ldr	r0, [pc, #332]	; (80054a4 <_printf_i+0x23c>)
 8005358:	2f6f      	cmp	r7, #111	; 0x6f
 800535a:	bf0c      	ite	eq
 800535c:	2308      	moveq	r3, #8
 800535e:	230a      	movne	r3, #10
 8005360:	2100      	movs	r1, #0
 8005362:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005366:	6865      	ldr	r5, [r4, #4]
 8005368:	60a5      	str	r5, [r4, #8]
 800536a:	2d00      	cmp	r5, #0
 800536c:	bfa2      	ittt	ge
 800536e:	6821      	ldrge	r1, [r4, #0]
 8005370:	f021 0104 	bicge.w	r1, r1, #4
 8005374:	6021      	strge	r1, [r4, #0]
 8005376:	b90e      	cbnz	r6, 800537c <_printf_i+0x114>
 8005378:	2d00      	cmp	r5, #0
 800537a:	d04b      	beq.n	8005414 <_printf_i+0x1ac>
 800537c:	4615      	mov	r5, r2
 800537e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005382:	fb03 6711 	mls	r7, r3, r1, r6
 8005386:	5dc7      	ldrb	r7, [r0, r7]
 8005388:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800538c:	4637      	mov	r7, r6
 800538e:	42bb      	cmp	r3, r7
 8005390:	460e      	mov	r6, r1
 8005392:	d9f4      	bls.n	800537e <_printf_i+0x116>
 8005394:	2b08      	cmp	r3, #8
 8005396:	d10b      	bne.n	80053b0 <_printf_i+0x148>
 8005398:	6823      	ldr	r3, [r4, #0]
 800539a:	07de      	lsls	r6, r3, #31
 800539c:	d508      	bpl.n	80053b0 <_printf_i+0x148>
 800539e:	6923      	ldr	r3, [r4, #16]
 80053a0:	6861      	ldr	r1, [r4, #4]
 80053a2:	4299      	cmp	r1, r3
 80053a4:	bfde      	ittt	le
 80053a6:	2330      	movle	r3, #48	; 0x30
 80053a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80053ac:	f105 35ff 	addle.w	r5, r5, #4294967295
 80053b0:	1b52      	subs	r2, r2, r5
 80053b2:	6122      	str	r2, [r4, #16]
 80053b4:	f8cd a000 	str.w	sl, [sp]
 80053b8:	464b      	mov	r3, r9
 80053ba:	aa03      	add	r2, sp, #12
 80053bc:	4621      	mov	r1, r4
 80053be:	4640      	mov	r0, r8
 80053c0:	f7ff fee4 	bl	800518c <_printf_common>
 80053c4:	3001      	adds	r0, #1
 80053c6:	d14a      	bne.n	800545e <_printf_i+0x1f6>
 80053c8:	f04f 30ff 	mov.w	r0, #4294967295
 80053cc:	b004      	add	sp, #16
 80053ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053d2:	6823      	ldr	r3, [r4, #0]
 80053d4:	f043 0320 	orr.w	r3, r3, #32
 80053d8:	6023      	str	r3, [r4, #0]
 80053da:	4833      	ldr	r0, [pc, #204]	; (80054a8 <_printf_i+0x240>)
 80053dc:	2778      	movs	r7, #120	; 0x78
 80053de:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80053e2:	6823      	ldr	r3, [r4, #0]
 80053e4:	6829      	ldr	r1, [r5, #0]
 80053e6:	061f      	lsls	r7, r3, #24
 80053e8:	f851 6b04 	ldr.w	r6, [r1], #4
 80053ec:	d402      	bmi.n	80053f4 <_printf_i+0x18c>
 80053ee:	065f      	lsls	r7, r3, #25
 80053f0:	bf48      	it	mi
 80053f2:	b2b6      	uxthmi	r6, r6
 80053f4:	07df      	lsls	r7, r3, #31
 80053f6:	bf48      	it	mi
 80053f8:	f043 0320 	orrmi.w	r3, r3, #32
 80053fc:	6029      	str	r1, [r5, #0]
 80053fe:	bf48      	it	mi
 8005400:	6023      	strmi	r3, [r4, #0]
 8005402:	b91e      	cbnz	r6, 800540c <_printf_i+0x1a4>
 8005404:	6823      	ldr	r3, [r4, #0]
 8005406:	f023 0320 	bic.w	r3, r3, #32
 800540a:	6023      	str	r3, [r4, #0]
 800540c:	2310      	movs	r3, #16
 800540e:	e7a7      	b.n	8005360 <_printf_i+0xf8>
 8005410:	4824      	ldr	r0, [pc, #144]	; (80054a4 <_printf_i+0x23c>)
 8005412:	e7e4      	b.n	80053de <_printf_i+0x176>
 8005414:	4615      	mov	r5, r2
 8005416:	e7bd      	b.n	8005394 <_printf_i+0x12c>
 8005418:	682b      	ldr	r3, [r5, #0]
 800541a:	6826      	ldr	r6, [r4, #0]
 800541c:	6961      	ldr	r1, [r4, #20]
 800541e:	1d18      	adds	r0, r3, #4
 8005420:	6028      	str	r0, [r5, #0]
 8005422:	0635      	lsls	r5, r6, #24
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	d501      	bpl.n	800542c <_printf_i+0x1c4>
 8005428:	6019      	str	r1, [r3, #0]
 800542a:	e002      	b.n	8005432 <_printf_i+0x1ca>
 800542c:	0670      	lsls	r0, r6, #25
 800542e:	d5fb      	bpl.n	8005428 <_printf_i+0x1c0>
 8005430:	8019      	strh	r1, [r3, #0]
 8005432:	2300      	movs	r3, #0
 8005434:	6123      	str	r3, [r4, #16]
 8005436:	4615      	mov	r5, r2
 8005438:	e7bc      	b.n	80053b4 <_printf_i+0x14c>
 800543a:	682b      	ldr	r3, [r5, #0]
 800543c:	1d1a      	adds	r2, r3, #4
 800543e:	602a      	str	r2, [r5, #0]
 8005440:	681d      	ldr	r5, [r3, #0]
 8005442:	6862      	ldr	r2, [r4, #4]
 8005444:	2100      	movs	r1, #0
 8005446:	4628      	mov	r0, r5
 8005448:	f7fa feca 	bl	80001e0 <memchr>
 800544c:	b108      	cbz	r0, 8005452 <_printf_i+0x1ea>
 800544e:	1b40      	subs	r0, r0, r5
 8005450:	6060      	str	r0, [r4, #4]
 8005452:	6863      	ldr	r3, [r4, #4]
 8005454:	6123      	str	r3, [r4, #16]
 8005456:	2300      	movs	r3, #0
 8005458:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800545c:	e7aa      	b.n	80053b4 <_printf_i+0x14c>
 800545e:	6923      	ldr	r3, [r4, #16]
 8005460:	462a      	mov	r2, r5
 8005462:	4649      	mov	r1, r9
 8005464:	4640      	mov	r0, r8
 8005466:	47d0      	blx	sl
 8005468:	3001      	adds	r0, #1
 800546a:	d0ad      	beq.n	80053c8 <_printf_i+0x160>
 800546c:	6823      	ldr	r3, [r4, #0]
 800546e:	079b      	lsls	r3, r3, #30
 8005470:	d413      	bmi.n	800549a <_printf_i+0x232>
 8005472:	68e0      	ldr	r0, [r4, #12]
 8005474:	9b03      	ldr	r3, [sp, #12]
 8005476:	4298      	cmp	r0, r3
 8005478:	bfb8      	it	lt
 800547a:	4618      	movlt	r0, r3
 800547c:	e7a6      	b.n	80053cc <_printf_i+0x164>
 800547e:	2301      	movs	r3, #1
 8005480:	4632      	mov	r2, r6
 8005482:	4649      	mov	r1, r9
 8005484:	4640      	mov	r0, r8
 8005486:	47d0      	blx	sl
 8005488:	3001      	adds	r0, #1
 800548a:	d09d      	beq.n	80053c8 <_printf_i+0x160>
 800548c:	3501      	adds	r5, #1
 800548e:	68e3      	ldr	r3, [r4, #12]
 8005490:	9903      	ldr	r1, [sp, #12]
 8005492:	1a5b      	subs	r3, r3, r1
 8005494:	42ab      	cmp	r3, r5
 8005496:	dcf2      	bgt.n	800547e <_printf_i+0x216>
 8005498:	e7eb      	b.n	8005472 <_printf_i+0x20a>
 800549a:	2500      	movs	r5, #0
 800549c:	f104 0619 	add.w	r6, r4, #25
 80054a0:	e7f5      	b.n	800548e <_printf_i+0x226>
 80054a2:	bf00      	nop
 80054a4:	08005cbe 	.word	0x08005cbe
 80054a8:	08005ccf 	.word	0x08005ccf

080054ac <_scanf_chars>:
 80054ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054b0:	4615      	mov	r5, r2
 80054b2:	688a      	ldr	r2, [r1, #8]
 80054b4:	4680      	mov	r8, r0
 80054b6:	460c      	mov	r4, r1
 80054b8:	b932      	cbnz	r2, 80054c8 <_scanf_chars+0x1c>
 80054ba:	698a      	ldr	r2, [r1, #24]
 80054bc:	2a00      	cmp	r2, #0
 80054be:	bf0c      	ite	eq
 80054c0:	2201      	moveq	r2, #1
 80054c2:	f04f 32ff 	movne.w	r2, #4294967295
 80054c6:	608a      	str	r2, [r1, #8]
 80054c8:	6822      	ldr	r2, [r4, #0]
 80054ca:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800555c <_scanf_chars+0xb0>
 80054ce:	06d1      	lsls	r1, r2, #27
 80054d0:	bf5f      	itttt	pl
 80054d2:	681a      	ldrpl	r2, [r3, #0]
 80054d4:	1d11      	addpl	r1, r2, #4
 80054d6:	6019      	strpl	r1, [r3, #0]
 80054d8:	6816      	ldrpl	r6, [r2, #0]
 80054da:	2700      	movs	r7, #0
 80054dc:	69a0      	ldr	r0, [r4, #24]
 80054de:	b188      	cbz	r0, 8005504 <_scanf_chars+0x58>
 80054e0:	2801      	cmp	r0, #1
 80054e2:	d107      	bne.n	80054f4 <_scanf_chars+0x48>
 80054e4:	682a      	ldr	r2, [r5, #0]
 80054e6:	7811      	ldrb	r1, [r2, #0]
 80054e8:	6962      	ldr	r2, [r4, #20]
 80054ea:	5c52      	ldrb	r2, [r2, r1]
 80054ec:	b952      	cbnz	r2, 8005504 <_scanf_chars+0x58>
 80054ee:	2f00      	cmp	r7, #0
 80054f0:	d031      	beq.n	8005556 <_scanf_chars+0xaa>
 80054f2:	e022      	b.n	800553a <_scanf_chars+0x8e>
 80054f4:	2802      	cmp	r0, #2
 80054f6:	d120      	bne.n	800553a <_scanf_chars+0x8e>
 80054f8:	682b      	ldr	r3, [r5, #0]
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	f819 3003 	ldrb.w	r3, [r9, r3]
 8005500:	071b      	lsls	r3, r3, #28
 8005502:	d41a      	bmi.n	800553a <_scanf_chars+0x8e>
 8005504:	6823      	ldr	r3, [r4, #0]
 8005506:	06da      	lsls	r2, r3, #27
 8005508:	bf5e      	ittt	pl
 800550a:	682b      	ldrpl	r3, [r5, #0]
 800550c:	781b      	ldrbpl	r3, [r3, #0]
 800550e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8005512:	682a      	ldr	r2, [r5, #0]
 8005514:	686b      	ldr	r3, [r5, #4]
 8005516:	3201      	adds	r2, #1
 8005518:	602a      	str	r2, [r5, #0]
 800551a:	68a2      	ldr	r2, [r4, #8]
 800551c:	3b01      	subs	r3, #1
 800551e:	3a01      	subs	r2, #1
 8005520:	606b      	str	r3, [r5, #4]
 8005522:	3701      	adds	r7, #1
 8005524:	60a2      	str	r2, [r4, #8]
 8005526:	b142      	cbz	r2, 800553a <_scanf_chars+0x8e>
 8005528:	2b00      	cmp	r3, #0
 800552a:	dcd7      	bgt.n	80054dc <_scanf_chars+0x30>
 800552c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005530:	4629      	mov	r1, r5
 8005532:	4640      	mov	r0, r8
 8005534:	4798      	blx	r3
 8005536:	2800      	cmp	r0, #0
 8005538:	d0d0      	beq.n	80054dc <_scanf_chars+0x30>
 800553a:	6823      	ldr	r3, [r4, #0]
 800553c:	f013 0310 	ands.w	r3, r3, #16
 8005540:	d105      	bne.n	800554e <_scanf_chars+0xa2>
 8005542:	68e2      	ldr	r2, [r4, #12]
 8005544:	3201      	adds	r2, #1
 8005546:	60e2      	str	r2, [r4, #12]
 8005548:	69a2      	ldr	r2, [r4, #24]
 800554a:	b102      	cbz	r2, 800554e <_scanf_chars+0xa2>
 800554c:	7033      	strb	r3, [r6, #0]
 800554e:	6923      	ldr	r3, [r4, #16]
 8005550:	443b      	add	r3, r7
 8005552:	6123      	str	r3, [r4, #16]
 8005554:	2000      	movs	r0, #0
 8005556:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800555a:	bf00      	nop
 800555c:	08005bad 	.word	0x08005bad

08005560 <_scanf_i>:
 8005560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005564:	4698      	mov	r8, r3
 8005566:	4b74      	ldr	r3, [pc, #464]	; (8005738 <_scanf_i+0x1d8>)
 8005568:	460c      	mov	r4, r1
 800556a:	4682      	mov	sl, r0
 800556c:	4616      	mov	r6, r2
 800556e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005572:	b087      	sub	sp, #28
 8005574:	ab03      	add	r3, sp, #12
 8005576:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800557a:	4b70      	ldr	r3, [pc, #448]	; (800573c <_scanf_i+0x1dc>)
 800557c:	69a1      	ldr	r1, [r4, #24]
 800557e:	4a70      	ldr	r2, [pc, #448]	; (8005740 <_scanf_i+0x1e0>)
 8005580:	2903      	cmp	r1, #3
 8005582:	bf18      	it	ne
 8005584:	461a      	movne	r2, r3
 8005586:	68a3      	ldr	r3, [r4, #8]
 8005588:	9201      	str	r2, [sp, #4]
 800558a:	1e5a      	subs	r2, r3, #1
 800558c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005590:	bf88      	it	hi
 8005592:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005596:	4627      	mov	r7, r4
 8005598:	bf82      	ittt	hi
 800559a:	eb03 0905 	addhi.w	r9, r3, r5
 800559e:	f240 135d 	movwhi	r3, #349	; 0x15d
 80055a2:	60a3      	strhi	r3, [r4, #8]
 80055a4:	f857 3b1c 	ldr.w	r3, [r7], #28
 80055a8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80055ac:	bf98      	it	ls
 80055ae:	f04f 0900 	movls.w	r9, #0
 80055b2:	6023      	str	r3, [r4, #0]
 80055b4:	463d      	mov	r5, r7
 80055b6:	f04f 0b00 	mov.w	fp, #0
 80055ba:	6831      	ldr	r1, [r6, #0]
 80055bc:	ab03      	add	r3, sp, #12
 80055be:	7809      	ldrb	r1, [r1, #0]
 80055c0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80055c4:	2202      	movs	r2, #2
 80055c6:	f7fa fe0b 	bl	80001e0 <memchr>
 80055ca:	b328      	cbz	r0, 8005618 <_scanf_i+0xb8>
 80055cc:	f1bb 0f01 	cmp.w	fp, #1
 80055d0:	d159      	bne.n	8005686 <_scanf_i+0x126>
 80055d2:	6862      	ldr	r2, [r4, #4]
 80055d4:	b92a      	cbnz	r2, 80055e2 <_scanf_i+0x82>
 80055d6:	6822      	ldr	r2, [r4, #0]
 80055d8:	2308      	movs	r3, #8
 80055da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055de:	6063      	str	r3, [r4, #4]
 80055e0:	6022      	str	r2, [r4, #0]
 80055e2:	6822      	ldr	r2, [r4, #0]
 80055e4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80055e8:	6022      	str	r2, [r4, #0]
 80055ea:	68a2      	ldr	r2, [r4, #8]
 80055ec:	1e51      	subs	r1, r2, #1
 80055ee:	60a1      	str	r1, [r4, #8]
 80055f0:	b192      	cbz	r2, 8005618 <_scanf_i+0xb8>
 80055f2:	6832      	ldr	r2, [r6, #0]
 80055f4:	1c51      	adds	r1, r2, #1
 80055f6:	6031      	str	r1, [r6, #0]
 80055f8:	7812      	ldrb	r2, [r2, #0]
 80055fa:	f805 2b01 	strb.w	r2, [r5], #1
 80055fe:	6872      	ldr	r2, [r6, #4]
 8005600:	3a01      	subs	r2, #1
 8005602:	2a00      	cmp	r2, #0
 8005604:	6072      	str	r2, [r6, #4]
 8005606:	dc07      	bgt.n	8005618 <_scanf_i+0xb8>
 8005608:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800560c:	4631      	mov	r1, r6
 800560e:	4650      	mov	r0, sl
 8005610:	4790      	blx	r2
 8005612:	2800      	cmp	r0, #0
 8005614:	f040 8085 	bne.w	8005722 <_scanf_i+0x1c2>
 8005618:	f10b 0b01 	add.w	fp, fp, #1
 800561c:	f1bb 0f03 	cmp.w	fp, #3
 8005620:	d1cb      	bne.n	80055ba <_scanf_i+0x5a>
 8005622:	6863      	ldr	r3, [r4, #4]
 8005624:	b90b      	cbnz	r3, 800562a <_scanf_i+0xca>
 8005626:	230a      	movs	r3, #10
 8005628:	6063      	str	r3, [r4, #4]
 800562a:	6863      	ldr	r3, [r4, #4]
 800562c:	4945      	ldr	r1, [pc, #276]	; (8005744 <_scanf_i+0x1e4>)
 800562e:	6960      	ldr	r0, [r4, #20]
 8005630:	1ac9      	subs	r1, r1, r3
 8005632:	f000 f889 	bl	8005748 <__sccl>
 8005636:	f04f 0b00 	mov.w	fp, #0
 800563a:	68a3      	ldr	r3, [r4, #8]
 800563c:	6822      	ldr	r2, [r4, #0]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d03d      	beq.n	80056be <_scanf_i+0x15e>
 8005642:	6831      	ldr	r1, [r6, #0]
 8005644:	6960      	ldr	r0, [r4, #20]
 8005646:	f891 c000 	ldrb.w	ip, [r1]
 800564a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800564e:	2800      	cmp	r0, #0
 8005650:	d035      	beq.n	80056be <_scanf_i+0x15e>
 8005652:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8005656:	d124      	bne.n	80056a2 <_scanf_i+0x142>
 8005658:	0510      	lsls	r0, r2, #20
 800565a:	d522      	bpl.n	80056a2 <_scanf_i+0x142>
 800565c:	f10b 0b01 	add.w	fp, fp, #1
 8005660:	f1b9 0f00 	cmp.w	r9, #0
 8005664:	d003      	beq.n	800566e <_scanf_i+0x10e>
 8005666:	3301      	adds	r3, #1
 8005668:	f109 39ff 	add.w	r9, r9, #4294967295
 800566c:	60a3      	str	r3, [r4, #8]
 800566e:	6873      	ldr	r3, [r6, #4]
 8005670:	3b01      	subs	r3, #1
 8005672:	2b00      	cmp	r3, #0
 8005674:	6073      	str	r3, [r6, #4]
 8005676:	dd1b      	ble.n	80056b0 <_scanf_i+0x150>
 8005678:	6833      	ldr	r3, [r6, #0]
 800567a:	3301      	adds	r3, #1
 800567c:	6033      	str	r3, [r6, #0]
 800567e:	68a3      	ldr	r3, [r4, #8]
 8005680:	3b01      	subs	r3, #1
 8005682:	60a3      	str	r3, [r4, #8]
 8005684:	e7d9      	b.n	800563a <_scanf_i+0xda>
 8005686:	f1bb 0f02 	cmp.w	fp, #2
 800568a:	d1ae      	bne.n	80055ea <_scanf_i+0x8a>
 800568c:	6822      	ldr	r2, [r4, #0]
 800568e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8005692:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8005696:	d1bf      	bne.n	8005618 <_scanf_i+0xb8>
 8005698:	2310      	movs	r3, #16
 800569a:	6063      	str	r3, [r4, #4]
 800569c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056a0:	e7a2      	b.n	80055e8 <_scanf_i+0x88>
 80056a2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80056a6:	6022      	str	r2, [r4, #0]
 80056a8:	780b      	ldrb	r3, [r1, #0]
 80056aa:	f805 3b01 	strb.w	r3, [r5], #1
 80056ae:	e7de      	b.n	800566e <_scanf_i+0x10e>
 80056b0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80056b4:	4631      	mov	r1, r6
 80056b6:	4650      	mov	r0, sl
 80056b8:	4798      	blx	r3
 80056ba:	2800      	cmp	r0, #0
 80056bc:	d0df      	beq.n	800567e <_scanf_i+0x11e>
 80056be:	6823      	ldr	r3, [r4, #0]
 80056c0:	05d9      	lsls	r1, r3, #23
 80056c2:	d50d      	bpl.n	80056e0 <_scanf_i+0x180>
 80056c4:	42bd      	cmp	r5, r7
 80056c6:	d909      	bls.n	80056dc <_scanf_i+0x17c>
 80056c8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80056cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80056d0:	4632      	mov	r2, r6
 80056d2:	4650      	mov	r0, sl
 80056d4:	4798      	blx	r3
 80056d6:	f105 39ff 	add.w	r9, r5, #4294967295
 80056da:	464d      	mov	r5, r9
 80056dc:	42bd      	cmp	r5, r7
 80056de:	d028      	beq.n	8005732 <_scanf_i+0x1d2>
 80056e0:	6822      	ldr	r2, [r4, #0]
 80056e2:	f012 0210 	ands.w	r2, r2, #16
 80056e6:	d113      	bne.n	8005710 <_scanf_i+0x1b0>
 80056e8:	702a      	strb	r2, [r5, #0]
 80056ea:	6863      	ldr	r3, [r4, #4]
 80056ec:	9e01      	ldr	r6, [sp, #4]
 80056ee:	4639      	mov	r1, r7
 80056f0:	4650      	mov	r0, sl
 80056f2:	47b0      	blx	r6
 80056f4:	f8d8 3000 	ldr.w	r3, [r8]
 80056f8:	6821      	ldr	r1, [r4, #0]
 80056fa:	1d1a      	adds	r2, r3, #4
 80056fc:	f8c8 2000 	str.w	r2, [r8]
 8005700:	f011 0f20 	tst.w	r1, #32
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	d00f      	beq.n	8005728 <_scanf_i+0x1c8>
 8005708:	6018      	str	r0, [r3, #0]
 800570a:	68e3      	ldr	r3, [r4, #12]
 800570c:	3301      	adds	r3, #1
 800570e:	60e3      	str	r3, [r4, #12]
 8005710:	6923      	ldr	r3, [r4, #16]
 8005712:	1bed      	subs	r5, r5, r7
 8005714:	445d      	add	r5, fp
 8005716:	442b      	add	r3, r5
 8005718:	6123      	str	r3, [r4, #16]
 800571a:	2000      	movs	r0, #0
 800571c:	b007      	add	sp, #28
 800571e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005722:	f04f 0b00 	mov.w	fp, #0
 8005726:	e7ca      	b.n	80056be <_scanf_i+0x15e>
 8005728:	07ca      	lsls	r2, r1, #31
 800572a:	bf4c      	ite	mi
 800572c:	8018      	strhmi	r0, [r3, #0]
 800572e:	6018      	strpl	r0, [r3, #0]
 8005730:	e7eb      	b.n	800570a <_scanf_i+0x1aa>
 8005732:	2001      	movs	r0, #1
 8005734:	e7f2      	b.n	800571c <_scanf_i+0x1bc>
 8005736:	bf00      	nop
 8005738:	08005b70 	.word	0x08005b70
 800573c:	08005aed 	.word	0x08005aed
 8005740:	08005a05 	.word	0x08005a05
 8005744:	08005cf0 	.word	0x08005cf0

08005748 <__sccl>:
 8005748:	b570      	push	{r4, r5, r6, lr}
 800574a:	780b      	ldrb	r3, [r1, #0]
 800574c:	4604      	mov	r4, r0
 800574e:	2b5e      	cmp	r3, #94	; 0x5e
 8005750:	bf0b      	itete	eq
 8005752:	784b      	ldrbeq	r3, [r1, #1]
 8005754:	1c4a      	addne	r2, r1, #1
 8005756:	1c8a      	addeq	r2, r1, #2
 8005758:	2100      	movne	r1, #0
 800575a:	bf08      	it	eq
 800575c:	2101      	moveq	r1, #1
 800575e:	3801      	subs	r0, #1
 8005760:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8005764:	f800 1f01 	strb.w	r1, [r0, #1]!
 8005768:	42a8      	cmp	r0, r5
 800576a:	d1fb      	bne.n	8005764 <__sccl+0x1c>
 800576c:	b90b      	cbnz	r3, 8005772 <__sccl+0x2a>
 800576e:	1e50      	subs	r0, r2, #1
 8005770:	bd70      	pop	{r4, r5, r6, pc}
 8005772:	f081 0101 	eor.w	r1, r1, #1
 8005776:	54e1      	strb	r1, [r4, r3]
 8005778:	4610      	mov	r0, r2
 800577a:	4602      	mov	r2, r0
 800577c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005780:	2d2d      	cmp	r5, #45	; 0x2d
 8005782:	d005      	beq.n	8005790 <__sccl+0x48>
 8005784:	2d5d      	cmp	r5, #93	; 0x5d
 8005786:	d016      	beq.n	80057b6 <__sccl+0x6e>
 8005788:	2d00      	cmp	r5, #0
 800578a:	d0f1      	beq.n	8005770 <__sccl+0x28>
 800578c:	462b      	mov	r3, r5
 800578e:	e7f2      	b.n	8005776 <__sccl+0x2e>
 8005790:	7846      	ldrb	r6, [r0, #1]
 8005792:	2e5d      	cmp	r6, #93	; 0x5d
 8005794:	d0fa      	beq.n	800578c <__sccl+0x44>
 8005796:	42b3      	cmp	r3, r6
 8005798:	dcf8      	bgt.n	800578c <__sccl+0x44>
 800579a:	3002      	adds	r0, #2
 800579c:	461a      	mov	r2, r3
 800579e:	3201      	adds	r2, #1
 80057a0:	4296      	cmp	r6, r2
 80057a2:	54a1      	strb	r1, [r4, r2]
 80057a4:	dcfb      	bgt.n	800579e <__sccl+0x56>
 80057a6:	1af2      	subs	r2, r6, r3
 80057a8:	3a01      	subs	r2, #1
 80057aa:	1c5d      	adds	r5, r3, #1
 80057ac:	42b3      	cmp	r3, r6
 80057ae:	bfa8      	it	ge
 80057b0:	2200      	movge	r2, #0
 80057b2:	18ab      	adds	r3, r5, r2
 80057b4:	e7e1      	b.n	800577a <__sccl+0x32>
 80057b6:	4610      	mov	r0, r2
 80057b8:	e7da      	b.n	8005770 <__sccl+0x28>

080057ba <__submore>:
 80057ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057be:	460c      	mov	r4, r1
 80057c0:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80057c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80057c6:	4299      	cmp	r1, r3
 80057c8:	d11d      	bne.n	8005806 <__submore+0x4c>
 80057ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80057ce:	f7ff f927 	bl	8004a20 <_malloc_r>
 80057d2:	b918      	cbnz	r0, 80057dc <__submore+0x22>
 80057d4:	f04f 30ff 	mov.w	r0, #4294967295
 80057d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057e0:	63a3      	str	r3, [r4, #56]	; 0x38
 80057e2:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80057e6:	6360      	str	r0, [r4, #52]	; 0x34
 80057e8:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80057ec:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80057f0:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80057f4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80057f8:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80057fc:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8005800:	6020      	str	r0, [r4, #0]
 8005802:	2000      	movs	r0, #0
 8005804:	e7e8      	b.n	80057d8 <__submore+0x1e>
 8005806:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8005808:	0077      	lsls	r7, r6, #1
 800580a:	463a      	mov	r2, r7
 800580c:	f000 f848 	bl	80058a0 <_realloc_r>
 8005810:	4605      	mov	r5, r0
 8005812:	2800      	cmp	r0, #0
 8005814:	d0de      	beq.n	80057d4 <__submore+0x1a>
 8005816:	eb00 0806 	add.w	r8, r0, r6
 800581a:	4601      	mov	r1, r0
 800581c:	4632      	mov	r2, r6
 800581e:	4640      	mov	r0, r8
 8005820:	f000 f830 	bl	8005884 <memcpy>
 8005824:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8005828:	f8c4 8000 	str.w	r8, [r4]
 800582c:	e7e9      	b.n	8005802 <__submore+0x48>

0800582e <memmove>:
 800582e:	4288      	cmp	r0, r1
 8005830:	b510      	push	{r4, lr}
 8005832:	eb01 0402 	add.w	r4, r1, r2
 8005836:	d902      	bls.n	800583e <memmove+0x10>
 8005838:	4284      	cmp	r4, r0
 800583a:	4623      	mov	r3, r4
 800583c:	d807      	bhi.n	800584e <memmove+0x20>
 800583e:	1e43      	subs	r3, r0, #1
 8005840:	42a1      	cmp	r1, r4
 8005842:	d008      	beq.n	8005856 <memmove+0x28>
 8005844:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005848:	f803 2f01 	strb.w	r2, [r3, #1]!
 800584c:	e7f8      	b.n	8005840 <memmove+0x12>
 800584e:	4402      	add	r2, r0
 8005850:	4601      	mov	r1, r0
 8005852:	428a      	cmp	r2, r1
 8005854:	d100      	bne.n	8005858 <memmove+0x2a>
 8005856:	bd10      	pop	{r4, pc}
 8005858:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800585c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005860:	e7f7      	b.n	8005852 <memmove+0x24>
	...

08005864 <_sbrk_r>:
 8005864:	b538      	push	{r3, r4, r5, lr}
 8005866:	4d06      	ldr	r5, [pc, #24]	; (8005880 <_sbrk_r+0x1c>)
 8005868:	2300      	movs	r3, #0
 800586a:	4604      	mov	r4, r0
 800586c:	4608      	mov	r0, r1
 800586e:	602b      	str	r3, [r5, #0]
 8005870:	f7fb fdea 	bl	8001448 <_sbrk>
 8005874:	1c43      	adds	r3, r0, #1
 8005876:	d102      	bne.n	800587e <_sbrk_r+0x1a>
 8005878:	682b      	ldr	r3, [r5, #0]
 800587a:	b103      	cbz	r3, 800587e <_sbrk_r+0x1a>
 800587c:	6023      	str	r3, [r4, #0]
 800587e:	bd38      	pop	{r3, r4, r5, pc}
 8005880:	20000edc 	.word	0x20000edc

08005884 <memcpy>:
 8005884:	440a      	add	r2, r1
 8005886:	4291      	cmp	r1, r2
 8005888:	f100 33ff 	add.w	r3, r0, #4294967295
 800588c:	d100      	bne.n	8005890 <memcpy+0xc>
 800588e:	4770      	bx	lr
 8005890:	b510      	push	{r4, lr}
 8005892:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005896:	f803 4f01 	strb.w	r4, [r3, #1]!
 800589a:	4291      	cmp	r1, r2
 800589c:	d1f9      	bne.n	8005892 <memcpy+0xe>
 800589e:	bd10      	pop	{r4, pc}

080058a0 <_realloc_r>:
 80058a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058a4:	4680      	mov	r8, r0
 80058a6:	4614      	mov	r4, r2
 80058a8:	460e      	mov	r6, r1
 80058aa:	b921      	cbnz	r1, 80058b6 <_realloc_r+0x16>
 80058ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80058b0:	4611      	mov	r1, r2
 80058b2:	f7ff b8b5 	b.w	8004a20 <_malloc_r>
 80058b6:	b92a      	cbnz	r2, 80058c4 <_realloc_r+0x24>
 80058b8:	f7ff f846 	bl	8004948 <_free_r>
 80058bc:	4625      	mov	r5, r4
 80058be:	4628      	mov	r0, r5
 80058c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058c4:	f000 f914 	bl	8005af0 <_malloc_usable_size_r>
 80058c8:	4284      	cmp	r4, r0
 80058ca:	4607      	mov	r7, r0
 80058cc:	d802      	bhi.n	80058d4 <_realloc_r+0x34>
 80058ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80058d2:	d812      	bhi.n	80058fa <_realloc_r+0x5a>
 80058d4:	4621      	mov	r1, r4
 80058d6:	4640      	mov	r0, r8
 80058d8:	f7ff f8a2 	bl	8004a20 <_malloc_r>
 80058dc:	4605      	mov	r5, r0
 80058de:	2800      	cmp	r0, #0
 80058e0:	d0ed      	beq.n	80058be <_realloc_r+0x1e>
 80058e2:	42bc      	cmp	r4, r7
 80058e4:	4622      	mov	r2, r4
 80058e6:	4631      	mov	r1, r6
 80058e8:	bf28      	it	cs
 80058ea:	463a      	movcs	r2, r7
 80058ec:	f7ff ffca 	bl	8005884 <memcpy>
 80058f0:	4631      	mov	r1, r6
 80058f2:	4640      	mov	r0, r8
 80058f4:	f7ff f828 	bl	8004948 <_free_r>
 80058f8:	e7e1      	b.n	80058be <_realloc_r+0x1e>
 80058fa:	4635      	mov	r5, r6
 80058fc:	e7df      	b.n	80058be <_realloc_r+0x1e>
	...

08005900 <_strtol_l.constprop.0>:
 8005900:	2b01      	cmp	r3, #1
 8005902:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005906:	d001      	beq.n	800590c <_strtol_l.constprop.0+0xc>
 8005908:	2b24      	cmp	r3, #36	; 0x24
 800590a:	d906      	bls.n	800591a <_strtol_l.constprop.0+0x1a>
 800590c:	f7fe ffe8 	bl	80048e0 <__errno>
 8005910:	2316      	movs	r3, #22
 8005912:	6003      	str	r3, [r0, #0]
 8005914:	2000      	movs	r0, #0
 8005916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800591a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005a00 <_strtol_l.constprop.0+0x100>
 800591e:	460d      	mov	r5, r1
 8005920:	462e      	mov	r6, r5
 8005922:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005926:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800592a:	f017 0708 	ands.w	r7, r7, #8
 800592e:	d1f7      	bne.n	8005920 <_strtol_l.constprop.0+0x20>
 8005930:	2c2d      	cmp	r4, #45	; 0x2d
 8005932:	d132      	bne.n	800599a <_strtol_l.constprop.0+0x9a>
 8005934:	782c      	ldrb	r4, [r5, #0]
 8005936:	2701      	movs	r7, #1
 8005938:	1cb5      	adds	r5, r6, #2
 800593a:	2b00      	cmp	r3, #0
 800593c:	d05b      	beq.n	80059f6 <_strtol_l.constprop.0+0xf6>
 800593e:	2b10      	cmp	r3, #16
 8005940:	d109      	bne.n	8005956 <_strtol_l.constprop.0+0x56>
 8005942:	2c30      	cmp	r4, #48	; 0x30
 8005944:	d107      	bne.n	8005956 <_strtol_l.constprop.0+0x56>
 8005946:	782c      	ldrb	r4, [r5, #0]
 8005948:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800594c:	2c58      	cmp	r4, #88	; 0x58
 800594e:	d14d      	bne.n	80059ec <_strtol_l.constprop.0+0xec>
 8005950:	786c      	ldrb	r4, [r5, #1]
 8005952:	2310      	movs	r3, #16
 8005954:	3502      	adds	r5, #2
 8005956:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800595a:	f108 38ff 	add.w	r8, r8, #4294967295
 800595e:	f04f 0e00 	mov.w	lr, #0
 8005962:	fbb8 f9f3 	udiv	r9, r8, r3
 8005966:	4676      	mov	r6, lr
 8005968:	fb03 8a19 	mls	sl, r3, r9, r8
 800596c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005970:	f1bc 0f09 	cmp.w	ip, #9
 8005974:	d816      	bhi.n	80059a4 <_strtol_l.constprop.0+0xa4>
 8005976:	4664      	mov	r4, ip
 8005978:	42a3      	cmp	r3, r4
 800597a:	dd24      	ble.n	80059c6 <_strtol_l.constprop.0+0xc6>
 800597c:	f1be 3fff 	cmp.w	lr, #4294967295
 8005980:	d008      	beq.n	8005994 <_strtol_l.constprop.0+0x94>
 8005982:	45b1      	cmp	r9, r6
 8005984:	d31c      	bcc.n	80059c0 <_strtol_l.constprop.0+0xc0>
 8005986:	d101      	bne.n	800598c <_strtol_l.constprop.0+0x8c>
 8005988:	45a2      	cmp	sl, r4
 800598a:	db19      	blt.n	80059c0 <_strtol_l.constprop.0+0xc0>
 800598c:	fb06 4603 	mla	r6, r6, r3, r4
 8005990:	f04f 0e01 	mov.w	lr, #1
 8005994:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005998:	e7e8      	b.n	800596c <_strtol_l.constprop.0+0x6c>
 800599a:	2c2b      	cmp	r4, #43	; 0x2b
 800599c:	bf04      	itt	eq
 800599e:	782c      	ldrbeq	r4, [r5, #0]
 80059a0:	1cb5      	addeq	r5, r6, #2
 80059a2:	e7ca      	b.n	800593a <_strtol_l.constprop.0+0x3a>
 80059a4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80059a8:	f1bc 0f19 	cmp.w	ip, #25
 80059ac:	d801      	bhi.n	80059b2 <_strtol_l.constprop.0+0xb2>
 80059ae:	3c37      	subs	r4, #55	; 0x37
 80059b0:	e7e2      	b.n	8005978 <_strtol_l.constprop.0+0x78>
 80059b2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80059b6:	f1bc 0f19 	cmp.w	ip, #25
 80059ba:	d804      	bhi.n	80059c6 <_strtol_l.constprop.0+0xc6>
 80059bc:	3c57      	subs	r4, #87	; 0x57
 80059be:	e7db      	b.n	8005978 <_strtol_l.constprop.0+0x78>
 80059c0:	f04f 3eff 	mov.w	lr, #4294967295
 80059c4:	e7e6      	b.n	8005994 <_strtol_l.constprop.0+0x94>
 80059c6:	f1be 3fff 	cmp.w	lr, #4294967295
 80059ca:	d105      	bne.n	80059d8 <_strtol_l.constprop.0+0xd8>
 80059cc:	2322      	movs	r3, #34	; 0x22
 80059ce:	6003      	str	r3, [r0, #0]
 80059d0:	4646      	mov	r6, r8
 80059d2:	b942      	cbnz	r2, 80059e6 <_strtol_l.constprop.0+0xe6>
 80059d4:	4630      	mov	r0, r6
 80059d6:	e79e      	b.n	8005916 <_strtol_l.constprop.0+0x16>
 80059d8:	b107      	cbz	r7, 80059dc <_strtol_l.constprop.0+0xdc>
 80059da:	4276      	negs	r6, r6
 80059dc:	2a00      	cmp	r2, #0
 80059de:	d0f9      	beq.n	80059d4 <_strtol_l.constprop.0+0xd4>
 80059e0:	f1be 0f00 	cmp.w	lr, #0
 80059e4:	d000      	beq.n	80059e8 <_strtol_l.constprop.0+0xe8>
 80059e6:	1e69      	subs	r1, r5, #1
 80059e8:	6011      	str	r1, [r2, #0]
 80059ea:	e7f3      	b.n	80059d4 <_strtol_l.constprop.0+0xd4>
 80059ec:	2430      	movs	r4, #48	; 0x30
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d1b1      	bne.n	8005956 <_strtol_l.constprop.0+0x56>
 80059f2:	2308      	movs	r3, #8
 80059f4:	e7af      	b.n	8005956 <_strtol_l.constprop.0+0x56>
 80059f6:	2c30      	cmp	r4, #48	; 0x30
 80059f8:	d0a5      	beq.n	8005946 <_strtol_l.constprop.0+0x46>
 80059fa:	230a      	movs	r3, #10
 80059fc:	e7ab      	b.n	8005956 <_strtol_l.constprop.0+0x56>
 80059fe:	bf00      	nop
 8005a00:	08005bad 	.word	0x08005bad

08005a04 <_strtol_r>:
 8005a04:	f7ff bf7c 	b.w	8005900 <_strtol_l.constprop.0>

08005a08 <_strtoul_l.constprop.0>:
 8005a08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005a0c:	4f36      	ldr	r7, [pc, #216]	; (8005ae8 <_strtoul_l.constprop.0+0xe0>)
 8005a0e:	4686      	mov	lr, r0
 8005a10:	460d      	mov	r5, r1
 8005a12:	4628      	mov	r0, r5
 8005a14:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005a18:	5d3e      	ldrb	r6, [r7, r4]
 8005a1a:	f016 0608 	ands.w	r6, r6, #8
 8005a1e:	d1f8      	bne.n	8005a12 <_strtoul_l.constprop.0+0xa>
 8005a20:	2c2d      	cmp	r4, #45	; 0x2d
 8005a22:	d130      	bne.n	8005a86 <_strtoul_l.constprop.0+0x7e>
 8005a24:	782c      	ldrb	r4, [r5, #0]
 8005a26:	2601      	movs	r6, #1
 8005a28:	1c85      	adds	r5, r0, #2
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d057      	beq.n	8005ade <_strtoul_l.constprop.0+0xd6>
 8005a2e:	2b10      	cmp	r3, #16
 8005a30:	d109      	bne.n	8005a46 <_strtoul_l.constprop.0+0x3e>
 8005a32:	2c30      	cmp	r4, #48	; 0x30
 8005a34:	d107      	bne.n	8005a46 <_strtoul_l.constprop.0+0x3e>
 8005a36:	7828      	ldrb	r0, [r5, #0]
 8005a38:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8005a3c:	2858      	cmp	r0, #88	; 0x58
 8005a3e:	d149      	bne.n	8005ad4 <_strtoul_l.constprop.0+0xcc>
 8005a40:	786c      	ldrb	r4, [r5, #1]
 8005a42:	2310      	movs	r3, #16
 8005a44:	3502      	adds	r5, #2
 8005a46:	f04f 38ff 	mov.w	r8, #4294967295
 8005a4a:	2700      	movs	r7, #0
 8005a4c:	fbb8 f8f3 	udiv	r8, r8, r3
 8005a50:	fb03 f908 	mul.w	r9, r3, r8
 8005a54:	ea6f 0909 	mvn.w	r9, r9
 8005a58:	4638      	mov	r0, r7
 8005a5a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005a5e:	f1bc 0f09 	cmp.w	ip, #9
 8005a62:	d815      	bhi.n	8005a90 <_strtoul_l.constprop.0+0x88>
 8005a64:	4664      	mov	r4, ip
 8005a66:	42a3      	cmp	r3, r4
 8005a68:	dd23      	ble.n	8005ab2 <_strtoul_l.constprop.0+0xaa>
 8005a6a:	f1b7 3fff 	cmp.w	r7, #4294967295
 8005a6e:	d007      	beq.n	8005a80 <_strtoul_l.constprop.0+0x78>
 8005a70:	4580      	cmp	r8, r0
 8005a72:	d31b      	bcc.n	8005aac <_strtoul_l.constprop.0+0xa4>
 8005a74:	d101      	bne.n	8005a7a <_strtoul_l.constprop.0+0x72>
 8005a76:	45a1      	cmp	r9, r4
 8005a78:	db18      	blt.n	8005aac <_strtoul_l.constprop.0+0xa4>
 8005a7a:	fb00 4003 	mla	r0, r0, r3, r4
 8005a7e:	2701      	movs	r7, #1
 8005a80:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005a84:	e7e9      	b.n	8005a5a <_strtoul_l.constprop.0+0x52>
 8005a86:	2c2b      	cmp	r4, #43	; 0x2b
 8005a88:	bf04      	itt	eq
 8005a8a:	782c      	ldrbeq	r4, [r5, #0]
 8005a8c:	1c85      	addeq	r5, r0, #2
 8005a8e:	e7cc      	b.n	8005a2a <_strtoul_l.constprop.0+0x22>
 8005a90:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8005a94:	f1bc 0f19 	cmp.w	ip, #25
 8005a98:	d801      	bhi.n	8005a9e <_strtoul_l.constprop.0+0x96>
 8005a9a:	3c37      	subs	r4, #55	; 0x37
 8005a9c:	e7e3      	b.n	8005a66 <_strtoul_l.constprop.0+0x5e>
 8005a9e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8005aa2:	f1bc 0f19 	cmp.w	ip, #25
 8005aa6:	d804      	bhi.n	8005ab2 <_strtoul_l.constprop.0+0xaa>
 8005aa8:	3c57      	subs	r4, #87	; 0x57
 8005aaa:	e7dc      	b.n	8005a66 <_strtoul_l.constprop.0+0x5e>
 8005aac:	f04f 37ff 	mov.w	r7, #4294967295
 8005ab0:	e7e6      	b.n	8005a80 <_strtoul_l.constprop.0+0x78>
 8005ab2:	1c7b      	adds	r3, r7, #1
 8005ab4:	d106      	bne.n	8005ac4 <_strtoul_l.constprop.0+0xbc>
 8005ab6:	2322      	movs	r3, #34	; 0x22
 8005ab8:	f8ce 3000 	str.w	r3, [lr]
 8005abc:	4638      	mov	r0, r7
 8005abe:	b932      	cbnz	r2, 8005ace <_strtoul_l.constprop.0+0xc6>
 8005ac0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005ac4:	b106      	cbz	r6, 8005ac8 <_strtoul_l.constprop.0+0xc0>
 8005ac6:	4240      	negs	r0, r0
 8005ac8:	2a00      	cmp	r2, #0
 8005aca:	d0f9      	beq.n	8005ac0 <_strtoul_l.constprop.0+0xb8>
 8005acc:	b107      	cbz	r7, 8005ad0 <_strtoul_l.constprop.0+0xc8>
 8005ace:	1e69      	subs	r1, r5, #1
 8005ad0:	6011      	str	r1, [r2, #0]
 8005ad2:	e7f5      	b.n	8005ac0 <_strtoul_l.constprop.0+0xb8>
 8005ad4:	2430      	movs	r4, #48	; 0x30
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d1b5      	bne.n	8005a46 <_strtoul_l.constprop.0+0x3e>
 8005ada:	2308      	movs	r3, #8
 8005adc:	e7b3      	b.n	8005a46 <_strtoul_l.constprop.0+0x3e>
 8005ade:	2c30      	cmp	r4, #48	; 0x30
 8005ae0:	d0a9      	beq.n	8005a36 <_strtoul_l.constprop.0+0x2e>
 8005ae2:	230a      	movs	r3, #10
 8005ae4:	e7af      	b.n	8005a46 <_strtoul_l.constprop.0+0x3e>
 8005ae6:	bf00      	nop
 8005ae8:	08005bad 	.word	0x08005bad

08005aec <_strtoul_r>:
 8005aec:	f7ff bf8c 	b.w	8005a08 <_strtoul_l.constprop.0>

08005af0 <_malloc_usable_size_r>:
 8005af0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005af4:	1f18      	subs	r0, r3, #4
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	bfbc      	itt	lt
 8005afa:	580b      	ldrlt	r3, [r1, r0]
 8005afc:	18c0      	addlt	r0, r0, r3
 8005afe:	4770      	bx	lr

08005b00 <_init>:
 8005b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b02:	bf00      	nop
 8005b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b06:	bc08      	pop	{r3}
 8005b08:	469e      	mov	lr, r3
 8005b0a:	4770      	bx	lr

08005b0c <_fini>:
 8005b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b0e:	bf00      	nop
 8005b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b12:	bc08      	pop	{r3}
 8005b14:	469e      	mov	lr, r3
 8005b16:	4770      	bx	lr
