
FLEX_RESISTOR_SYS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000056c  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000700  08000708  00001708  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000700  08000700  00001708  2**0
                  CONTENTS
  4 .ARM          00000000  08000700  08000700  00001708  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000700  08000708  00001708  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000700  08000700  00001700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000704  08000704  00001704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001708  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001708  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00001708  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000831  00000000  00000000  00001738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000002d3  00000000  00000000  00001f69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000b8  00000000  00000000  00002240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000007f  00000000  00000000  000022f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00014f2b  00000000  00000000  00002377  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000cd5  00000000  00000000  000172a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007276d  00000000  00000000  00017f77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0008a6e4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000001e4  00000000  00000000  0008a728  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  0008a90c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080006e8 	.word	0x080006e8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080006e8 	.word	0x080006e8

080001d4 <enable_clocks>:
#include <stddef.h>



// enable the clocks for desired peripherals (GPIOA, C and E)
void enable_clocks() {
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 80001d8:	4b05      	ldr	r3, [pc, #20]	@ (80001f0 <enable_clocks+0x1c>)
 80001da:	695b      	ldr	r3, [r3, #20]
 80001dc:	4a04      	ldr	r2, [pc, #16]	@ (80001f0 <enable_clocks+0x1c>)
 80001de:	f443 1328 	orr.w	r3, r3, #2752512	@ 0x2a0000
 80001e2:	6153      	str	r3, [r2, #20]
}
 80001e4:	bf00      	nop
 80001e6:	46bd      	mov	sp, r7
 80001e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ec:	4770      	bx	lr
 80001ee:	bf00      	nop
 80001f0:	40021000 	.word	0x40021000

080001f4 <initialise_board>:

// initialise the discovery board I/O (just outputs: inputs are selected by default)
void initialise_board() {
 80001f4:	b480      	push	{r7}
 80001f6:	b083      	sub	sp, #12
 80001f8:	af00      	add	r7, sp, #0

	// get a pointer to the second half word of the MODER register (for outputs pe8-15)
	uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 80001fa:	4b06      	ldr	r3, [pc, #24]	@ (8000214 <initialise_board+0x20>)
 80001fc:	607b      	str	r3, [r7, #4]
	*led_output_registers = 0x5555;
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	f245 5255 	movw	r2, #21845	@ 0x5555
 8000204:	801a      	strh	r2, [r3, #0]
}
 8000206:	bf00      	nop
 8000208:	370c      	adds	r7, #12
 800020a:	46bd      	mov	sp, r7
 800020c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000210:	4770      	bx	lr
 8000212:	bf00      	nop
 8000214:	48001002 	.word	0x48001002

08000218 <delay_ms.0>:




	//// very simple delay loop
void delay_ms(uint32_t ms) {
 8000218:	b480      	push	{r7}
 800021a:	b085      	sub	sp, #20
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	f8c7 c000 	str.w	ip, [r7]
	   for (volatile uint32_t i = 0; i < ms * 8000; i++) {
 8000224:	2300      	movs	r3, #0
 8000226:	60fb      	str	r3, [r7, #12]
 8000228:	e002      	b.n	8000230 <delay_ms.0+0x18>
 800022a:	68fb      	ldr	r3, [r7, #12]
 800022c:	3301      	adds	r3, #1
 800022e:	60fb      	str	r3, [r7, #12]
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8000236:	fb03 f202 	mul.w	r2, r3, r2
 800023a:	68fb      	ldr	r3, [r7, #12]
 800023c:	429a      	cmp	r2, r3
 800023e:	d8f4      	bhi.n	800022a <delay_ms.0+0x12>

	    }
	}
 8000240:	bf00      	nop
 8000242:	bf00      	nop
 8000244:	3714      	adds	r7, #20
 8000246:	46bd      	mov	sp, r7
 8000248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024c:	4770      	bx	lr
	...

08000250 <ContinuousReadSingleChannelADC>:
void ContinuousReadSingleChannelADC() {
 8000250:	b580      	push	{r7, lr}
 8000252:	b084      	sub	sp, #16
 8000254:	af00      	add	r7, sp, #0
 8000256:	f107 0318 	add.w	r3, r7, #24
 800025a:	603b      	str	r3, [r7, #0]


	setup_gpio_PA3_OUTPUT();
 800025c:	f000 f8ce 	bl	80003fc <setup_gpio_PA3_OUTPUT>
	// get a pointer to the location of the LEDs
	uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 8000260:	4b61      	ldr	r3, [pc, #388]	@ (80003e8 <ContinuousReadSingleChannelADC+0x198>)
 8000262:	60bb      	str	r3, [r7, #8]

	// enable the clock for ADC1
	RCC->AHBENR |= RCC_AHBENR_ADC12EN;
 8000264:	4b61      	ldr	r3, [pc, #388]	@ (80003ec <ContinuousReadSingleChannelADC+0x19c>)
 8000266:	695b      	ldr	r3, [r3, #20]
 8000268:	4a60      	ldr	r2, [pc, #384]	@ (80003ec <ContinuousReadSingleChannelADC+0x19c>)
 800026a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800026e:	6153      	str	r3, [r2, #20]

	// set to synchronise the ADC with the clock
	ADC12_COMMON->CCR |= ADC12_CCR_CKMODE_0;
 8000270:	4b5f      	ldr	r3, [pc, #380]	@ (80003f0 <ContinuousReadSingleChannelADC+0x1a0>)
 8000272:	689b      	ldr	r3, [r3, #8]
 8000274:	4a5e      	ldr	r2, [pc, #376]	@ (80003f0 <ContinuousReadSingleChannelADC+0x1a0>)
 8000276:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800027a:	6093      	str	r3, [r2, #8]

	// ADEN must be = 0 for configuration (is the default)
	ADC1->CR &= ~ADC_CR_ADVREGEN; // clear voltage regulator enable
 800027c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000280:	689b      	ldr	r3, [r3, #8]
 8000282:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000286:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 800028a:	6093      	str	r3, [r2, #8]
	ADC1->CR |= ADC_CR_ADVREGEN_0; // set ADVREGEN TO 01
 800028c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000290:	689b      	ldr	r3, [r3, #8]
 8000292:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000296:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800029a:	6093      	str	r3, [r2, #8]
	ADC1->CR &= ~ADC_CR_ADCALDIF; // clear bit to enable Single-ended-input
 800029c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80002a0:	689b      	ldr	r3, [r3, #8]
 80002a2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80002a6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80002aa:	6093      	str	r3, [r2, #8]

	// calibrate the ADC (self calibration routine)
	ADC1->CR |= ADC_CR_ADCAL;
 80002ac:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80002b0:	689b      	ldr	r3, [r3, #8]
 80002b2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80002b6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80002ba:	6093      	str	r3, [r2, #8]
	while((ADC1->CR & ADC_CR_ADCAL) == ADC_CR_ADCAL); // Waiting for the calibration to finish
 80002bc:	bf00      	nop
 80002be:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80002c2:	689b      	ldr	r3, [r3, #8]
 80002c4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80002c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80002cc:	d0f7      	beq.n	80002be <ContinuousReadSingleChannelADC+0x6e>

	// select the channel, only one conversion so it goes in
	//  the first conversion slot (SQ1)
	//  and the L value should be 0 (L=0000 does one conversion only)
	ADC1->SQR1 = 0; // clear any existing channel requests
 80002ce:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80002d2:	2200      	movs	r2, #0
 80002d4:	631a      	str	r2, [r3, #48]	@ 0x30
	ADC1->SQR1 |= 0x02 << ADC_SQR1_SQ1_Pos; // request channel 2
 80002d6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80002da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002dc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80002e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80002e4:	6313      	str	r3, [r2, #48]	@ 0x30
	ADC1->SQR1 |= 0x00 << ADC_SQR1_L_Pos; // set the number of channels to read
 80002e6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80002ea:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80002ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002f0:	6313      	str	r3, [r2, #48]	@ 0x30

	// continuous mode
	ADC1->CFGR |= ADC_CFGR_CONT;
 80002f2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80002f6:	68db      	ldr	r3, [r3, #12]
 80002f8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80002fc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000300:	60d3      	str	r3, [r2, #12]

	// Enable ADC
	ADC1->CR |= ADC_CR_ADEN;
 8000302:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000306:	689b      	ldr	r3, [r3, #8]
 8000308:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800030c:	f043 0301 	orr.w	r3, r3, #1
 8000310:	6093      	str	r3, [r2, #8]

	while (ADC1->ISR == 0); //Wait the ADC to be ready.
 8000312:	bf00      	nop
 8000314:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	2b00      	cmp	r3, #0
 800031c:	d0fa      	beq.n	8000314 <ContinuousReadSingleChannelADC+0xc4>

	// request the process to start
	// only need once in continuous mode
	ADC1->CR |= ADC_CR_ADSTART;
 800031e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000322:	689b      	ldr	r3, [r3, #8]
 8000324:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000328:	f043 0304 	orr.w	r3, r3, #4
 800032c:	6093      	str	r3, [r2, #8]

	uint16_t value = 0;
 800032e:	2300      	movs	r3, #0
 8000330:	80fb      	strh	r3, [r7, #6]
	uint8_t scale = 0;
 8000332:	2300      	movs	r3, #0
 8000334:	73fb      	strb	r3, [r7, #15]

    /* Loop forever */
	for(;;) {

		// Wait for the end of conversion
		while(!(ADC1->ISR &= ADC_ISR_EOC));
 8000336:	bf00      	nop
 8000338:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000342:	f003 0304 	and.w	r3, r3, #4
 8000346:	6013      	str	r3, [r2, #0]
 8000348:	2b00      	cmp	r3, #0
 800034a:	d0f5      	beq.n	8000338 <ContinuousReadSingleChannelADC+0xe8>

		value = ADC1->DR;
 800034c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000352:	80fb      	strh	r3, [r7, #6]

		// read the value from ADC1->DR,
		// full range is 12 bits (0xFFF maximum)
		// divide the scale into 8 even partitions (for 8 leds)
		scale = value / (0xfff / 8);
 8000354:	88fa      	ldrh	r2, [r7, #6]
 8000356:	4b27      	ldr	r3, [pc, #156]	@ (80003f4 <ContinuousReadSingleChannelADC+0x1a4>)
 8000358:	fba3 1302 	umull	r1, r3, r3, r2
 800035c:	1ad2      	subs	r2, r2, r3
 800035e:	0852      	lsrs	r2, r2, #1
 8000360:	4413      	add	r3, r2
 8000362:	0a1b      	lsrs	r3, r3, #8
 8000364:	b29b      	uxth	r3, r3
 8000366:	73fb      	strb	r3, [r7, #15]

		if (scale > 7) {
 8000368:	7bfb      	ldrb	r3, [r7, #15]
 800036a:	2b07      	cmp	r3, #7
 800036c:	d901      	bls.n	8000372 <ContinuousReadSingleChannelADC+0x122>
			scale = 7;
 800036e:	2307      	movs	r3, #7
 8000370:	73fb      	strb	r3, [r7, #15]
		}


		*led_register = 1 << scale ;
 8000372:	7bfb      	ldrb	r3, [r7, #15]
 8000374:	2201      	movs	r2, #1
 8000376:	fa02 f303 	lsl.w	r3, r2, r3
 800037a:	b2da      	uxtb	r2, r3
 800037c:	68bb      	ldr	r3, [r7, #8]
 800037e:	701a      	strb	r2, [r3, #0]

		if(*led_register == 0x0004){
 8000380:	68bb      	ldr	r3, [r7, #8]
 8000382:	781b      	ldrb	r3, [r3, #0]
 8000384:	2b04      	cmp	r3, #4
 8000386:	d11b      	bne.n	80003c0 <ContinuousReadSingleChannelADC+0x170>
		    GPIOA->ODR |= (1 << 3);
 8000388:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800038c:	695b      	ldr	r3, [r3, #20]
 800038e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000392:	f043 0308 	orr.w	r3, r3, #8
 8000396:	6153      	str	r3, [r2, #20]
		    start_pwm_2_buzzers(TIM1, 1,300, 90); // PA8
 8000398:	235a      	movs	r3, #90	@ 0x5a
 800039a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800039e:	2101      	movs	r1, #1
 80003a0:	4815      	ldr	r0, [pc, #84]	@ (80003f8 <ContinuousReadSingleChannelADC+0x1a8>)
 80003a2:	f000 f8b3 	bl	800050c <start_pwm_2_buzzers>
		    delay_ms(5);
 80003a6:	463b      	mov	r3, r7
 80003a8:	469c      	mov	ip, r3
 80003aa:	2005      	movs	r0, #5
 80003ac:	f7ff ff34 	bl	8000218 <delay_ms.0>
		    start_pwm_2_buzzers(TIM1, 2,1000, 90); // PA9
 80003b0:	235a      	movs	r3, #90	@ 0x5a
 80003b2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80003b6:	2102      	movs	r1, #2
 80003b8:	480f      	ldr	r0, [pc, #60]	@ (80003f8 <ContinuousReadSingleChannelADC+0x1a8>)
 80003ba:	f000 f8a7 	bl	800050c <start_pwm_2_buzzers>
 80003be:	e7ba      	b.n	8000336 <ContinuousReadSingleChannelADC+0xe6>



		    }
		else{
			GPIOA->BRR = (1 << 3);
 80003c0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80003c4:	2208      	movs	r2, #8
 80003c6:	629a      	str	r2, [r3, #40]	@ 0x28
			//start_pwm(500,0);
			start_pwm_2_buzzers(TIM1, 1,500, 0);
 80003c8:	2300      	movs	r3, #0
 80003ca:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80003ce:	2101      	movs	r1, #1
 80003d0:	4809      	ldr	r0, [pc, #36]	@ (80003f8 <ContinuousReadSingleChannelADC+0x1a8>)
 80003d2:	f000 f89b 	bl	800050c <start_pwm_2_buzzers>
			start_pwm_2_buzzers(TIM1, 2,500, 0);
 80003d6:	2300      	movs	r3, #0
 80003d8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80003dc:	2102      	movs	r1, #2
 80003de:	4806      	ldr	r0, [pc, #24]	@ (80003f8 <ContinuousReadSingleChannelADC+0x1a8>)
 80003e0:	f000 f894 	bl	800050c <start_pwm_2_buzzers>
		while(!(ADC1->ISR &= ADC_ISR_EOC));
 80003e4:	e7a7      	b.n	8000336 <ContinuousReadSingleChannelADC+0xe6>
 80003e6:	bf00      	nop
 80003e8:	48001015 	.word	0x48001015
 80003ec:	40021000 	.word	0x40021000
 80003f0:	50000300 	.word	0x50000300
 80003f4:	00804021 	.word	0x00804021
 80003f8:	40012c00 	.word	0x40012c00

080003fc <setup_gpio_PA3_OUTPUT>:

}



void setup_gpio_PA3_OUTPUT() {
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0
    RCC->AHBENR |= RCC_AHBENR_GPIOAEN;  // Enable GPIOA clock
 8000400:	4b19      	ldr	r3, [pc, #100]	@ (8000468 <setup_gpio_PA3_OUTPUT+0x6c>)
 8000402:	695b      	ldr	r3, [r3, #20]
 8000404:	4a18      	ldr	r2, [pc, #96]	@ (8000468 <setup_gpio_PA3_OUTPUT+0x6c>)
 8000406:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800040a:	6153      	str	r3, [r2, #20]
    GPIOA->MODER &= ~(0x3 << (3 * 2));  // Clear mode bits for PA3
 800040c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000416:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800041a:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (0x1 << (3 * 2));   // Set mode to General purpose output mode
 800041c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000426:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800042a:	6013      	str	r3, [r2, #0]

    GPIOA->OTYPER &= ~(1 << 3);         // Set output type to push-pull
 800042c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000430:	685b      	ldr	r3, [r3, #4]
 8000432:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000436:	f023 0308 	bic.w	r3, r3, #8
 800043a:	6053      	str	r3, [r2, #4]
    GPIOA->OSPEEDR |= (0x3 << (3 * 2)); // Set output speed to high
 800043c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000440:	689b      	ldr	r3, [r3, #8]
 8000442:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000446:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800044a:	6093      	str	r3, [r2, #8]
    GPIOA->PUPDR &= ~(0x3 << (3 * 2));  // Ensure no pull-up or pull-down
 800044c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000450:	68db      	ldr	r3, [r3, #12]
 8000452:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000456:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800045a:	60d3      	str	r3, [r2, #12]

}
 800045c:	bf00      	nop
 800045e:	46bd      	mov	sp, r7
 8000460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop
 8000468:	40021000 	.word	0x40021000

0800046c <setup_gpio_PA8_PA9>:

////////////////////BUZZZZZER_CONFIG/////////////////////////////////////////////////////////////////////



void setup_gpio_PA8_PA9(void) {
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
        // Enable GPIOA clock
        RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8000470:	4b25      	ldr	r3, [pc, #148]	@ (8000508 <setup_gpio_PA8_PA9+0x9c>)
 8000472:	695b      	ldr	r3, [r3, #20]
 8000474:	4a24      	ldr	r2, [pc, #144]	@ (8000508 <setup_gpio_PA8_PA9+0x9c>)
 8000476:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800047a:	6153      	str	r3, [r2, #20]

        // Set PA8 and PA9 to alternate function mode
        GPIOA->MODER &= ~(0x3 << (8 * 2));  // Clear mode bits for PA8
 800047c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000486:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800048a:	6013      	str	r3, [r2, #0]
        GPIOA->MODER |= (0x2 << (8 * 2));   // Set mode to alternate function for PA8
 800048c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000496:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800049a:	6013      	str	r3, [r2, #0]

        GPIOA->MODER &= ~(0x3 << (9 * 2));  // Clear mode bits for PA9
 800049c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80004a6:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 80004aa:	6013      	str	r3, [r2, #0]
        GPIOA->MODER |= (0x2 << (9 * 2));   // Set mode to alternate function for PA9
 80004ac:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80004b6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80004ba:	6013      	str	r3, [r2, #0]

        // Set alternate function to TIM1_CH1 (AF6) for PA8 and TIM1_CH2 (AF6) for PA9
        GPIOA->AFR[1] &= ~(0xF << ((8 - 8) * 4)); // Clear alternate function bits for PA8
 80004bc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80004c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80004c2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80004c6:	f023 030f 	bic.w	r3, r3, #15
 80004ca:	6253      	str	r3, [r2, #36]	@ 0x24
        GPIOA->AFR[1] |= (0x6 << ((8 - 8) * 4));  // Set alternate function to AF6 (TIM1_CH1)
 80004cc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80004d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80004d2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80004d6:	f043 0306 	orr.w	r3, r3, #6
 80004da:	6253      	str	r3, [r2, #36]	@ 0x24

        GPIOA->AFR[1] &= ~(0xF << ((9 - 8) * 4)); // Clear alternate function bits for PA9
 80004dc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80004e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80004e2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80004e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80004ea:	6253      	str	r3, [r2, #36]	@ 0x24
        GPIOA->AFR[1] |= (0x6 << ((9 - 8) * 4));  // Set alternate function to AF6 (TIM1_CH2)
 80004ec:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80004f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80004f2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80004f6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80004fa:	6253      	str	r3, [r2, #36]	@ 0x24
    }
 80004fc:	bf00      	nop
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	40021000 	.word	0x40021000

0800050c <start_pwm_2_buzzers>:



/////////////////PWM for 2 Buzzers PA8 and PA9////////////////////////////

void start_pwm_2_buzzers(TIM_TypeDef *TIMx, uint32_t channel, uint32_t frequency, uint32_t duty_cycle) {
 800050c:	b480      	push	{r7}
 800050e:	b089      	sub	sp, #36	@ 0x24
 8000510:	af00      	add	r7, sp, #0
 8000512:	60f8      	str	r0, [r7, #12]
 8000514:	60b9      	str	r1, [r7, #8]
 8000516:	607a      	str	r2, [r7, #4]
 8000518:	603b      	str	r3, [r7, #0]
    uint32_t timer_clock = 8000000; // Assuming 8 MHz clock for simplicity
 800051a:	4b1e      	ldr	r3, [pc, #120]	@ (8000594 <start_pwm_2_buzzers+0x88>)
 800051c:	61fb      	str	r3, [r7, #28]

    // Calculate prescaler and auto-reload values for the desired frequency
    uint32_t prescaler = (timer_clock / (frequency * 1000)) - 1;
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000524:	fb02 f303 	mul.w	r3, r2, r3
 8000528:	69fa      	ldr	r2, [r7, #28]
 800052a:	fbb2 f3f3 	udiv	r3, r2, r3
 800052e:	3b01      	subs	r3, #1
 8000530:	61bb      	str	r3, [r7, #24]
    uint32_t period = 1000; // Fixed period value for simplicity
 8000532:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000536:	617b      	str	r3, [r7, #20]

    // Set the prescaler and auto-reload register values
    TIMx->PSC = prescaler;
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	69ba      	ldr	r2, [r7, #24]
 800053c:	629a      	str	r2, [r3, #40]	@ 0x28
    TIMx->ARR = period;
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	697a      	ldr	r2, [r7, #20]
 8000542:	62da      	str	r2, [r3, #44]	@ 0x2c

    // Calculate and set the compare value for the desired duty cycle
    if (channel == 1) {
 8000544:	68bb      	ldr	r3, [r7, #8]
 8000546:	2b01      	cmp	r3, #1
 8000548:	d10a      	bne.n	8000560 <start_pwm_2_buzzers+0x54>
        TIMx->CCR1 = (period * duty_cycle) / 100;
 800054a:	697b      	ldr	r3, [r7, #20]
 800054c:	683a      	ldr	r2, [r7, #0]
 800054e:	fb02 f303 	mul.w	r3, r2, r3
 8000552:	4a11      	ldr	r2, [pc, #68]	@ (8000598 <start_pwm_2_buzzers+0x8c>)
 8000554:	fba2 2303 	umull	r2, r3, r2, r3
 8000558:	095a      	lsrs	r2, r3, #5
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	635a      	str	r2, [r3, #52]	@ 0x34
 800055e:	e00c      	b.n	800057a <start_pwm_2_buzzers+0x6e>
    } else if (channel == 2) {
 8000560:	68bb      	ldr	r3, [r7, #8]
 8000562:	2b02      	cmp	r3, #2
 8000564:	d109      	bne.n	800057a <start_pwm_2_buzzers+0x6e>
        TIMx->CCR2 = (period * duty_cycle) / 100;
 8000566:	697b      	ldr	r3, [r7, #20]
 8000568:	683a      	ldr	r2, [r7, #0]
 800056a:	fb02 f303 	mul.w	r3, r2, r3
 800056e:	4a0a      	ldr	r2, [pc, #40]	@ (8000598 <start_pwm_2_buzzers+0x8c>)
 8000570:	fba2 2303 	umull	r2, r3, r2, r3
 8000574:	095a      	lsrs	r2, r3, #5
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	639a      	str	r2, [r3, #56]	@ 0x38
    }

    // Start the timer
    TIMx->CR1 |= TIM_CR1_CEN;
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	f043 0201 	orr.w	r2, r3, #1
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	601a      	str	r2, [r3, #0]
}
 8000586:	bf00      	nop
 8000588:	3724      	adds	r7, #36	@ 0x24
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	007a1200 	.word	0x007a1200
 8000598:	51eb851f 	.word	0x51eb851f

0800059c <setup_timer2_pwm>:


void setup_timer2_pwm(void) {
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
    // Enable TIM1 clock
    RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 80005a0:	4b20      	ldr	r3, [pc, #128]	@ (8000624 <setup_timer2_pwm+0x88>)
 80005a2:	699b      	ldr	r3, [r3, #24]
 80005a4:	4a1f      	ldr	r2, [pc, #124]	@ (8000624 <setup_timer2_pwm+0x88>)
 80005a6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80005aa:	6193      	str	r3, [r2, #24]

    // Configure TIM1 for PWM mode on CH1 (PA8) and CH2 (PA9)
    TIM1->PSC = 7999;  // Prescaler value (to get a suitable PWM frequency)
 80005ac:	4b1e      	ldr	r3, [pc, #120]	@ (8000628 <setup_timer2_pwm+0x8c>)
 80005ae:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80005b2:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM1->ARR = 1000;  // Auto-reload value (to set the PWM period)
 80005b4:	4b1c      	ldr	r3, [pc, #112]	@ (8000628 <setup_timer2_pwm+0x8c>)
 80005b6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80005ba:	62da      	str	r2, [r3, #44]	@ 0x2c

    // Set output compare mode to PWM1 for CH1
    TIM1->CCMR1 &= ~TIM_CCMR1_OC1M;
 80005bc:	4b1a      	ldr	r3, [pc, #104]	@ (8000628 <setup_timer2_pwm+0x8c>)
 80005be:	699b      	ldr	r3, [r3, #24]
 80005c0:	4a19      	ldr	r2, [pc, #100]	@ (8000628 <setup_timer2_pwm+0x8c>)
 80005c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80005c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80005ca:	6193      	str	r3, [r2, #24]
    TIM1->CCMR1 |= (0x6 << TIM_CCMR1_OC1M_Pos);
 80005cc:	4b16      	ldr	r3, [pc, #88]	@ (8000628 <setup_timer2_pwm+0x8c>)
 80005ce:	699b      	ldr	r3, [r3, #24]
 80005d0:	4a15      	ldr	r2, [pc, #84]	@ (8000628 <setup_timer2_pwm+0x8c>)
 80005d2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80005d6:	6193      	str	r3, [r2, #24]

    // Set output compare mode to PWM1 for CH2
    TIM1->CCMR1 &= ~TIM_CCMR1_OC2M;
 80005d8:	4b13      	ldr	r3, [pc, #76]	@ (8000628 <setup_timer2_pwm+0x8c>)
 80005da:	699b      	ldr	r3, [r3, #24]
 80005dc:	4a12      	ldr	r2, [pc, #72]	@ (8000628 <setup_timer2_pwm+0x8c>)
 80005de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80005e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80005e6:	6193      	str	r3, [r2, #24]
    TIM1->CCMR1 |= (0x6 << TIM_CCMR1_OC2M_Pos);
 80005e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000628 <setup_timer2_pwm+0x8c>)
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	4a0e      	ldr	r2, [pc, #56]	@ (8000628 <setup_timer2_pwm+0x8c>)
 80005ee:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 80005f2:	6193      	str	r3, [r2, #24]

    // Enable the output compare channels 1 and 2
    TIM1->CCER |= TIM_CCER_CC1E | TIM_CCER_CC2E;
 80005f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000628 <setup_timer2_pwm+0x8c>)
 80005f6:	6a1b      	ldr	r3, [r3, #32]
 80005f8:	4a0b      	ldr	r2, [pc, #44]	@ (8000628 <setup_timer2_pwm+0x8c>)
 80005fa:	f043 0311 	orr.w	r3, r3, #17
 80005fe:	6213      	str	r3, [r2, #32]

    // Enable the main output
    TIM1->BDTR |= TIM_BDTR_MOE;
 8000600:	4b09      	ldr	r3, [pc, #36]	@ (8000628 <setup_timer2_pwm+0x8c>)
 8000602:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000604:	4a08      	ldr	r2, [pc, #32]	@ (8000628 <setup_timer2_pwm+0x8c>)
 8000606:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800060a:	6453      	str	r3, [r2, #68]	@ 0x44

    // Start the timer
    TIM1->CR1 |= TIM_CR1_CEN;
 800060c:	4b06      	ldr	r3, [pc, #24]	@ (8000628 <setup_timer2_pwm+0x8c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a05      	ldr	r2, [pc, #20]	@ (8000628 <setup_timer2_pwm+0x8c>)
 8000612:	f043 0301 	orr.w	r3, r3, #1
 8000616:	6013      	str	r3, [r2, #0]
}
 8000618:	bf00      	nop
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	40021000 	.word	0x40021000
 8000628:	40012c00 	.word	0x40012c00

0800062c <main>:
#endif



int main(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
	enable_clocks();
 8000630:	f7ff fdd0 	bl	80001d4 <enable_clocks>
	initialise_board();
 8000634:	f7ff fdde 	bl	80001f4 <initialise_board>

	setup_gpio_PA8_PA9();
 8000638:	f7ff ff18 	bl	800046c <setup_gpio_PA8_PA9>
	setup_timer2_pwm();
 800063c:	f7ff ffae 	bl	800059c <setup_timer2_pwm>

	ContinuousReadSingleChannelADC();
 8000640:	f7ff fe06 	bl	8000250 <ContinuousReadSingleChannelADC>
 8000644:	2300      	movs	r3, #0


}
 8000646:	4618      	mov	r0, r3
 8000648:	bd80      	pop	{r7, pc}
	...

0800064c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800064c:	480d      	ldr	r0, [pc, #52]	@ (8000684 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800064e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000650:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000654:	480c      	ldr	r0, [pc, #48]	@ (8000688 <LoopForever+0x6>)
  ldr r1, =_edata
 8000656:	490d      	ldr	r1, [pc, #52]	@ (800068c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000658:	4a0d      	ldr	r2, [pc, #52]	@ (8000690 <LoopForever+0xe>)
  movs r3, #0
 800065a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800065c:	e002      	b.n	8000664 <LoopCopyDataInit>

0800065e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800065e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000660:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000662:	3304      	adds	r3, #4

08000664 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000664:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000666:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000668:	d3f9      	bcc.n	800065e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800066a:	4a0a      	ldr	r2, [pc, #40]	@ (8000694 <LoopForever+0x12>)
  ldr r4, =_ebss
 800066c:	4c0a      	ldr	r4, [pc, #40]	@ (8000698 <LoopForever+0x16>)
  movs r3, #0
 800066e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000670:	e001      	b.n	8000676 <LoopFillZerobss>

08000672 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000672:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000674:	3204      	adds	r2, #4

08000676 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000676:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000678:	d3fb      	bcc.n	8000672 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800067a:	f000 f811 	bl	80006a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800067e:	f7ff ffd5 	bl	800062c <main>

08000682 <LoopForever>:

LoopForever:
  b LoopForever
 8000682:	e7fe      	b.n	8000682 <LoopForever>
  ldr   r0, =_estack
 8000684:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000688:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800068c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000690:	08000708 	.word	0x08000708
  ldr r2, =_sbss
 8000694:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000698:	2000001c 	.word	0x2000001c

0800069c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800069c:	e7fe      	b.n	800069c <ADC1_2_IRQHandler>
	...

080006a0 <__libc_init_array>:
 80006a0:	b570      	push	{r4, r5, r6, lr}
 80006a2:	4d0d      	ldr	r5, [pc, #52]	@ (80006d8 <__libc_init_array+0x38>)
 80006a4:	4c0d      	ldr	r4, [pc, #52]	@ (80006dc <__libc_init_array+0x3c>)
 80006a6:	1b64      	subs	r4, r4, r5
 80006a8:	10a4      	asrs	r4, r4, #2
 80006aa:	2600      	movs	r6, #0
 80006ac:	42a6      	cmp	r6, r4
 80006ae:	d109      	bne.n	80006c4 <__libc_init_array+0x24>
 80006b0:	4d0b      	ldr	r5, [pc, #44]	@ (80006e0 <__libc_init_array+0x40>)
 80006b2:	4c0c      	ldr	r4, [pc, #48]	@ (80006e4 <__libc_init_array+0x44>)
 80006b4:	f000 f818 	bl	80006e8 <_init>
 80006b8:	1b64      	subs	r4, r4, r5
 80006ba:	10a4      	asrs	r4, r4, #2
 80006bc:	2600      	movs	r6, #0
 80006be:	42a6      	cmp	r6, r4
 80006c0:	d105      	bne.n	80006ce <__libc_init_array+0x2e>
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80006c8:	4798      	blx	r3
 80006ca:	3601      	adds	r6, #1
 80006cc:	e7ee      	b.n	80006ac <__libc_init_array+0xc>
 80006ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80006d2:	4798      	blx	r3
 80006d4:	3601      	adds	r6, #1
 80006d6:	e7f2      	b.n	80006be <__libc_init_array+0x1e>
 80006d8:	08000700 	.word	0x08000700
 80006dc:	08000700 	.word	0x08000700
 80006e0:	08000700 	.word	0x08000700
 80006e4:	08000704 	.word	0x08000704

080006e8 <_init>:
 80006e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006ea:	bf00      	nop
 80006ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006ee:	bc08      	pop	{r3}
 80006f0:	469e      	mov	lr, r3
 80006f2:	4770      	bx	lr

080006f4 <_fini>:
 80006f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006f6:	bf00      	nop
 80006f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006fa:	bc08      	pop	{r3}
 80006fc:	469e      	mov	lr, r3
 80006fe:	4770      	bx	lr
